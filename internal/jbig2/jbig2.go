//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package jbig2

import (
	_b "github.com/szwede/unipdf/internal/bitwise"
	_c "github.com/szwede/unipdf/internal/jbig2/decoder"
	_gb "github.com/szwede/unipdf/internal/jbig2/document"
	_cb "github.com/szwede/unipdf/internal/jbig2/document/segments"
	_g "github.com/szwede/unipdf/internal/jbig2/errors"
	_ag "sort"
)

func (_cf Globals) ToDocumentGlobals() *_gb.Globals {
	if _cf == nil {
		return nil
	}
	_fbd := []*_cb.Header{}
	for _, _ggd := range _cf {
		_fbd = append(_fbd, _ggd)
	}
	_ag.Slice(_fbd, func(_fbg, _gc int) bool { return _fbd[_fbg].SegmentNumber < _fbd[_gc].SegmentNumber })
	return &_gb.Globals{Segments: _fbd}
}

func DecodeBytes(encoded []byte, parameters _c.Parameters, globals ...Globals) ([]byte, error) {
	var _d Globals
	if len(globals) > 0 {
		_d = globals[0]
	}
	_f, _gd := _c.Decode(encoded, parameters, _d.ToDocumentGlobals())
	if _gd != nil {
		return nil, _gd
	}
	return _f.DecodeNextPage()
}

type Globals map[int]*_cb.Header

func DecodeGlobals(encoded []byte) (Globals, error) {
	const _fb = "\u0044\u0065\u0063\u006f\u0064\u0065\u0047\u006c\u006f\u0062\u0061\u006c\u0073"
	_e := _b.NewReader(encoded)
	_cc, _agb := _gb.DecodeDocument(_e, nil)
	if _agb != nil {
		return nil, _g.Wrap(_agb, _fb, "")
	}
	if _cc.GlobalSegments == nil || (_cc.GlobalSegments.Segments == nil) {
		return nil, _g.Error(_fb, "\u006eo\u0020\u0067\u006c\u006f\u0062\u0061\u006c\u0020\u0073\u0065\u0067m\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0075\u006e\u0064")
	}
	_gg := Globals{}
	for _, _dd := range _cc.GlobalSegments.Segments {
		_gg[int(_dd.SegmentNumber)] = _dd
	}
	return _gg, nil
}
