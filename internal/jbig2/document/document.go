//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package document

import (
	_f "encoding/binary"
	_b "fmt"
	_ee "github.com/szwede/unipdf/v4/common"
	_gg "github.com/szwede/unipdf/v4/internal/bitwise"
	_fe "github.com/szwede/unipdf/v4/internal/jbig2/basic"
	_fb "github.com/szwede/unipdf/v4/internal/jbig2/bitmap"
	_af "github.com/szwede/unipdf/v4/internal/jbig2/document/segments"
	_ec "github.com/szwede/unipdf/v4/internal/jbig2/encoder/classer"
	_fbc "github.com/szwede/unipdf/v4/internal/jbig2/errors"
	_g "io"
	_c "math"
	_a "runtime/debug"
)

func (_aaea *Document) addSymbolDictionary(_ccef int, _dde *_fb.Bitmaps, _ca []int, _efd map[int]int, _gee bool) (*_af.Header, error) {
	const _fee = "\u0061\u0064\u0064\u0053ym\u0062\u006f\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079"
	_cfbe := &_af.SymbolDictionary{}
	if _gcb := _cfbe.InitEncode(_dde, _ca, _efd, _gee); _gcb != nil {
		return nil, _gcb
	}
	_cfbee := &_af.Header{Type: _af.TSymbolDictionary, PageAssociation: _ccef, SegmentData: _cfbe}
	if _ccef == 0 {
		if _aaea.GlobalSegments == nil {
			_aaea.GlobalSegments = &Globals{}
		}
		_aaea.GlobalSegments.AddSegment(_cfbee)
		return _cfbee, nil
	}
	_dddbf, _fgd := _aaea.Pages[_ccef]
	if !_fgd {
		return nil, _fbc.Errorf(_fee, "p\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020n\u006f\u0074\u0020\u0066ou\u006e\u0064", _ccef)
	}
	var (
		_dddg int
		_cfdf *_af.Header
	)
	for _dddg, _cfdf = range _dddbf.Segments {
		if _cfdf.Type == _af.TPageInformation {
			break
		}
	}
	_dddg++
	_dddbf.Segments = append(_dddbf.Segments, nil)
	copy(_dddbf.Segments[_dddg+1:], _dddbf.Segments[_dddg:])
	_dddbf.Segments[_dddg] = _cfbee
	return _cfbee, nil
}

func (_geb *Document) encodeSegment(_ce *_af.Header, _aef *int) error {
	const _fca = "\u0065\u006e\u0063\u006f\u0064\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074"
	_ce.SegmentNumber = _geb.nextSegmentNumber()
	_afe, _fbb := _ce.Encode(_geb._ed)
	if _fbb != nil {
		return _fbc.Wrapf(_fbb, _fca, "\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027", _ce.SegmentNumber)
	}
	*_aef += _afe
	return nil
}

func InitEncodeDocument(fullHeaders bool) *Document {
	return &Document{FullHeaders: fullHeaders, _ed: _gg.BufferedMSB(), Pages: map[int]*Page{}, _be: map[int][]int{}, _cc: map[int]int{}, _gc: map[int][]int{}}
}

func (_ffg *Globals) GetSegment(segmentNumber int) (*_af.Header, error) {
	const _bgd = "\u0047l\u006fb\u0061\u006c\u0073\u002e\u0047e\u0074\u0053e\u0067\u006d\u0065\u006e\u0074"
	if _ffg == nil {
		return nil, _fbc.Error(_bgd, "\u0067\u006c\u006f\u0062al\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064")
	}
	if len(_ffg.Segments) == 0 {
		return nil, _fbc.Error(_bgd, "\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u0020\u0061\u0072\u0065\u0020e\u006d\u0070\u0074\u0079")
	}
	var _dcg *_af.Header
	for _, _dcg = range _ffg.Segments {
		if _dcg.SegmentNumber == uint32(segmentNumber) {
			break
		}
	}
	if _dcg == nil {
		return nil, _fbc.Error(_bgd, "\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064")
	}
	return _dcg, nil
}

func (_bacf *Page) getPageInformationSegment() *_af.Header {
	for _, _gfad := range _bacf.Segments {
		if _gfad.Type == _af.TPageInformation {
			return _gfad
		}
	}
	_ee.Log.Debug("\u0050\u0061\u0067\u0065\u0020\u0069\u006e\u0066o\u0072\u006d\u0061ti\u006f\u006e\u0020\u0073\u0065\u0067m\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0066o\u0072\u0020\u0070\u0061\u0067\u0065\u003a\u0020%\u0073\u002e", _bacf)
	return nil
}

func (_bfe *Document) GetGlobalSegment(i int) (*_af.Header, error) {
	_bfg, _bad := _bfe.GlobalSegments.GetSegment(i)
	if _bad != nil {
		return nil, _fbc.Wrap(_bad, "\u0047\u0065t\u0047\u006c\u006fb\u0061\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074", "")
	}
	return _bfg, nil
}

func (_gge *Page) createStripedPage(_geg *_af.PageInformationSegment) error {
	const _ege = "\u0063\u0072\u0065\u0061\u0074\u0065\u0053\u0074\u0072\u0069\u0070\u0065d\u0050\u0061\u0067\u0065"
	_caa, _gda := _gge.collectPageStripes()
	if _gda != nil {
		return _fbc.Wrap(_gda, _ege, "")
	}
	var _fgc int
	for _, _bbfb := range _caa {
		if _cbbd, _fff := _bbfb.(*_af.EndOfStripe); _fff {
			_fgc = _cbbd.LineNumber() + 1
		} else {
			_agb := _bbfb.(_af.Regioner)
			_cgd := _agb.GetRegionInfo()
			_dbg := _gge.getCombinationOperator(_geg, _cgd.CombinaionOperator)
			_fgdb, _eea := _agb.GetRegionBitmap()
			if _eea != nil {
				return _fbc.Wrap(_eea, _ege, "")
			}
			_eea = _fb.Blit(_fgdb, _gge.Bitmap, int(_cgd.XLocation), _fgc, _dbg)
			if _eea != nil {
				return _fbc.Wrap(_eea, _ege, "")
			}
		}
	}
	return nil
}

func (_gcbc *Page) clearSegmentData() {
	for _acaa := range _gcbc.Segments {
		_gcbc.Segments[_acaa].CleanSegmentData()
	}
}

func (_eag *Page) AddPageInformationSegment() {
	_dff := &_af.PageInformationSegment{PageBMWidth: _eag.FinalWidth, PageBMHeight: _eag.FinalHeight, ResolutionX: _eag.ResolutionX, ResolutionY: _eag.ResolutionY, IsLossless: _eag.IsLossless}
	if _eag.BlackIsOne {
		_dff.DefaultPixelValue = uint8(0x1)
	}
	_gbc := &_af.Header{PageAssociation: _eag.PageNumber, SegmentDataLength: uint64(_dff.Size()), SegmentData: _dff, Type: _af.TPageInformation}
	_eag.Segments = append(_eag.Segments, _gbc)
}

var _aa = []byte{0x97, 0x4A, 0x42, 0x32, 0x0D, 0x0A, 0x1A, 0x0A}

func (_fbbe *Document) nextPageNumber() uint32 { _fbbe.NumberOfPages++; return _fbbe.NumberOfPages }

func _ccd(_fea *Document, _facd int) *Page {
	return &Page{Document: _fea, PageNumber: _facd, Segments: []*_af.Header{}}
}

func (_cbb *Page) GetResolutionY() (int, error) { return _cbb.getResolutionY() }

type Document struct {
	Pages                map[int]*Page
	NumberOfPagesUnknown bool
	NumberOfPages        uint32
	GBUseExtTemplate     bool
	InputStream          *_gg.Reader
	GlobalSegments       *Globals
	OrganizationType     _af.OrganizationType
	Classer              *_ec.Classer
	XRes, YRes           int
	FullHeaders          bool
	CurrentSegmentNumber uint32
	AverageTemplates     *_fb.Bitmaps
	BaseIndexes          []int
	Refinement           bool
	RefineLevel          int
	_d                   uint8
	_ed                  *_gg.BufferedWriter
	EncodeGlobals        bool
	_cf                  int
	_be                  map[int][]int
	_gc                  map[int][]int
	_eb                  []int
	_cc                  map[int]int
}

func (_dc *Document) isFileHeaderPresent() (bool, error) {
	_dc.InputStream.Mark()
	for _, _eac := range _aa {
		_fdg, _gfb := _dc.InputStream.ReadByte()
		if _gfb != nil {
			return false, _gfb
		}
		if _eac != _fdg {
			_dc.InputStream.Reset()
			return false, nil
		}
	}
	_dc.InputStream.Reset()
	return true, nil
}

func (_db *Document) encodeFileHeader(_fcc _gg.BinaryWriter) (_ggg int, _bd error) {
	const _gac = "\u0065\u006ec\u006f\u0064\u0065F\u0069\u006c\u0065\u0048\u0065\u0061\u0064\u0065\u0072"
	_ggg, _bd = _fcc.Write(_aa)
	if _bd != nil {
		return _ggg, _fbc.Wrap(_bd, _gac, "\u0069\u0064")
	}
	if _bd = _fcc.WriteByte(0x01); _bd != nil {
		return _ggg, _fbc.Wrap(_bd, _gac, "\u0066\u006c\u0061g\u0073")
	}
	_ggg++
	_abf := make([]byte, 4)
	_f.BigEndian.PutUint32(_abf, _db.NumberOfPages)
	_eff, _bd := _fcc.Write(_abf)
	if _bd != nil {
		return _eff, _fbc.Wrap(_bd, _gac, "p\u0061\u0067\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072")
	}
	_ggg += _eff
	return _ggg, nil
}

func (_dfe *Globals) GetSymbolDictionary() (*_af.Header, error) {
	const _bac = "G\u006c\u006f\u0062\u0061\u006c\u0073.\u0047\u0065\u0074\u0053\u0079\u006d\u0062\u006f\u006cD\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079"
	if _dfe == nil {
		return nil, _fbc.Error(_bac, "\u0067\u006c\u006f\u0062al\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064")
	}
	if len(_dfe.Segments) == 0 {
		return nil, _fbc.Error(_bac, "\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u0020\u0061\u0072\u0065\u0020e\u006d\u0070\u0074\u0079")
	}
	for _, _edce := range _dfe.Segments {
		if _edce.Type == _af.TSymbolDictionary {
			return _edce, nil
		}
	}
	return nil, _fbc.Error(_bac, "\u0067\u006c\u006fba\u006c\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0020d\u0069c\u0074i\u006fn\u0061\u0072\u0079\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064")
}

func (_bgdg *Page) countRegions() int {
	var _ebfc int
	for _, _cbag := range _bgdg.Segments {
		switch _cbag.Type {
		case 6, 7, 22, 23, 38, 39, 42, 43:
			_ebfc++
		}
	}
	return _ebfc
}

type Globals struct{ Segments []*_af.Header }

type EncodingMethod int

func (_acg *Document) GetNumberOfPages() (uint32, error) {
	if _acg.NumberOfPagesUnknown || _acg.NumberOfPages == 0 {
		if len(_acg.Pages) == 0 {
			if _cgg := _acg.mapData(); _cgg != nil {
				return 0, _fbc.Wrap(_cgg, "\u0044o\u0063\u0075\u006d\u0065n\u0074\u002e\u0047\u0065\u0074N\u0075m\u0062e\u0072\u004f\u0066\u0050\u0061\u0067\u0065s", "")
			}
		}
		return uint32(len(_acg.Pages)), nil
	}
	return _acg.NumberOfPages, nil
}

func (_edc *Document) mapData() error {
	const _cde = "\u006da\u0070\u0044\u0061\u0074\u0061"
	var (
		_ffa  []*_af.Header
		_ddeb int64
		_bca  _af.Type
	)
	_fbbf, _bb := _edc.isFileHeaderPresent()
	if _bb != nil {
		return _fbc.Wrap(_bb, _cde, "")
	}
	if _fbbf {
		if _bb = _edc.parseFileHeader(); _bb != nil {
			return _fbc.Wrap(_bb, _cde, "")
		}
		_ddeb += int64(_edc._d)
		_edc.FullHeaders = true
	}
	var (
		_ccfe *Page
		_daf  bool
	)
	for _bca != 51 && !_daf {
		_fec, _gdd := _af.NewHeader(_edc, _edc.InputStream, _ddeb, _edc.OrganizationType)
		if _gdd != nil {
			return _fbc.Wrap(_gdd, _cde, "")
		}
		_ee.Log.Trace("\u0044\u0065c\u006f\u0064\u0069\u006eg\u0020\u0073e\u0067\u006d\u0065\u006e\u0074\u0020\u006e\u0075m\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c\u0020\u0054\u0079\u0070e\u003a\u0020\u0025\u0073", _fec.SegmentNumber, _fec.Type)
		_bca = _fec.Type
		if _bca != _af.TEndOfFile {
			if _fec.PageAssociation != 0 {
				_ccfe = _edc.Pages[_fec.PageAssociation]
				if _ccfe == nil {
					_ccfe = _ccd(_edc, _fec.PageAssociation)
					_edc.Pages[_fec.PageAssociation] = _ccfe
					if _edc.NumberOfPagesUnknown {
						_edc.NumberOfPages++
					}
				}
				_ccfe.Segments = append(_ccfe.Segments, _fec)
			} else {
				_edc.GlobalSegments.AddSegment(_fec)
			}
		}
		_ffa = append(_ffa, _fec)
		_ddeb = _edc.InputStream.AbsolutePosition()
		if _edc.OrganizationType == _af.OSequential {
			_ddeb += int64(_fec.SegmentDataLength)
		}
		_daf, _gdd = _edc.reachedEOF(_ddeb)
		if _gdd != nil {
			_ee.Log.Debug("\u006a\u0062\u0069\u0067\u0032 \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u0020\u0072\u0065\u0061\u0063h\u0065\u0064\u0020\u0045\u004f\u0046\u0020\u0077\u0069\u0074\u0068\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076", _gdd)
			return _fbc.Wrap(_gdd, _cde, "")
		}
	}
	_edc.determineRandomDataOffsets(_ffa, uint64(_ddeb))
	return nil
}

func (_cbc *Page) AddGenericRegion(bm *_fb.Bitmap, xloc, yloc, template int, tp _af.Type, duplicateLineRemoval bool) error {
	const _beg = "P\u0061\u0067\u0065\u002eAd\u0064G\u0065\u006e\u0065\u0072\u0069c\u0052\u0065\u0067\u0069\u006f\u006e"
	_cbf := &_af.GenericRegion{}
	if _bbf := _cbf.InitEncode(bm, xloc, yloc, template, duplicateLineRemoval); _bbf != nil {
		return _fbc.Wrap(_bbf, _beg, "")
	}
	_fac := &_af.Header{Type: _af.TImmediateGenericRegion, PageAssociation: _cbc.PageNumber, SegmentData: _cbf}
	_cbc.Segments = append(_cbc.Segments, _fac)
	return nil
}

func (_edca *Globals) GetSegmentByIndex(index int) (*_af.Header, error) {
	const _effg = "\u0047l\u006f\u0062\u0061\u006cs\u002e\u0047\u0065\u0074\u0053e\u0067m\u0065n\u0074\u0042\u0079\u0049\u006e\u0064\u0065x"
	if _edca == nil {
		return nil, _fbc.Error(_effg, "\u0067\u006c\u006f\u0062al\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064")
	}
	if len(_edca.Segments) == 0 {
		return nil, _fbc.Error(_effg, "\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u0020\u0061\u0072\u0065\u0020e\u006d\u0070\u0074\u0079")
	}
	if index > len(_edca.Segments)-1 {
		return nil, _fbc.Error(_effg, "\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065")
	}
	return _edca.Segments[index], nil
}

func (_ccf *Document) completeSymbols() (_bc error) {
	const _bfd = "\u0063o\u006dp\u006c\u0065\u0074\u0065\u0053\u0079\u006d\u0062\u006f\u006c\u0073"
	if _ccf.Classer == nil {
		return nil
	}
	if _ccf.Classer.UndilatedTemplates == nil {
		return _fbc.Error(_bfd, "\u006e\u006f t\u0065\u006d\u0070l\u0061\u0074\u0065\u0073 de\u0066in\u0065\u0064\u0020\u0066\u006f\u0072\u0020th\u0065\u0020\u0063\u006c\u0061\u0073\u0073e\u0072")
	}
	_ac := len(_ccf.Pages) == 1
	_ag := make([]int, _ccf.Classer.UndilatedTemplates.Size())
	var _cg int
	for _eaa := 0; _eaa < _ccf.Classer.ClassIDs.Size(); _eaa++ {
		_cg, _bc = _ccf.Classer.ClassIDs.Get(_eaa)
		if _bc != nil {
			return _fbc.Wrap(_bc, _bfd, "\u0063\u006c\u0061\u0073\u0073\u0020\u0049\u0044\u0027\u0073")
		}
		_ag[_cg]++
	}
	var _fbd []int
	for _ggcf := 0; _ggcf < _ccf.Classer.UndilatedTemplates.Size(); _ggcf++ {
		if _ag[_ggcf] == 0 {
			return _fbc.Error(_bfd, "\u006eo\u0020\u0073y\u006d\u0062\u006f\u006cs\u0020\u0069\u006es\u0074\u0061\u006e\u0063\u0065\u0073\u0020\u0066\u006fun\u0064\u0020\u0066o\u0072\u0020g\u0069\u0076\u0065\u006e\u0020\u0063l\u0061\u0073s\u003f\u0020")
		}
		if _ag[_ggcf] > 1 || _ac {
			_fbd = append(_fbd, _ggcf)
		}
	}
	_ccf._cf = len(_fbd)
	var _ff, _fgg int
	for _afd := 0; _afd < _ccf.Classer.ComponentPageNumbers.Size(); _afd++ {
		_ff, _bc = _ccf.Classer.ComponentPageNumbers.Get(_afd)
		if _bc != nil {
			return _fbc.Wrapf(_bc, _bfd, "p\u0061\u0067\u0065\u003a\u0020\u0027\u0025\u0064\u0027 \u006e\u006f\u0074\u0020\u0066\u006f\u0075nd\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0063\u006c\u0061\u0073\u0073\u0065r \u0070\u0061g\u0065\u006e\u0075\u006d\u0062\u0065\u0072\u0073", _afd)
		}
		_fgg, _bc = _ccf.Classer.ClassIDs.Get(_afd)
		if _bc != nil {
			return _fbc.Wrapf(_bc, _bfd, "\u0063\u0061\u006e\u0027\u0074\u0020\u0067e\u0074\u0020\u0073y\u006d\u0062\u006f\u006c \u0066\u006f\u0072\u0020\u0070\u0061\u0067\u0065\u0020\u0027\u0025\u0064\u0027\u0020\u0066\u0072\u006f\u006d\u0020\u0063\u006c\u0061\u0073\u0073\u0065\u0072", _ff)
		}
		if _ag[_fgg] == 1 && !_ac {
			_ccf._be[_ff] = append(_ccf._be[_ff], _fgg)
		}
	}
	if _bc = _ccf.Classer.ComputeLLCorners(); _bc != nil {
		return _fbc.Wrap(_bc, _bfd, "")
	}
	return nil
}

func (_dg *Document) AddClassifiedPage(bm *_fb.Bitmap, method _ec.Method) (_ab error) {
	const _gb = "\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0041\u0064d\u0043\u006c\u0061\u0073\u0073\u0069\u0066\u0069\u0065\u0064P\u0061\u0067\u0065"
	if !_dg.FullHeaders && _dg.NumberOfPages != 0 {
		return _fbc.Error(_gb, "\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u0020\u0061\u006c\u0072\u0065a\u0064\u0079\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0073\u0020\u0070\u0061\u0067\u0065\u002e\u0020\u0046\u0069\u006c\u0065\u004d\u006f\u0064\u0065\u0020\u0064\u0069\u0073\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0064\u0064i\u006e\u0067\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u006f\u006e\u0065\u0020\u0070\u0061g\u0065")
	}
	if _dg.Classer == nil {
		if _dg.Classer, _ab = _ec.Init(_ec.DefaultSettings()); _ab != nil {
			return _fbc.Wrap(_ab, _gb, "")
		}
	}
	_ae := int(_dg.nextPageNumber())
	_fg := &Page{Segments: []*_af.Header{}, Bitmap: bm, Document: _dg, FinalHeight: bm.Height, FinalWidth: bm.Width, PageNumber: _ae}
	_dg.Pages[_ae] = _fg
	switch method {
	case _ec.RankHaus:
		_fg.EncodingMethod = RankHausEM
	case _ec.Correlation:
		_fg.EncodingMethod = CorrelationEM
	}
	_fg.AddPageInformationSegment()
	if _ab = _dg.Classer.AddPage(bm, _ae, method); _ab != nil {
		return _fbc.Wrap(_ab, _gb, "")
	}
	if _dg.FullHeaders {
		_fg.AddEndOfPageSegment()
	}
	return nil
}

func _gfa(_dee *_gg.Reader, _fba *Globals) (*Document, error) {
	_aab := &Document{Pages: make(map[int]*Page), InputStream: _dee, OrganizationType: _af.OSequential, NumberOfPagesUnknown: true, GlobalSegments: _fba, _d: 9}
	if _aab.GlobalSegments == nil {
		_aab.GlobalSegments = &Globals{}
	}
	if _dfb := _aab.mapData(); _dfb != nil {
		return nil, _dfb
	}
	return _aab, nil
}

func (_ecb *Page) addTextRegionSegment(_ead []*_af.Header, _dge, _dfff map[int]int, _cbfd []int, _gaff *_fb.Points, _dcf *_fb.Bitmaps, _gcc *_fe.IntSlice, _bfa *_fb.Boxes, _gab, _abe int) {
	_dbc := &_af.TextRegion{NumberOfSymbols: uint32(_abe)}
	_dbc.InitEncode(_dge, _dfff, _cbfd, _gaff, _dcf, _gcc, _bfa, _ecb.FinalWidth, _ecb.FinalHeight, _gab)
	_fcd := &_af.Header{RTSegments: _ead, SegmentData: _dbc, PageAssociation: _ecb.PageNumber, Type: _af.TImmediateTextRegion}
	_cfce := _af.TPageInformation
	if _dfff != nil {
		_cfce = _af.TSymbolDictionary
	}
	var _eda int
	for ; _eda < len(_ecb.Segments); _eda++ {
		if _ecb.Segments[_eda].Type == _cfce {
			_eda++
			break
		}
	}
	_ecb.Segments = append(_ecb.Segments, nil)
	copy(_ecb.Segments[_eda+1:], _ecb.Segments[_eda:])
	_ecb.Segments[_eda] = _fcd
}

func (_faa *Page) createPage(_eaf *_af.PageInformationSegment) error {
	var _gdb error
	if !_eaf.IsStripe || _eaf.PageBMHeight != -1 {
		_gdb = _faa.createNormalPage(_eaf)
	} else {
		_gdb = _faa.createStripedPage(_eaf)
	}
	return _gdb
}

type Page struct {
	Segments           []*_af.Header
	PageNumber         int
	Bitmap             *_fb.Bitmap
	FinalHeight        int
	FinalWidth         int
	ResolutionX        int
	ResolutionY        int
	IsLossless         bool
	Document           *Document
	FirstSegmentNumber int
	EncodingMethod     EncodingMethod
	BlackIsOne         bool
}

func (_egf *Document) encodeEOFHeader(_ggd _gg.BinaryWriter) (_cfc int, _fdd error) {
	_afgb := &_af.Header{SegmentNumber: _egf.nextSegmentNumber(), Type: _af.TEndOfFile}
	if _cfc, _fdd = _afgb.Encode(_ggd); _fdd != nil {
		return 0, _fbc.Wrap(_fdd, "\u0065n\u0063o\u0064\u0065\u0045\u004f\u0046\u0048\u0065\u0061\u0064\u0065\u0072", "")
	}
	return _cfc, nil
}

func (_fecf *Page) GetWidth() (int, error) { return _fecf.getWidth() }

func (_aae *Document) produceClassifiedPages() (_ebf error) {
	const _cd = "\u0070\u0072\u006f\u0064uc\u0065\u0043\u006c\u0061\u0073\u0073\u0069\u0066\u0069\u0065\u0064\u0050\u0061\u0067e\u0073"
	if _aae.Classer == nil {
		return nil
	}
	var (
		_gfe *Page
		_dd  bool
		_edf *_af.Header
	)
	for _aac := 1; _aac <= int(_aae.NumberOfPages); _aac++ {
		if _gfe, _dd = _aae.Pages[_aac]; !_dd {
			return _fbc.Errorf(_cd, "p\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020n\u006f\u0074\u0020\u0066ou\u006e\u0064", _aac)
		}
		if _gfe.EncodingMethod == GenericEM {
			continue
		}
		if _edf == nil {
			if _edf, _ebf = _aae.GlobalSegments.GetSymbolDictionary(); _ebf != nil {
				return _fbc.Wrap(_ebf, _cd, "")
			}
		}
		if _ebf = _aae.produceClassifiedPage(_gfe, _edf); _ebf != nil {
			return _fbc.Wrapf(_ebf, _cd, "\u0070\u0061\u0067\u0065\u003a\u0020\u0027\u0025\u0064\u0027", _aac)
		}
	}
	return nil
}

func _ggb(_afg int) int {
	_eab := 0
	_daa := (_afg & (_afg - 1)) == 0
	_afg >>= 1
	for ; _afg != 0; _afg >>= 1 {
		_eab++
	}
	if _daa {
		return _eab
	}
	return _eab + 1
}

func (_dcge *Page) GetBitmap() (_ebc *_fb.Bitmap, _gfbb error) {
	_ee.Log.Trace(_b.Sprintf("\u005b\u0050\u0041G\u0045\u005d\u005b\u0023%\u0064\u005d\u0020\u0047\u0065\u0074\u0042i\u0074\u006d\u0061\u0070\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e", _dcge.PageNumber))
	defer func() {
		if _gfbb != nil {
			_ee.Log.Trace(_b.Sprintf("\u005b\u0050\u0041\u0047\u0045\u005d\u005b\u0023\u0025\u0064\u005d\u0020\u0047\u0065\u0074B\u0069t\u006d\u0061\u0070\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076", _dcge.PageNumber, _gfbb))
		} else {
			_ee.Log.Trace(_b.Sprintf("\u005b\u0050\u0041\u0047\u0045\u005d\u005b\u0023\u0025\u0064]\u0020\u0047\u0065\u0074\u0042\u0069\u0074m\u0061\u0070\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064", _dcge.PageNumber))
		}
	}()
	if _dcge.Bitmap != nil {
		return _dcge.Bitmap, nil
	}
	_gfbb = _dcge.composePageBitmap()
	if _gfbb != nil {
		return nil, _gfbb
	}
	return _dcge.Bitmap, nil
}

func (_efa *Page) GetResolutionX() (int, error) { return _efa.getResolutionX() }

func (_ggca *Document) parseFileHeader() error {
	const _fab = "\u0070a\u0072s\u0065\u0046\u0069\u006c\u0065\u0048\u0065\u0061\u0064\u0065\u0072"
	_, _cdc := _ggca.InputStream.Seek(8, _g.SeekStart)
	if _cdc != nil {
		return _fbc.Wrap(_cdc, _fab, "\u0069\u0064")
	}
	_, _cdc = _ggca.InputStream.ReadBits(5)
	if _cdc != nil {
		return _fbc.Wrap(_cdc, _fab, "\u0072\u0065\u0073\u0065\u0072\u0076\u0065\u0064\u0020\u0062\u0069\u0074\u0073")
	}
	_fgge, _cdc := _ggca.InputStream.ReadBit()
	if _cdc != nil {
		return _fbc.Wrap(_cdc, _fab, "\u0065x\u0074e\u006e\u0064\u0065\u0064\u0020t\u0065\u006dp\u006c\u0061\u0074\u0065\u0073")
	}
	if _fgge == 1 {
		_ggca.GBUseExtTemplate = true
	}
	_fgge, _cdc = _ggca.InputStream.ReadBit()
	if _cdc != nil {
		return _fbc.Wrap(_cdc, _fab, "\u0075\u006e\u006b\u006eow\u006e\u0020\u0070\u0061\u0067\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072")
	}
	if _fgge != 1 {
		_ggca.NumberOfPagesUnknown = false
	}
	_fgge, _cdc = _ggca.InputStream.ReadBit()
	if _cdc != nil {
		return _fbc.Wrap(_cdc, _fab, "\u006f\u0072\u0067\u0061\u006e\u0069\u007a\u0061\u0074\u0069\u006f\u006e \u0074\u0079\u0070\u0065")
	}
	_ggca.OrganizationType = _af.OrganizationType(_fgge)
	if !_ggca.NumberOfPagesUnknown {
		_ggca.NumberOfPages, _cdc = _ggca.InputStream.ReadUint32()
		if _cdc != nil {
			return _fbc.Wrap(_cdc, _fab, "\u006eu\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0067\u0065\u0073")
		}
		_ggca._d = 13
	}
	return nil
}

func (_ecca *Page) composePageBitmap() error {
	const _fdb = "\u0063\u006f\u006d\u0070\u006f\u0073\u0065\u0050\u0061\u0067\u0065\u0042i\u0074\u006d\u0061\u0070"
	if _ecca.PageNumber == 0 {
		return nil
	}
	_gaa := _ecca.getPageInformationSegment()
	if _gaa == nil {
		return _fbc.Error(_fdb, "\u0070\u0061\u0067e \u0069\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069o\u006e \u0073e\u0067m\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064")
	}
	_bef, _bgc := _gaa.GetSegmentData()
	if _bgc != nil {
		return _bgc
	}
	_dcc, _effc := _bef.(*_af.PageInformationSegment)
	if !_effc {
		return _fbc.Error(_fdb, "\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006da\u0074\u0069\u006f\u006e \u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0069\u0073\u0020\u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0079\u0070\u0065")
	}
	if _bgc = _ecca.createPage(_dcc); _bgc != nil {
		return _fbc.Wrap(_bgc, _fdb, "")
	}
	_ecca.clearSegmentData()
	return nil
}

func (_bbaa *Document) reachedEOF(_cggb int64) (bool, error) {
	const _fda = "\u0072\u0065\u0061\u0063\u0068\u0065\u0064\u0045\u004f\u0046"
	_, _bdg := _bbaa.InputStream.Seek(_cggb, _g.SeekStart)
	if _bdg != nil {
		_ee.Log.Debug("\u0072\u0065\u0061c\u0068\u0065\u0064\u0045\u004f\u0046\u0020\u002d\u0020\u0064\u002e\u0049\u006e\u0070\u0075\u0074\u0053\u0074\u0072\u0065\u0061\u006d\u002e\u0053\u0065\u0065\u006b\u0020\u0066a\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076", _bdg)
		return false, _fbc.Wrap(_bdg, _fda, "\u0069n\u0070\u0075\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020s\u0065\u0065\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064")
	}
	_, _bdg = _bbaa.InputStream.ReadBits(32)
	if _bdg == _g.EOF {
		return true, nil
	} else if _bdg != nil {
		return false, _fbc.Wrap(_bdg, _fda, "")
	}
	return false, nil
}

func (_bba *Document) nextSegmentNumber() uint32 {
	_dbd := _bba.CurrentSegmentNumber
	_bba.CurrentSegmentNumber++
	return _dbd
}

func (_fddg *Page) getResolutionX() (int, error) {
	const _dgf = "\u0067\u0065\u0074\u0052\u0065\u0073\u006f\u006c\u0075t\u0069\u006f\u006e\u0058"
	if _fddg.ResolutionX != 0 {
		return _fddg.ResolutionX, nil
	}
	_ada := _fddg.getPageInformationSegment()
	if _ada == nil {
		return 0, _fbc.Error(_dgf, "n\u0069l\u0020\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006d\u0061ti\u006f\u006e")
	}
	_aeb, _bgfd := _ada.GetSegmentData()
	if _bgfd != nil {
		return 0, _fbc.Wrap(_bgfd, _dgf, "")
	}
	_badd, _eef := _aeb.(*_af.PageInformationSegment)
	if !_eef {
		return 0, _fbc.Errorf(_dgf, "\u0070\u0061\u0067\u0065\u0020\u0069n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0069\u0073 \u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0079\u0070e\u003a \u0027\u0025\u0054\u0027", _aeb)
	}
	_fddg.ResolutionX = _badd.ResolutionX
	return _fddg.ResolutionX, nil
}

func (_gaf *Document) GetPage(pageNumber int) (_af.Pager, error) {
	const _badg = "\u0044\u006fc\u0075\u006d\u0065n\u0074\u002e\u0047\u0065\u0074\u0050\u0061\u0067\u0065"
	if pageNumber < 0 {
		_ee.Log.Debug("\u004a\u0042\u0049\u00472\u0020\u0050\u0061\u0067\u0065\u0020\u002d\u0020\u0047e\u0074\u0050\u0061\u0067\u0065\u003a\u0020\u0025\u0064\u002e\u0020\u0050\u0061\u0067\u0065\u0020\u0063\u0061n\u006e\u006f\u0074\u0020\u0062e\u0020\u006c\u006f\u0077\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0020\u0025\u0073", pageNumber, _a.Stack())
		return nil, _fbc.Errorf(_badg, "\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006a\u0062\u0069\u0067\u0032\u0020d\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u0020\u002d\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064 \u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064", pageNumber)
	}
	if pageNumber > len(_gaf.Pages) {
		_ee.Log.Debug("\u0050\u0061\u0067\u0065 n\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u003a\u0020\u0025\u0064\u002e\u0020%\u0073", pageNumber, _a.Stack())
		return nil, _fbc.Error(_badg, "\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006a\u0062\u0069\u0067\u0032 \u0064\u006f\u0063\u0075\u006d\u0065n\u0074\u0020\u002d\u0020\u0070\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064")
	}
	_cba, _ddc := _gaf.Pages[pageNumber]
	if !_ddc {
		_ee.Log.Debug("\u0050\u0061\u0067\u0065 n\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u003a\u0020\u0025\u0064\u002e\u0020%\u0073", pageNumber, _a.Stack())
		return nil, _fbc.Errorf(_badg, "\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006a\u0062\u0069\u0067\u0032 \u0064\u006f\u0063\u0075\u006d\u0065n\u0074\u0020\u002d\u0020\u0070\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064")
	}
	return _cba, nil
}

func (_gega *Page) fitsPage(_befg *_af.PageInformationSegment, _acc *_fb.Bitmap) bool {
	return _gega.countRegions() == 1 && _befg.DefaultPixelValue == 0 && _befg.PageBMWidth == _acc.Width && _befg.PageBMHeight == _acc.Height
}

func (_gca *Page) getWidth() (int, error) {
	const _eae = "\u0067\u0065\u0074\u0057\u0069\u0064\u0074\u0068"
	if _gca.FinalWidth != 0 {
		return _gca.FinalWidth, nil
	}
	_cced := _gca.getPageInformationSegment()
	if _cced == nil {
		return 0, _fbc.Error(_eae, "n\u0069l\u0020\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006d\u0061ti\u006f\u006e")
	}
	_cfdd, _ad := _cced.GetSegmentData()
	if _ad != nil {
		return 0, _fbc.Wrap(_ad, _eae, "")
	}
	_gba, _ded := _cfdd.(*_af.PageInformationSegment)
	if !_ded {
		return 0, _fbc.Errorf(_eae, "\u0070\u0061\u0067\u0065\u0020\u0069n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0069\u0073 \u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0079\u0070e\u003a \u0027\u0025\u0054\u0027", _cfdd)
	}
	_gca.FinalWidth = _gba.PageBMWidth
	return _gca.FinalWidth, nil
}

func (_cecb *Page) collectPageStripes() (_eccf []_af.Segmenter, _edd error) {
	const _fggb = "\u0063o\u006cl\u0065\u0063\u0074\u0050\u0061g\u0065\u0053t\u0072\u0069\u0070\u0065\u0073"
	var _aca _af.Segmenter
	for _, _dgg := range _cecb.Segments {
		switch _dgg.Type {
		case 6, 7, 22, 23, 38, 39, 42, 43:
			_aca, _edd = _dgg.GetSegmentData()
			if _edd != nil {
				return nil, _fbc.Wrap(_edd, _fggb, "")
			}
			_eccf = append(_eccf, _aca)
		case 50:
			_aca, _edd = _dgg.GetSegmentData()
			if _edd != nil {
				return nil, _edd
			}
			_ccee, _bgf := _aca.(*_af.EndOfStripe)
			if !_bgf {
				return nil, _fbc.Errorf(_fggb, "\u0045\u006e\u0064\u004f\u0066\u0053\u0074\u0072\u0069\u0070\u0065\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u006f\u0066\u0020\u0076\u0061l\u0069\u0064\u0020\u0074\u0079p\u0065\u003a \u0027\u0025\u0054\u0027", _aca)
			}
			_eccf = append(_eccf, _ccee)
			_cecb.FinalHeight = _ccee.LineNumber()
		}
	}
	return _eccf, nil
}

func (_cadb *Page) String() string {
	return _b.Sprintf("\u0050\u0061\u0067\u0065\u0020\u0023\u0025\u0064", _cadb.PageNumber)
}

func (_edad *Page) nextSegmentNumber() uint32 { return _edad.Document.nextSegmentNumber() }

func (_fd *Document) AddGenericPage(bm *_fb.Bitmap, duplicateLineRemoval bool) (_gcd error) {
	const _ga = "\u0044\u006f\u0063um\u0065\u006e\u0074\u002e\u0041\u0064\u0064\u0047\u0065\u006e\u0065\u0072\u0069\u0063\u0050\u0061\u0067\u0065"
	if !_fd.FullHeaders && _fd.NumberOfPages != 0 {
		return _fbc.Error(_ga, "\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u0020\u0061\u006c\u0072\u0065a\u0064\u0079\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0073\u0020\u0070\u0061\u0067\u0065\u002e\u0020\u0046\u0069\u006c\u0065\u004d\u006f\u0064\u0065\u0020\u0064\u0069\u0073\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0064\u0064i\u006e\u0067\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u006f\u006e\u0065\u0020\u0070\u0061g\u0065")
	}
	_ge := &Page{Segments: []*_af.Header{}, Bitmap: bm, Document: _fd, FinalHeight: bm.Height, FinalWidth: bm.Width, IsLossless: true, BlackIsOne: bm.Color == _fb.Chocolate}
	_ge.PageNumber = int(_fd.nextPageNumber())
	_fd.Pages[_ge.PageNumber] = _ge
	bm.InverseData()
	_ge.AddPageInformationSegment()
	if _gcd = _ge.AddGenericRegion(bm, 0, 0, 0, _af.TImmediateGenericRegion, duplicateLineRemoval); _gcd != nil {
		return _fbc.Wrap(_gcd, _ga, "")
	}
	if _fd.FullHeaders {
		_ge.AddEndOfPageSegment()
	}
	return nil
}

const (
	GenericEM EncodingMethod = iota
	CorrelationEM
	RankHausEM
)

func (_gfac *Page) getCombinationOperator(_ede *_af.PageInformationSegment, _bbb _fb.CombinationOperator) _fb.CombinationOperator {
	if _ede.CombinationOperatorOverrideAllowed() {
		return _bbb
	}
	return _ede.CombinationOperator()
}

func (_feeb *Page) lastSegmentNumber() (_facf uint32, _gdec error) {
	const _eabg = "\u006c\u0061\u0073\u0074\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u004eu\u006d\u0062\u0065\u0072"
	if len(_feeb.Segments) == 0 {
		return _facf, _fbc.Errorf(_eabg, "\u006e\u006f\u0020se\u0067\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006fu\u006ed\u0020i\u006e \u0074\u0068\u0065\u0020\u0070\u0061\u0067\u0065\u0020\u0027\u0025\u0064\u0027", _feeb.PageNumber)
	}
	return _feeb.Segments[len(_feeb.Segments)-1].SegmentNumber, nil
}

func (_afa *Page) getHeight() (int, error) {
	const _bccc = "\u0067e\u0074\u0048\u0065\u0069\u0067\u0068t"
	if _afa.FinalHeight != 0 {
		return _afa.FinalHeight, nil
	}
	_aee := _afa.getPageInformationSegment()
	if _aee == nil {
		return 0, _fbc.Error(_bccc, "n\u0069l\u0020\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006d\u0061ti\u006f\u006e")
	}
	_gfg, _aff := _aee.GetSegmentData()
	if _aff != nil {
		return 0, _fbc.Wrap(_aff, _bccc, "")
	}
	_ecd, _caf := _gfg.(*_af.PageInformationSegment)
	if !_caf {
		return 0, _fbc.Errorf(_bccc, "\u0070\u0061\u0067\u0065\u0020\u0069n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0069\u0073 \u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0079\u0070e\u003a \u0027\u0025\u0054\u0027", _gfg)
	}
	if _ecd.PageBMHeight == _c.MaxInt32 {
		_, _aff = _afa.GetBitmap()
		if _aff != nil {
			return 0, _fbc.Wrap(_aff, _bccc, "")
		}
	} else {
		_afa.FinalHeight = _ecd.PageBMHeight
	}
	return _afa.FinalHeight, nil
}

func (_ddef *Page) GetSegment(number int) (*_af.Header, error) {
	const _ecga = "\u0050a\u0067e\u002e\u0047\u0065\u0074\u0053\u0065\u0067\u006d\u0065\u006e\u0074"
	for _, _ddf := range _ddef.Segments {
		if _ddf.SegmentNumber == uint32(number) {
			return _ddf, nil
		}
	}
	_bgg := make([]uint32, len(_ddef.Segments))
	for _afdf, _beb := range _ddef.Segments {
		_bgg[_afdf] = _beb.SegmentNumber
	}
	return nil, _fbc.Errorf(_ecga, "\u0073e\u0067\u006d\u0065n\u0074\u0020\u0077i\u0074h \u006e\u0075\u006d\u0062\u0065\u0072\u003a \u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0070\u0061\u0067\u0065\u003a\u0020'%\u0064'\u002e\u0020\u004b\u006e\u006f\u0077n\u0020\u0073\u0065\u0067\u006de\u006e\u0074\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0073\u003a \u0025\u0076", number, _ddef.PageNumber, _bgg)
}

func (_ddd *Document) produceClassifiedPage(_fcf *Page, _cfd *_af.Header) (_dddb error) {
	const _bfb = "p\u0072\u006f\u0064\u0075ce\u0043l\u0061\u0073\u0073\u0069\u0066i\u0065\u0064\u0050\u0061\u0067\u0065"
	var _cce map[int]int
	_bg := _ddd._cf
	_ea := []*_af.Header{_cfd}
	if len(_ddd._be[_fcf.PageNumber]) > 0 {
		_cce = map[int]int{}
		_ef, _fbceg := _ddd.addSymbolDictionary(_fcf.PageNumber, _ddd.Classer.UndilatedTemplates, _ddd._be[_fcf.PageNumber], _cce, false)
		if _fbceg != nil {
			return _fbc.Wrap(_fbceg, _bfb, "")
		}
		_ea = append(_ea, _ef)
		_bg += len(_ddd._be[_fcf.PageNumber])
	}
	_cdf := _ddd._gc[_fcf.PageNumber]
	_ee.Log.Debug("P\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020c\u006f\u006d\u0070\u0073: \u0025\u0076", _fcf.PageNumber, _cdf)
	_fcf.addTextRegionSegment(_ea, _ddd._cc, _cce, _ddd._gc[_fcf.PageNumber], _ddd.Classer.PtaLL, _ddd.Classer.UndilatedTemplates, _ddd.Classer.ClassIDs, nil, _ggb(_bg), len(_ddd._gc[_fcf.PageNumber]))
	return nil
}

func (_dgge *Page) getResolutionY() (int, error) {
	const _deb = "\u0067\u0065\u0074\u0052\u0065\u0073\u006f\u006c\u0075t\u0069\u006f\u006e\u0059"
	if _dgge.ResolutionY != 0 {
		return _dgge.ResolutionY, nil
	}
	_gdg := _dgge.getPageInformationSegment()
	if _gdg == nil {
		return 0, _fbc.Error(_deb, "n\u0069l\u0020\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006d\u0061ti\u006f\u006e")
	}
	_fga, _age := _gdg.GetSegmentData()
	if _age != nil {
		return 0, _fbc.Wrap(_age, _deb, "")
	}
	_ebg, _efae := _fga.(*_af.PageInformationSegment)
	if !_efae {
		return 0, _fbc.Errorf(_deb, "\u0070\u0061\u0067\u0065\u0020\u0069\u006e\u0066o\u0072\u006d\u0061ti\u006f\u006e\u0020\u0073\u0065\u0067m\u0065\u006e\u0074\u0020\u0069\u0073\u0020\u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0074\u0079\u0070\u0065\u003a\u0027%\u0054\u0027", _fga)
	}
	_dgge.ResolutionY = _ebg.ResolutionY
	return _dgge.ResolutionY, nil
}

func DecodeDocument(input *_gg.Reader, globals *Globals) (*Document, error) {
	return _gfa(input, globals)
}

func (_dbb *Page) createNormalPage(_egb *_af.PageInformationSegment) error {
	const _cddb = "\u0063\u0072e\u0061\u0074\u0065N\u006f\u0072\u006d\u0061\u006c\u0050\u0061\u0067\u0065"
	_dbb.Bitmap = _fb.New(_egb.PageBMWidth, _egb.PageBMHeight)
	if _egb.DefaultPixelValue != 0 {
		_dbb.Bitmap.SetDefaultPixel()
	}
	for _, _dafa := range _dbb.Segments {
		switch _dafa.Type {
		case 6, 7, 22, 23, 38, 39, 42, 43:
			_ee.Log.Trace("\u0047\u0065\u0074\u0074in\u0067\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0064", _dafa.SegmentNumber)
			_gef, _aaf := _dafa.GetSegmentData()
			if _aaf != nil {
				return _aaf
			}
			_aea, _aad := _gef.(_af.Regioner)
			if !_aad {
				_ee.Log.Debug("\u0053\u0065g\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0054\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0052\u0065\u0067\u0069on\u0065\u0072", _gef)
				return _fbc.Errorf(_cddb, "i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006a\u0062i\u0067\u0032\u0020\u0073\u0065\u0067\u006den\u0074\u0020\u0074\u0079p\u0065\u0020\u002d\u0020\u006e\u006f\u0074\u0020\u0061 R\u0065\u0067i\u006f\u006e\u0065\u0072\u003a\u0020\u0025\u0054", _gef)
			}
			_gga, _aaf := _aea.GetRegionBitmap()
			if _aaf != nil {
				return _fbc.Wrap(_aaf, _cddb, "")
			}
			if _dbb.fitsPage(_egb, _gga) {
				_dbb.Bitmap = _gga
			} else {
				_fgdd := _aea.GetRegionInfo()
				_gbfb := _dbb.getCombinationOperator(_egb, _fgdd.CombinaionOperator)
				_aaf = _fb.Blit(_gga, _dbb.Bitmap, int(_fgdd.XLocation), int(_fgdd.YLocation), _gbfb)
				if _aaf != nil {
					return _fbc.Wrap(_aaf, _cddb, "")
				}
			}
		}
	}
	return nil
}

func (_deeb *Page) AddEndOfPageSegment() {
	_ebff := &_af.Header{Type: _af.TEndOfPage, PageAssociation: _deeb.PageNumber}
	_deeb.Segments = append(_deeb.Segments, _ebff)
}

func (_df *Document) completeClassifiedPages() (_gd error) {
	const _ba = "\u0063\u006f\u006dpl\u0065\u0074\u0065\u0043\u006c\u0061\u0073\u0073\u0069\u0066\u0069\u0065\u0064\u0050\u0061\u0067\u0065\u0073"
	if _df.Classer == nil {
		return nil
	}
	_df._eb = make([]int, _df.Classer.UndilatedTemplates.Size())
	for _gf := 0; _gf < _df.Classer.ClassIDs.Size(); _gf++ {
		_fc, _fbce := _df.Classer.ClassIDs.Get(_gf)
		if _fbce != nil {
			return _fbc.Wrapf(_fbce, _ba, "\u0063\u006c\u0061\u0073s \u0077\u0069\u0074\u0068\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027", _gf)
		}
		_df._eb[_fc]++
	}
	var _ggc []int
	for _aag := 0; _aag < _df.Classer.UndilatedTemplates.Size(); _aag++ {
		if _df.NumberOfPages == 1 || _df._eb[_aag] > 1 {
			_ggc = append(_ggc, _aag)
		}
	}
	var (
		_abc *Page
		_da  bool
	)
	for _bf, _fbf := range *_df.Classer.ComponentPageNumbers {
		if _abc, _da = _df.Pages[_fbf]; !_da {
			return _fbc.Errorf(_ba, "p\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020n\u006f\u0074\u0020\u0066ou\u006e\u0064", _bf)
		}
		if _abc.EncodingMethod == GenericEM {
			_ee.Log.Error("\u0047\u0065\u006e\u0065\u0072\u0069c\u0020\u0070\u0061g\u0065\u0020\u0077i\u0074\u0068\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u003a \u0027\u0025\u0064\u0027\u0020ma\u0070\u0070\u0065\u0064\u0020\u0061\u0073\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0069\u0065\u0064\u0020\u0070\u0061\u0067\u0065", _bf)
			continue
		}
		_df._gc[_fbf] = append(_df._gc[_fbf], _bf)
		_gcda, _fa := _df.Classer.ClassIDs.Get(_bf)
		if _fa != nil {
			return _fbc.Wrapf(_fa, _ba, "\u006e\u006f\u0020\u0073uc\u0068\u0020\u0063\u006c\u0061\u0073\u0073\u0049\u0044\u003a\u0020\u0025\u0064", _bf)
		}
		if _df._eb[_gcda] == 1 && _df.NumberOfPages != 1 {
			_cb := append(_df._be[_fbf], _gcda)
			_df._be[_fbf] = _cb
		}
	}
	if _gd = _df.Classer.ComputeLLCorners(); _gd != nil {
		return _fbc.Wrap(_gd, _ba, "")
	}
	if _, _gd = _df.addSymbolDictionary(0, _df.Classer.UndilatedTemplates, _ggc, _df._cc, false); _gd != nil {
		return _fbc.Wrap(_gd, _ba, "")
	}
	return nil
}

func (_ecc *Document) determineRandomDataOffsets(_ffd []*_af.Header, _ece uint64) {
	if _ecc.OrganizationType != _af.ORandom {
		return
	}
	for _, _badgf := range _ffd {
		_badgf.SegmentDataStartOffset = _ece
		_ece += _badgf.SegmentDataLength
	}
}

func (_daab *Page) GetHeight() (int, error) { return _daab.getHeight() }

func (_de *Document) Encode() (_daac []byte, _eeb error) {
	const _gfc = "\u0044o\u0063u\u006d\u0065\u006e\u0074\u002e\u0045\u006e\u0063\u006f\u0064\u0065"
	var _feg, _gae int
	if _de.FullHeaders {
		if _feg, _eeb = _de.encodeFileHeader(_de._ed); _eeb != nil {
			return nil, _fbc.Wrap(_eeb, _gfc, "")
		}
	}
	var (
		_fggd bool
		_edg  *_af.Header
		_eg   *Page
	)
	if _eeb = _de.completeClassifiedPages(); _eeb != nil {
		return nil, _fbc.Wrap(_eeb, _gfc, "")
	}
	if _eeb = _de.produceClassifiedPages(); _eeb != nil {
		return nil, _fbc.Wrap(_eeb, _gfc, "")
	}
	if _de.GlobalSegments != nil {
		for _, _edg = range _de.GlobalSegments.Segments {
			if _eeb = _de.encodeSegment(_edg, &_feg); _eeb != nil {
				return nil, _fbc.Wrap(_eeb, _gfc, "")
			}
		}
	}
	for _bce := 1; _bce <= int(_de.NumberOfPages); _bce++ {
		if _eg, _fggd = _de.Pages[_bce]; !_fggd {
			return nil, _fbc.Errorf(_gfc, "p\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020n\u006f\u0074\u0020\u0066ou\u006e\u0064", _bce)
		}
		for _, _edg = range _eg.Segments {
			if _eeb = _de.encodeSegment(_edg, &_feg); _eeb != nil {
				return nil, _fbc.Wrap(_eeb, _gfc, "")
			}
		}
	}
	if _de.FullHeaders {
		if _gae, _eeb = _de.encodeEOFHeader(_de._ed); _eeb != nil {
			return nil, _fbc.Wrap(_eeb, _gfc, "")
		}
		_feg += _gae
	}
	_daac = _de._ed.Data()
	if len(_daac) != _feg {
		_ee.Log.Debug("\u0042\u0079\u0074\u0065\u0073 \u0077\u0072\u0069\u0074\u0074\u0065\u006e \u0028\u006e\u0029\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006f\u0066\u0020t\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0065\u006e\u0063\u006fd\u0065\u0064\u003a\u0020\u0027\u0025d\u0027", _feg, len(_daac))
	}
	return _daac, nil
}

func (_cad *Page) Encode(w _gg.BinaryWriter) (_faf int, _gde error) {
	const _gdf = "P\u0061\u0067\u0065\u002e\u0045\u006e\u0063\u006f\u0064\u0065"
	var _fdaf int
	for _, _dfbc := range _cad.Segments {
		if _fdaf, _gde = _dfbc.Encode(w); _gde != nil {
			return _faf, _fbc.Wrap(_gde, _gdf, "")
		}
		_faf += _fdaf
	}
	return _faf, nil
}

func (_cec *Globals) AddSegment(segment *_af.Header) {
	_cec.Segments = append(_cec.Segments, segment)
}
