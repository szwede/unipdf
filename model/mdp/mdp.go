//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mdp

import (
	_g "errors"
	_eg "fmt"
	_ed "github.com/szwede/unipdf/v4/core"
)

func (_aeg *defaultDiffPolicy) compareFields(_dg int, _fb, _ea []_ed.PdfObject) error {
	_df := make(map[int64]*_ed.PdfObjectDictionary)
	for _, _c := range _fb {
		_fdc, _bfa := _ed.GetIndirect(_c)
		if !_bfa {
			return _g.New("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065")
		}
		_cd, _bfa := _ed.GetDict(_fdc.PdfObject)
		if !_bfa {
			return _g.New("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065")
		}
		_df[_fdc.ObjectNumber] = _cd
	}
	for _, _gc := range _ea {
		_cdd, _eag := _ed.GetIndirect(_gc)
		if !_eag {
			return _g.New("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065")
		}
		_gda, _eag := _ed.GetDict(_cdd.PdfObject)
		if !_eag {
			return _g.New("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065")
		}
		T := _gda.Get("\u0054")
		if _, _egf := _aeg._b[_cdd.ObjectNumber]; _egf {
			switch _aeg._ec {
			case NoRestrictions, FillForms, FillFormsAndAnnots:
				_aeg._gg.addWarningWithDescription(_dg, _eg.Sprintf("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064", T))
			default:
				_aeg._gg.addErrorWithDescription(_dg, _eg.Sprintf("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064", T))
			}
		}
		if _, _dgg := _df[_cdd.ObjectNumber]; !_dgg {
			switch _aeg._ec {
			case NoRestrictions, FillForms, FillFormsAndAnnots:
				_aeg._gg.addWarningWithDescription(_dg, _eg.Sprintf("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064", _gda.Get("\u0054")))
			default:
				_aeg._gg.addErrorWithDescription(_dg, _eg.Sprintf("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064", _gda.Get("\u0054")))
			}
		} else {
			delete(_df, _cdd.ObjectNumber)
			if _, _aef := _aeg._b[_cdd.ObjectNumber]; _aef {
				switch _aeg._ec {
				case NoRestrictions, FillForms, FillFormsAndAnnots:
					_aeg._gg.addWarningWithDescription(_dg, _eg.Sprintf("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064", _gda.Get("\u0054")))
				default:
					_aeg._gg.addErrorWithDescription(_dg, _eg.Sprintf("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064", _gda.Get("\u0054")))
				}
			}
		}
		if FT, _ece := _ed.GetNameVal(_gda.Get("\u0046\u0054")); _ece {
			if FT == "\u0053\u0069\u0067" {
				if _ca, _fba := _ed.GetIndirect(_gda.Get("\u0056")); _fba {
					if _, _gbf := _aeg._b[_ca.ObjectNumber]; _gbf {
						switch _aeg._ec {
						case NoRestrictions, FillForms, FillFormsAndAnnots:
							_aeg._gg.addWarningWithDescription(_dg, _eg.Sprintf("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064", T))
						default:
							_aeg._gg.addErrorWithDescription(_dg, _eg.Sprintf("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064", T))
						}
					}
				}
			}
		}
	}
	for _, _db := range _df {
		switch _aeg._ec {
		case NoRestrictions:
			_aeg._gg.addWarningWithDescription(_dg, _eg.Sprintf("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064", _db.Get("\u0054")))
		default:
			_aeg._gg.addErrorWithDescription(_dg, _eg.Sprintf("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064", _db.Get("\u0054")))
		}
	}
	return nil
}

// MDPParameters describes parameters for the MDP checks (now only DocMDP).
type MDPParameters struct{ DocMDPLevel DocMDPPermission }

// DiffPolicy interface for comparing two revisions of the Pdf document.
type DiffPolicy interface {

	// ReviewFile should check the revisions of the old and new parsers
	// and evaluate the differences between the revisions.
	// Each implementation of this interface must decide
	// how to handle cases where there are multiple revisions between the old and new revisions.
	ReviewFile(_dfbd *_ed.PdfParser, _edcc *_ed.PdfParser, _egeg *MDPParameters) (*DiffResults, error)
}

// DocMDPPermission is values for set up access permissions for DocMDP.
// (Section 12.8.2.2, Table 254 - Entries in a signature dictionary p. 471 in PDF32000_2008).
type DocMDPPermission int64

const (
	NoRestrictions     DocMDPPermission = 0
	NoChanges          DocMDPPermission = 1
	FillForms          DocMDPPermission = 2
	FillFormsAndAnnots DocMDPPermission = 3
)

func (_fbe *defaultDiffPolicy) comparePages(_dc int, _dbd, _gfb *_ed.PdfIndirectObject) error {
	if _, _ac := _fbe._b[_gfb.ObjectNumber]; _ac {
		_fbe._gg.addErrorWithDescription(_dc, "\u0050a\u0067e\u0073\u0020\u0077\u0065\u0072e\u0020\u0063h\u0061\u006e\u0067\u0065\u0064")
	}
	_ge, _dgb := _ed.GetDict(_gfb.PdfObject)
	_bd, _dba := _ed.GetDict(_dbd.PdfObject)
	if !_dgb || !_dba {
		return _g.New("\u0075n\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061g\u0065\u0073\u0027\u0020\u006f\u0062\u006a\u0065\u0063\u0074")
	}
	_bcg, _dgb := _ed.GetArray(_ge.Get("\u004b\u0069\u0064\u0073"))
	_abf, _dba := _ed.GetArray(_bd.Get("\u004b\u0069\u0064\u0073"))
	if !_dgb || !_dba {
		return _g.New("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061\u0067\u0065s\u0027 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079")
	}
	_gdc := _bcg.Len()
	if _gdc > _abf.Len() {
		_gdc = _abf.Len()
	}
	for _eeb := 0; _eeb < _gdc; _eeb++ {
		_ebe, _cec := _ed.GetIndirect(_ed.ResolveReference(_abf.Get(_eeb)))
		_gfbd, _ebc := _ed.GetIndirect(_ed.ResolveReference(_bcg.Get(_eeb)))
		if !_cec || !_ebc {
			return _g.New("\u0075\u006e\u0065\u0078pe\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065c\u0074")
		}
		if _ebe.ObjectNumber != _gfbd.ObjectNumber {
			_fbe._gg.addErrorWithDescription(_dc, _eg.Sprintf("p\u0061\u0067\u0065\u0020#%\u0064 \u0077\u0061\u0073\u0020\u0072e\u0070\u006c\u0061\u0063\u0065\u0064", _eeb))
		}
		_fbd, _cec := _ed.GetDict(_gfbd)
		_bfc, _ebc := _ed.GetDict(_ebe)
		if !_cec || !_ebc {
			return _g.New("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065'\u0073 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079")
		}
		_gce, _egdc := _egce(_fbd.Get("\u0041\u006e\u006e\u006f\u0074\u0073"))
		if _egdc != nil {
			return _egdc
		}
		_feb, _egdc := _egce(_bfc.Get("\u0041\u006e\u006e\u006f\u0074\u0073"))
		if _egdc != nil {
			return _egdc
		}
		if _bb := _fbe.compareAnnots(_dc, _feb, _gce); _bb != nil {
			return _bb
		}
	}
	for _egb := _gdc + 1; _egb <= _bcg.Len(); _egb++ {
		_fbe._gg.addErrorWithDescription(_dc, _eg.Sprintf("\u0070a\u0067e\u0020\u0023\u0025\u0064\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064", _egb))
	}
	for _aa := _gdc + 1; _aa <= _abf.Len(); _aa++ {
		_fbe._gg.addErrorWithDescription(_dc, _eg.Sprintf("p\u0061g\u0065\u0020\u0023\u0025\u0064\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064", _aa))
	}
	return nil
}

func (_ecd *defaultDiffPolicy) compareAnnots(_ecg int, _bbf, _fc []_ed.PdfObject) error {
	_faf := make(map[int64]*_ed.PdfObjectDictionary)
	for _, _bdd := range _bbf {
		_fddf, _ff := _ed.GetIndirect(_bdd)
		if !_ff {
			return _g.New("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065")
		}
		_ggg, _ff := _ed.GetDict(_fddf.PdfObject)
		if !_ff {
			return _g.New("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065")
		}
		_faf[_fddf.ObjectNumber] = _ggg
	}
	for _, _deg := range _fc {
		_dggd, _fga := _ed.GetIndirect(_deg)
		if !_fga {
			return _g.New("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065")
		}
		_ggd, _fga := _ed.GetDict(_dggd.PdfObject)
		if !_fga {
			return _g.New("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065")
		}
		_eac, _ := _ed.GetStringVal(_ggd.Get("\u0054"))
		_cc, _ := _ed.GetNameVal(_ggd.Get("\u0053u\u0062\u0074\u0079\u0070\u0065"))
		if _, _fdg := _faf[_dggd.ObjectNumber]; !_fdg {
			switch _ecd._ec {
			case NoRestrictions, FillFormsAndAnnots:
				_ecd._gg.addWarningWithDescription(_ecg, _eg.Sprintf("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064", _cc, _eac))
			default:
				_cdc, _eae := _ed.GetDict(_dggd.PdfObject)
				if !_eae {
					return _g.New("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e")
				}
				_edg, _eae := _ed.GetNameVal(_cdc.Get("\u0053u\u0062\u0074\u0079\u0070\u0065"))
				if !_eae {
					return _g.New("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065")
				}
				if _edg == "\u0057\u0069\u0064\u0067\u0065\u0074" {
					switch _ecd._ec {
					case NoRestrictions, FillFormsAndAnnots, FillForms:
						_ecd._gg.addWarningWithDescription(_ecg, _eg.Sprintf("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064", _cc, _eac))
					default:
						_ecd._gg.addErrorWithDescription(_ecg, _eg.Sprintf("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064", _cc, _eac))
					}
				} else {
					_ecd._gg.addErrorWithDescription(_ecg, _eg.Sprintf("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064", _cc, _eac))
				}
			}
		} else {
			delete(_faf, _dggd.ObjectNumber)
			if _ecc, _cf := _ecd._b[_dggd.ObjectNumber]; _cf {
				switch _ecd._ec {
				case NoRestrictions, FillFormsAndAnnots:
					_ecd._gg.addWarningWithDescription(_ecg, _eg.Sprintf("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064", _cc, _eac))
				default:
					_ecdb, _agg := _ed.GetIndirect(_ecc)
					if !_agg {
						return _g.New("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e")
					}
					_eaed, _agg := _ed.GetDict(_ecdb.PdfObject)
					if !_agg {
						return _g.New("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e")
					}
					_caa, _agg := _ed.GetNameVal(_eaed.Get("\u0053u\u0062\u0074\u0079\u0070\u0065"))
					if !_agg {
						return _g.New("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065")
					}
					if _caa == "\u0057\u0069\u0064\u0067\u0065\u0074" {
						switch _ecd._ec {
						case NoRestrictions, FillFormsAndAnnots, FillForms:
							_ecd._gg.addWarningWithDescription(_ecg, _eg.Sprintf("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064", _cc, _eac))
						default:
							_ecd._gg.addErrorWithDescription(_ecg, _eg.Sprintf("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064", _cc, _eac))
						}
					} else {
						_ecd._gg.addErrorWithDescription(_ecg, _eg.Sprintf("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064", _cc, _eac))
					}
				}
			}
		}
	}
	for _, _daa := range _faf {
		_dee, _ := _ed.GetStringVal(_daa.Get("\u0054"))
		_gdae, _ := _ed.GetNameVal(_daa.Get("\u0053u\u0062\u0074\u0079\u0070\u0065"))
		switch _ecd._ec {
		case NoRestrictions, FillFormsAndAnnots:
			_ecd._gg.addWarningWithDescription(_ecg, _eg.Sprintf("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064", _gdae, _dee))
		default:
			_ecd._gg.addErrorWithDescription(_ecg, _eg.Sprintf("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064", _gdae, _dee))
		}
	}
	return nil
}

// String returns the state of the warning.
func (_adc *DiffResult) String() string {
	return _eg.Sprintf("\u0025\u0073\u0020\u0069n \u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0073\u0020\u0023\u0025\u0064", _adc.Description, _adc.Revision)
}

// ReviewFile implementation of DiffPolicy interface
// The default policy only checks the next types of objects:
// Page, Pages (container for page objects), Annot, Annots (container for annotation objects), Field.
// It checks adding, removing and modifying objects of these types.
func (_egc *defaultDiffPolicy) ReviewFile(oldParser *_ed.PdfParser, newParser *_ed.PdfParser, params *MDPParameters) (*DiffResults, error) {
	if oldParser.GetRevisionNumber() > newParser.GetRevisionNumber() {
		return nil, _g.New("\u006f\u006c\u0064\u0020\u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u006e\u0065\u0077\u0020r\u0065\u0076i\u0073\u0069\u006f\u006e")
	}
	if oldParser.GetRevisionNumber() == newParser.GetRevisionNumber() {
		if oldParser != newParser {
			return nil, _g.New("\u0073\u0061m\u0065\u0020\u0072\u0065v\u0069\u0073i\u006f\u006e\u0073\u002c\u0020\u0062\u0075\u0074 \u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020\u0070\u0061r\u0073\u0065\u0072\u0073")
		}
		return &DiffResults{}, nil
	}
	if params == nil {
		_egc._ec = NoRestrictions
	} else {
		_egc._ec = params.DocMDPLevel
	}
	_ege := &DiffResults{}
	for _gb := oldParser.GetRevisionNumber() + 1; _gb <= newParser.GetRevisionNumber(); _gb++ {
		_bg, _a := newParser.GetRevision(_gb - 1)
		if _a != nil {
			return nil, _a
		}
		_eb, _a := newParser.GetRevision(_gb)
		if _a != nil {
			return nil, _a
		}
		_d, _a := _egc.compareRevisions(_bg, _eb)
		if _a != nil {
			return nil, _a
		}
		_ege.Warnings = append(_ege.Warnings, _d.Warnings...)
		_ege.Errors = append(_ege.Errors, _d.Errors...)
	}
	return _ege, nil
}

func (_dbe *DiffResults) addWarningWithDescription(_aeb int, _abb string) {
	if _dbe.Warnings == nil {
		_dbe.Warnings = make([]*DiffResult, 0)
	}
	_dbe.Warnings = append(_dbe.Warnings, &DiffResult{Revision: _aeb, Description: _abb})
}

func NewDefaultDiffPolicy() DiffPolicy {
	return &defaultDiffPolicy{_b: nil, _gg: &DiffResults{}, _ec: 0}
}

type defaultDiffPolicy struct {
	_b  map[int64]_ed.PdfObject
	_gg *DiffResults
	_ec DocMDPPermission
}

func (_f *defaultDiffPolicy) compareRevisions(_bc *_ed.PdfParser, _egd *_ed.PdfParser) (*DiffResults, error) {
	var _dd error
	_f._b, _dd = _egd.GetUpdatedObjects(_bc)
	if _dd != nil {
		return &DiffResults{}, _dd
	}
	if len(_f._b) == 0 {
		return &DiffResults{}, nil
	}
	_ab := _egd.GetRevisionNumber()
	_da, _gd := _ed.GetIndirect(_ed.ResolveReference(_bc.GetTrailer().Get("\u0052\u006f\u006f\u0074")))
	_ga, _ad := _ed.GetIndirect(_ed.ResolveReference(_egd.GetTrailer().Get("\u0052\u006f\u006f\u0074")))
	if !_gd || !_ad {
		return &DiffResults{}, _g.New("\u0065\u0072\u0072o\u0072\u0020\u0077\u0068i\u006c\u0065\u0020\u0067\u0065\u0074\u0074i\u006e\u0067\u0020\u0072\u006f\u006f\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074")
	}
	_fd, _gd := _ed.GetDict(_ed.ResolveReference(_da.PdfObject))
	_fdd, _ad := _ed.GetDict(_ed.ResolveReference(_ga.PdfObject))
	if !_gd || !_ad {
		return &DiffResults{}, _g.New("\u0065\u0072\u0072\u006f\u0072\u0020\u0077\u0068\u0069\u006c\u0065\u0020\u0067e\u0074\u0074\u0069\u006e\u0067\u0020a\u0020\u0072\u006f\u006f\u0074\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079")
	}
	if _af, _fa := _ed.GetIndirect(_fdd.Get("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d")); _fa {
		_ebb, _bgc := _ed.GetDict(_af)
		if !_bgc {
			return &DiffResults{}, _g.New("\u0065\u0072\u0072\u006f\u0072 \u0077\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079")
		}
		_afd := make([]_ed.PdfObject, 0)
		if _fg, _afg := _ed.GetIndirect(_fd.Get("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d")); _afg {
			if _ddg, _de := _ed.GetDict(_fg); _de {
				if _gf, _ae := _ed.GetArray(_ddg.Get("\u0046\u0069\u0065\u006c\u0064\u0073")); _ae {
					_afd = _gf.Elements()
				}
			}
		}
		_ee, _bgc := _ed.GetArray(_ebb.Get("\u0046\u0069\u0065\u006c\u0064\u0073"))
		if !_bgc {
			return &DiffResults{}, _g.New("\u0065\u0072r\u006f\u0072\u0020\u0077h\u0069\u006ce\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0066i\u0065\u006c\u0064\u0073")
		}
		if _abd := _f.compareFields(_ab, _afd, _ee.Elements()); _abd != nil {
			return &DiffResults{}, _abd
		}
	}
	_ebd, _edc := _ed.GetIndirect(_fdd.Get("\u0050\u0061\u0067e\u0073"))
	if !_edc {
		return &DiffResults{}, _g.New("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074")
	}
	_fe, _edc := _ed.GetIndirect(_fd.Get("\u0050\u0061\u0067e\u0073"))
	if !_edc {
		return &DiffResults{}, _g.New("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074")
	}
	if _bf := _f.comparePages(_ab, _fe, _ebd); _bf != nil {
		return &DiffResults{}, _bf
	}
	return _f._gg, nil
}

func _egce(_bdg _ed.PdfObject) ([]_ed.PdfObject, error) {
	_agb := make([]_ed.PdfObject, 0)
	if _bdg != nil {
		_bfcc := _bdg
		if _cfd, _cb := _ed.GetIndirect(_bdg); _cb {
			_bfcc = _cfd.PdfObject
		}
		if _abg, _gcb := _ed.GetArray(_bfcc); _gcb {
			_agb = _abg.Elements()
		} else {
			return nil, _g.New("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0061n\u006eo\u0074s\u0027\u0020\u006f\u0062\u006a\u0065\u0063t")
		}
	}
	return _agb, nil
}

func (_dge *DiffResults) addError(_caae *DiffResult) {
	if _dge.Errors == nil {
		_dge.Errors = make([]*DiffResult, 0)
	}
	_dge.Errors = append(_dge.Errors, _caae)
}

func (_ggc *DiffResults) addErrorWithDescription(_fgd int, _cbd string) {
	if _ggc.Errors == nil {
		_ggc.Errors = make([]*DiffResult, 0)
	}
	_ggc.Errors = append(_ggc.Errors, &DiffResult{Revision: _fgd, Description: _cbd})
}

// IsPermitted returns true if changes permitted.
func (_gec *DiffResults) IsPermitted() bool { return len(_gec.Errors) == 0 }

// DiffResult describes the warning or the error for the DiffPolicy results.
type DiffResult struct {
	Revision    int
	Description string
}

func (_cbc *DiffResults) addWarning(_daae *DiffResult) {
	if _cbc.Warnings == nil {
		_cbc.Warnings = make([]*DiffResult, 0)
	}
	_cbc.Warnings = append(_cbc.Warnings, _daae)
}

// DiffResults describes the results of the DiffPolicy.
type DiffResults struct {
	Warnings []*DiffResult
	Errors   []*DiffResult
}
