//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package pdfa provides abstraction to optimize and verify documents with respect to the PDF/A standards.
// NOTE: This implementation is in experimental development state.
//
//	Keep in mind that it might change in the subsequent minor versions.
package pdfa

import (
	_ee "errors"
	_c "fmt"
	_cf "github.com/adrg/sysfont"
	_df "github.com/szwede/unipdf/v4/common"
	_eb "github.com/szwede/unipdf/v4/contentstream"
	_gf "github.com/szwede/unipdf/v4/core"
	_dfc "github.com/szwede/unipdf/v4/internal/cmap"
	_bg "github.com/szwede/unipdf/v4/internal/imageutil"
	_bgd "github.com/szwede/unipdf/v4/internal/timeutils"
	_b "github.com/szwede/unipdf/v4/model"
	_ebc "github.com/szwede/unipdf/v4/model/internal/colorprofile"
	_eg "github.com/szwede/unipdf/v4/model/internal/docutil"
	_aa "github.com/szwede/unipdf/v4/model/internal/fonts"
	_ebf "github.com/szwede/unipdf/v4/model/xmputil"
	_ea "github.com/szwede/unipdf/v4/model/xmputil/pdfaextension"
	_ag "github.com/szwede/unipdf/v4/model/xmputil/pdfaid"
	_ae "github.com/trimmer-io/go-xmp/models/dc"
	_cc "github.com/trimmer-io/go-xmp/models/pdf"
	_fe "github.com/trimmer-io/go-xmp/models/xmp_base"
	_ff "github.com/trimmer-io/go-xmp/models/xmp_mm"
	_gdd "github.com/trimmer-io/go-xmp/models/xmp_rights"
	_gd "github.com/trimmer-io/go-xmp/xmp"
	_a "image/color"
	_g "math"
	_e "sort"
	_ec "strings"
	_d "time"
)

func _agcc(_bcdcf *_eg.Document, _afg func() _d.Time) error {
	_acc, _eab := _b.NewPdfInfoFromObject(_bcdcf.Info)
	if _eab != nil {
		return _eab
	}
	if _fcf := _ecba(_acc, _afg); _fcf != nil {
		return _fcf
	}
	_bcdcf.Info = _acc.ToPdfObject()
	return nil
}

func _agegc(_ggc *_eg.Document) error {
	_aceg, _edfb := _ggc.FindCatalog()
	if !_edfb {
		return _ee.New("\u0063\u0061\u0074\u0061\u006c\u006f\u0067\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064")
	}
	_cacdd, _edfb := _gf.GetDict(_aceg.Object.Get("\u004e\u0061\u006de\u0073"))
	if !_edfb {
		return nil
	}
	if _cacdd.Get("\u0041\u006c\u0074\u0065rn\u0061\u0074\u0065\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006fn\u0073") != nil {
		_cacdd.Remove("\u0041\u006c\u0074\u0065rn\u0061\u0074\u0065\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006fn\u0073")
	}
	return nil
}

func _gcf(_cgbg *_b.CompliancePdfReader) ViolatedRule {
	if _cgbg.ParserMetadata().HasDataAfterEOF() {
		return _af("\u0036.\u0031\u002e\u0033\u002d\u0033", "\u004e\u006f\u0020\u0064\u0061ta\u0020\u0073h\u0061\u006c\u006c\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0020\u0074\u0068\u0065\u0020\u006c\u0061\u0073\u0074\u0020\u0065\u006e\u0064\u002d\u006f\u0066\u002d\u0066\u0069l\u0065\u0020\u006da\u0072\u006b\u0065\u0072\u0020\u0065\u0078\u0063\u0065\u0070\u0074\u0020\u0061 \u0073\u0069\u006e\u0067\u006ce\u0020\u006f\u0070\u0074\u0069\u006f\u006e\u0061\u006c \u0065\u006ed\u002do\u0066\u002d\u006c\u0069\u006e\u0065\u0020m\u0061\u0072\u006b\u0065\u0072\u002e")
	}
	return _cgf
}

func (_fb *documentImages) hasUncalibratedImages() bool { return _fb._bcd || _fb._gfc || _fb._ef }

func (_eeb *documentImages) hasOnlyDeviceRGB() bool { return _eeb._bcd && !_eeb._gfc && !_eeb._ef }

func _ac(_gdgf []_gf.PdfObject) (*documentImages, error) {
	_dab := _gf.PdfObjectName("\u0053u\u0062\u0074\u0079\u0070\u0065")
	_abg := make(map[*_gf.PdfObjectStream]struct{})
	_bb := make(map[_gf.PdfObject]struct{})
	var (
		_bce, _cff, _gfd bool
		_geb             []*imageInfo
		_ad              error
	)
	for _, _ga := range _gdgf {
		_bbc, _cfg := _gf.GetStream(_ga)
		if !_cfg {
			continue
		}
		if _, _aec := _abg[_bbc]; _aec {
			continue
		}
		_abg[_bbc] = struct{}{}
		_ecf := _bbc.PdfObjectDictionary.Get(_dab)
		_gcb, _cfg := _gf.GetName(_ecf)
		if !_cfg || string(*_gcb) != "\u0049\u006d\u0061g\u0065" {
			continue
		}
		if _abd := _bbc.PdfObjectDictionary.Get("\u0053\u004d\u0061s\u006b"); _abd != nil {
			_bb[_abd] = struct{}{}
		}
		_ba := imageInfo{BitsPerComponent: 8, Stream: _bbc}
		_ba.ColorSpace, _ad = _b.DetermineColorspaceNameFromPdfObject(_bbc.PdfObjectDictionary.Get("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"))
		if _ad != nil {
			return nil, _ad
		}
		if _bad, _efd := _gf.GetIntVal(_bbc.PdfObjectDictionary.Get("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074")); _efd {
			_ba.BitsPerComponent = _bad
		}
		if _cfc, _fac := _gf.GetIntVal(_bbc.PdfObjectDictionary.Get("\u0057\u0069\u0064t\u0068")); _fac {
			_ba.Width = _cfc
		}
		if _gab, _fee := _gf.GetIntVal(_bbc.PdfObjectDictionary.Get("\u0048\u0065\u0069\u0067\u0068\u0074")); _fee {
			_ba.Height = _gab
		}
		switch _ba.ColorSpace {
		case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":
			_gfd = true
			_ba.ColorComponents = 1
		case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":
			_bce = true
			_ba.ColorComponents = 3
		case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":
			_cff = true
			_ba.ColorComponents = 4
		default:
			_ba._gc = true
		}
		_geb = append(_geb, &_ba)
	}
	if len(_bb) > 0 {
		if len(_bb) == len(_geb) {
			_geb = nil
		} else {
			_cab := make([]*imageInfo, len(_geb)-len(_bb))
			var _gga int
			for _, _ggf := range _geb {
				if _, _dge := _bb[_ggf.Stream]; _dge {
					continue
				}
				_cab[_gga] = _ggf
				_gga++
			}
			_geb = _cab
		}
	}
	return &documentImages{_bcd: _bce, _gfc: _cff, _ef: _gfd, _bge: _bb, _bf: _geb}, nil
}

var _ Profile = (*Profile3U)(nil)

// VerificationError is the PDF/A verification error structure, that contains all violated rules.
type VerificationError struct {

	// ViolatedRules are the rules that were violated during error verification.
	ViolatedRules []ViolatedRule

	// ConformanceLevel defines the standard on verification failed.
	ConformanceLevel int

	// ConformanceVariant is the standard variant used on verification.
	ConformanceVariant string
}

// Part gets the PDF/A version level.
func (_cbde *profile1) Part() int { return _cbde._bdg._aac }

var _ Profile = (*Profile1B)(nil)

func _de() standardType { return standardType{_aac: 1, _bc: "\u0042"} }

func _dfg() standardType { return standardType{_aac: 1, _bc: "\u0041"} }

// Profile2A is the implementation of the PDF/A-2A standard profile.
// Implements model.StandardImplementer, Profile interfaces.
type Profile2A struct{ profile2 }

func _feeg(_acceg *_b.PdfFont, _ddge *_gf.PdfObjectDictionary) ViolatedRule {
	const (
		_efaf  = "\u0036.\u0033\u002e\u0035\u002d\u0032"
		_debea = "\u0046\u006f\u0072\u0020\u0061l\u006c\u0020\u0054\u0079\u0070\u0065\u0020\u0031\u0020\u0066\u006f\u006e\u0074 \u0073\u0075bs\u0065\u0074\u0073 \u0072\u0065\u0066e\u0072\u0065\u006e\u0063\u0065\u0064\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0061\u0020\u0063\u006fn\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u002c\u0020\u0074he\u0020f\u006f\u006e\u0074\u0020\u0064\u0065s\u0063r\u0069\u0070\u0074o\u0072\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0069\u006ec\u006c\u0075\u0064e\u0020\u0061\u0020\u0043\u0068\u0061\u0072\u0053\u0065\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u006c\u0069\u0073\u0074\u0069\u006e\u0067\u0020\u0074\u0068\u0065\u0020\u0063\u0068\u0061\u0072a\u0063\u0074\u0065\u0072 \u006e\u0061\u006d\u0065\u0073\u0020d\u0065\u0066i\u006e\u0065\u0064\u0020i\u006e\u0020\u0074\u0068\u0065\u0020f\u006f\u006e\u0074\u0020s\u0075\u0062\u0073\u0065\u0074, \u0061\u0073 \u0064\u0065s\u0063\u0072\u0069\u0062\u0065\u0064\u0020\u0069\u006e \u0050\u0044\u0046\u0020\u0052e\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0054\u0061\u0062\u006ce\u0020\u0035\u002e1\u0038\u002e"
	)
	var _ecda string
	if _dcfa, _fcce := _gf.GetName(_ddge.Get("\u0053u\u0062\u0074\u0079\u0070\u0065")); _fcce {
		_ecda = _dcfa.String()
	}
	if _ecda != "\u0054\u0079\u0070e\u0031" {
		return _cgf
	}
	if _aa.IsStdFont(_aa.StdFontName(_acceg.BaseFont())) {
		return _cgf
	}
	_edbag := _acceg.FontDescriptor()
	if _edbag.CharSet == nil {
		return _af(_efaf, _debea)
	}
	return _cgf
}

// NewProfile2U creates a new Profile2U with the given options.
func NewProfile2U(options *Profile2Options) *Profile2U {
	if options == nil {
		options = DefaultProfile2Options()
	}
	_eaaa(options)
	return &Profile2U{profile2{_dddf: *options, _eggde: _fad()}}
}

// NewProfile2A creates a new Profile2A with given options.
func NewProfile2A(options *Profile2Options) *Profile2A {
	if options == nil {
		options = DefaultProfile2Options()
	}
	_eaaa(options)
	return &Profile2A{profile2{_dddf: *options, _eggde: _ab()}}
}

func _fadg(_bdbf bool, _afgf standardType) (pageColorspaceOptimizeFunc, documentColorspaceOptimizeFunc) {
	var _dgac, _gde, _ecc bool
	_efdd := func(_fce *_eg.Document, _def *_eg.Page, _fecd []*_eg.Image) error {
		_gde = true
		for _, _bcba := range _fecd {
			switch _bcba.Colorspace {
			case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":
				_gde = true
			case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":
				_dgac = true
			case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":
				_ecc = true
			}
		}
		_dae, _defc := _def.GetContents()
		if !_defc {
			return nil
		}
		for _, _gceb := range _dae {
			_aeg, _fbc := _gceb.GetData()
			if _fbc != nil {
				continue
			}
			_egbg := _eb.NewContentStreamParser(string(_aeg))
			_dfb, _fbc := _egbg.Parse()
			if _fbc != nil {
				continue
			}
			for _, _ggaf := range *_dfb {
				switch _ggaf.Operand {
				case "\u0047", "\u0067":
					_gde = true
				case "\u0052\u0047", "\u0072\u0067":
					_dgac = true
				case "\u004b", "\u006b":
					_ecc = true
				case "\u0043\u0053", "\u0063\u0073":
					if len(_ggaf.Params) == 0 {
						continue
					}
					_dfca, _gceg := _gf.GetName(_ggaf.Params[0])
					if !_gceg {
						continue
					}
					switch _dfca.String() {
					case "\u0052\u0047\u0042", "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":
						_dgac = true
					case "\u0047", "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":
						_gde = true
					case "\u0043\u004d\u0059\u004b", "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":
						_ecc = true
					}
				}
			}
		}
		_ddc := _def.FindXObjectForms()
		for _, _acf := range _ddc {
			_bbaf := _eb.NewContentStreamParser(string(_acf.Stream))
			_dbc, _cde := _bbaf.Parse()
			if _cde != nil {
				continue
			}
			for _, _gdfg := range *_dbc {
				switch _gdfg.Operand {
				case "\u0047", "\u0067":
					_gde = true
				case "\u0052\u0047", "\u0072\u0067":
					_dgac = true
				case "\u004b", "\u006b":
					_ecc = true
				case "\u0043\u0053", "\u0063\u0073":
					if len(_gdfg.Params) == 0 {
						continue
					}
					_dba, _aaec := _gf.GetName(_gdfg.Params[0])
					if !_aaec {
						continue
					}
					switch _dba.String() {
					case "\u0052\u0047\u0042", "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":
						_dgac = true
					case "\u0047", "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":
						_gde = true
					case "\u0043\u004d\u0059\u004b", "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":
						_ecc = true
					}
				}
			}
			_bffg, _deb := _gf.GetArray(_def.Object.Get("\u0041\u006e\u006e\u006f\u0074\u0073"))
			if !_deb {
				return nil
			}
			for _, _bdcf := range _bffg.Elements() {
				_aad, _bade := _gf.GetDict(_bdcf)
				if !_bade {
					continue
				}
				_dbg := _aad.Get("\u0043")
				if _dbg == nil {
					continue
				}
				_gcdb, _bade := _gf.GetArray(_dbg)
				if !_bade {
					continue
				}
				switch _gcdb.Len() {
				case 0:
				case 1:
					_gde = true
				case 3:
					_dgac = true
				case 4:
					_ecc = true
				}
			}
		}
		return nil
	}
	_dcef := func(_fgg *_eg.Document, _cbdg []*_eg.Image) error {
		_bef, _dfe := _fgg.FindCatalog()
		if !_dfe {
			return nil
		}
		_dgf, _dfe := _bef.GetOutputIntents()
		if _dfe && _dgf.Len() > 0 {
			return nil
		}
		if !_dfe {
			_dgf = _bef.NewOutputIntents()
		}
		if !(_dgac || _ecc || _gde) {
			return nil
		}
		defer _bef.SetOutputIntents(_dgf)
		if _dgac && !_ecc && !_gde {
			return _eac(_fgg, _afgf, _dgf)
		}
		if _ecc && !_dgac && !_gde {
			return _gdbf(_afgf, _dgf)
		}
		if _gde && !_dgac && !_ecc {
			return _agga(_afgf, _dgf)
		}
		if (_dgac && _ecc) || (_dgac && _gde) || (_ecc && _gde) {
			if _bab := _gcd(_cbdg, _bdbf); _bab != nil {
				return _bab
			}
			if _caae := _ecb(_fgg, _bdbf); _caae != nil {
				return _caae
			}
			if _ddbfe := _daad(_fgg, _bdbf); _ddbfe != nil {
				return _ddbfe
			}
			if _beac := _edga(_fgg, _bdbf); _beac != nil {
				return _beac
			}
			if _bdbf {
				return _gdbf(_afgf, _dgf)
			}
			return _eac(_fgg, _afgf, _dgf)
		}
		return nil
	}
	return _efdd, _dcef
}

type colorspaceModification struct {
	_cfd _bg.ColorConverter
	_eeg _b.PdfColorspace
}

type profile3 struct {
	_dggeb standardType
	_adcf  Profile3Options
}

func _dfad(_bbgec *_b.CompliancePdfReader) (_abafb []ViolatedRule) {
	var _dbebf, _defcd, _gdee, _edaga, _ggbbd, _gbcc, _afad bool
	_gbgca := func() bool { return _dbebf && _defcd && _gdee && _edaga && _ggbbd && _gbcc && _afad }
	for _, _dgbae := range _bbgec.PageList {
		_cfca, _eegda := _dgbae.GetAnnotations()
		if _eegda != nil {
			_df.Log.Trace("\u006c\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0061\u006en\u006f\u0074\u0061\u0074\u0069\u006f\u006es\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076", _eegda)
			continue
		}
		for _, _egffc := range _cfca {
			if !_dbebf {
				switch _egffc.GetContext().(type) {
				case *_b.PdfAnnotationScreen, *_b.PdfAnnotation3D, *_b.PdfAnnotationSound, *_b.PdfAnnotationMovie, nil:
					_abafb = append(_abafb, _af("\u0036.\u0033\u002e\u0031\u002d\u0031", "\u0041nn\u006f\u0074\u0061\u0074i\u006f\u006e t\u0079\u0070\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020i\u006e\u0020\u0050\u0044\u0046\u0020\u0052\u0065\u0066\u0065\u0072e\u006e\u0063\u0065\u0020\u0073\u0068\u0061\u006cl\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u0070\u0065r\u006d\u0069t\u0074\u0065\u0064\u002e\u0020\u0041\u0064d\u0069\u0074\u0069\u006f\u006e\u0061\u006c\u006c\u0079\u002c\u0020\u0074\u0068\u0065\u0020\u0033\u0044\u002c\u0020\u0053\u006f\u0075\u006e\u0064\u002c\u0020\u0053\u0063\u0072\u0065\u0065\u006e\u0020\u0061n\u0064\u0020\u004d\u006f\u0076\u0069\u0065\u0020\u0074\u0079\u0070\u0065\u0073\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064\u002e"))
					_dbebf = true
					if _gbgca() {
						return _abafb
					}
				}
			}
			_ecefe, _aagb := _gf.GetDict(_egffc.GetContainingPdfObject())
			if !_aagb {
				continue
			}
			_, _fegc := _egffc.GetContext().(*_b.PdfAnnotationPopup)
			if !_fegc && !_defcd {
				_, _daafb := _gf.GetIntVal(_ecefe.Get("\u0046"))
				if !_daafb {
					_abafb = append(_abafb, _af("\u0036.\u0033\u002e\u0032\u002d\u0031", "\u0045\u0078\u0063\u0065\u0070\u0074\u0020\u0066\u006f\u0072\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072i\u0065\u0073\u0020\u0077\u0068\u006fs\u0065\u0020\u0053\u0075\u0062\u0074\u0079\u0070\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0069\u0073\u0020\u0050\u006f\u0070u\u0070\u002c\u0020\u0061\u006c\u006c\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0069\u0065\u0073\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0046 \u006b\u0065y."))
					_defcd = true
					if _gbgca() {
						return _abafb
					}
				}
			}
			if !_gdee {
				_ecdec, _bcaeg := _gf.GetIntVal(_ecefe.Get("\u0046"))
				if _bcaeg && !(_ecdec&4 == 4 && _ecdec&1 == 0 && _ecdec&2 == 0 && _ecdec&32 == 0 && _ecdec&256 == 0) {
					_abafb = append(_abafb, _af("\u0036.\u0033\u002e\u0032\u002d\u0032", "I\u0066\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u002c\u0020\u0074\u0068\u0065\u0020\u0046 \u006b\u0065\u0079\u0027\u0073\u0020\u0050\u0072\u0069\u006e\u0074\u0020\u0066\u006c\u0061\u0067\u0020\u0062\u0069\u0074\u0020\u0073\u0068\u0061l\u006c\u0020\u0062\u0065\u0020\u0073\u0065\u0074\u0020\u0074\u006f\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0069\u0074\u0073\u0020\u0048\u0069\u0064\u0064\u0065\u006e\u002c\u0020\u0049\u006e\u0076\u0069\u0073\u0069\u0062\u006c\u0065\u002c\u0020\u0054\u006f\u0067\u0067\u006c\u0065\u004e\u006f\u0056\u0069\u0065\u0077\u002c\u0020\u0061\u006e\u0064 \u004eo\u0056\u0069\u0065\u0077\u0020\u0066\u006c\u0061\u0067\u0020\u0062\u0069\u0074\u0073\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020s\u0065\u0074\u0020t\u006f\u0020\u0030."))
					_gdee = true
					if _gbgca() {
						return _abafb
					}
				}
			}
			_, _gdcab := _egffc.GetContext().(*_b.PdfAnnotationText)
			if _gdcab && !_edaga {
				_gebe, _fcecd := _gf.GetIntVal(_ecefe.Get("\u0046"))
				if _fcecd && !(_gebe&8 == 8 && _gebe&16 == 16) {
					_abafb = append(_abafb, _af("\u0036.\u0033\u002e\u0032\u002d\u0033", "\u0054\u0065\u0078\u0074\u0020a\u006e\u006e\u006f\u0074\u0061t\u0069o\u006e\u0020\u0068\u0061\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0066\u006ca\u0067\u0073\u0020\u004e\u006f\u005a\u006f\u006f\u006d\u0020\u006f\u0072\u0020\u004e\u006f\u0052\u006f\u0074\u0061\u0074\u0065\u0020\u0073\u0065t\u0020\u0074\u006f\u0020\u0030\u002e"))
					_edaga = true
					if _gbgca() {
						return _abafb
					}
				}
			}
			if !_ggbbd {
				_dacf, _bfee := _gf.GetDict(_ecefe.Get("\u0041\u0050"))
				if _bfee {
					_dcfb := _dacf.Get("\u004e")
					if _dcfb == nil || len(_dacf.Keys()) > 1 {
						_abafb = append(_abafb, _af("\u0036.\u0033\u002e\u0033\u002d\u0032", "\u0046\u006f\u0072\u0020\u0061\u006c\u006c\u0020\u0061\u006e\u006e\u006ft\u0061\u0074\u0069\u006f\u006e\u0020d\u0069\u0063t\u0069\u006f\u006ea\u0072\u0069\u0065\u0073 \u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0069\u006e\u0067\u0020\u0061\u006e\u0020\u0041\u0050 \u006b\u0065\u0079\u002c\u0020\u0074\u0068\u0065\u0020\u0061p\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0074\u0068\u0061\u0074\u0020\u0069\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0073\u0020\u0061\u0073\u0020it\u0073\u0020\u0076\u0061\u006cu\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0063\u006f\u006e\u0074\u0061i\u006e\u0020o\u006e\u006c\u0079\u0020\u0074\u0068\u0065\u0020\u004e\u0020\u006b\u0065\u0079\u002e\u0020\u0049\u0066\u0020\u0061\u006e\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0064i\u0063\u0074\u0069o\u006e\u0061\u0072\u0079\u0027\u0073\u0020\u0053\u0075\u0062ty\u0070\u0065\u0020\u006b\u0065\u0079\u0020\u0068\u0061\u0073\u0020\u0061\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0057\u0069\u0064g\u0065\u0074\u0020\u0061\u006e\u0064\u0020\u0069\u0074s\u0020\u0046\u0054 \u006be\u0079\u0020\u0068\u0061\u0073\u0020\u0061\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020B\u0074\u006e,\u0020\u0074he \u0076a\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u004e\u0020\u006b\u0065\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0061\u0070\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0020\u0073\u0075\u0062\u0064\u0069\u0063\u0074\u0069\u006fn\u0061r\u0079; \u006f\u0074\u0068\u0065\u0072\u0077\u0069s\u0065\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020th\u0065\u0020N\u0020\u006b\u0065y\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062e\u0020\u0061\u006e\u0020\u0061\u0070\u0070\u0065\u0061\u0072\u0061n\u0063\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u002e"))
						_ggbbd = true
						if _gbgca() {
							return _abafb
						}
						continue
					}
					_, _ffba := _egffc.GetContext().(*_b.PdfAnnotationWidget)
					if _ffba {
						_edaf, _efdf := _gf.GetName(_ecefe.Get("\u0046\u0054"))
						if _efdf && *_edaf == "\u0042\u0074\u006e" {
							if _, _adafd := _gf.GetDict(_dcfb); !_adafd {
								_abafb = append(_abafb, _af("\u0036.\u0033\u002e\u0033\u002d\u0032", "\u0046\u006f\u0072\u0020\u0061\u006c\u006c\u0020\u0061\u006e\u006e\u006ft\u0061\u0074\u0069\u006f\u006e\u0020d\u0069\u0063t\u0069\u006f\u006ea\u0072\u0069\u0065\u0073 \u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0069\u006e\u0067\u0020\u0061\u006e\u0020\u0041\u0050 \u006b\u0065\u0079\u002c\u0020\u0074\u0068\u0065\u0020\u0061p\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0074\u0068\u0061\u0074\u0020\u0069\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0073\u0020\u0061\u0073\u0020it\u0073\u0020\u0076\u0061\u006cu\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0063\u006f\u006e\u0074\u0061i\u006e\u0020o\u006e\u006c\u0079\u0020\u0074\u0068\u0065\u0020\u004e\u0020\u006b\u0065\u0079\u002e\u0020\u0049\u0066\u0020\u0061\u006e\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0064i\u0063\u0074\u0069o\u006e\u0061\u0072\u0079\u0027\u0073\u0020\u0053\u0075\u0062ty\u0070\u0065\u0020\u006b\u0065\u0079\u0020\u0068\u0061\u0073\u0020\u0061\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0057\u0069\u0064g\u0065\u0074\u0020\u0061\u006e\u0064\u0020\u0069\u0074s\u0020\u0046\u0054 \u006be\u0079\u0020\u0068\u0061\u0073\u0020\u0061\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020B\u0074\u006e,\u0020\u0074he \u0076a\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u004e\u0020\u006b\u0065\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0061\u0070\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0020\u0073\u0075\u0062\u0064\u0069\u0063\u0074\u0069\u006fn\u0061r\u0079; \u006f\u0074\u0068\u0065\u0072\u0077\u0069s\u0065\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020th\u0065\u0020N\u0020\u006b\u0065y\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062e\u0020\u0061\u006e\u0020\u0061\u0070\u0070\u0065\u0061\u0072\u0061n\u0063\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u002e"))
								_ggbbd = true
								if _gbgca() {
									return _abafb
								}
								continue
							}
						}
					}
					_, _gdgae := _gf.GetStream(_dcfb)
					if !_gdgae {
						_abafb = append(_abafb, _af("\u0036.\u0033\u002e\u0033\u002d\u0032", "\u0046\u006f\u0072\u0020\u0061\u006c\u006c\u0020\u0061\u006e\u006e\u006ft\u0061\u0074\u0069\u006f\u006e\u0020d\u0069\u0063t\u0069\u006f\u006ea\u0072\u0069\u0065\u0073 \u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0069\u006e\u0067\u0020\u0061\u006e\u0020\u0041\u0050 \u006b\u0065\u0079\u002c\u0020\u0074\u0068\u0065\u0020\u0061p\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0074\u0068\u0061\u0074\u0020\u0069\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0073\u0020\u0061\u0073\u0020it\u0073\u0020\u0076\u0061\u006cu\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0063\u006f\u006e\u0074\u0061i\u006e\u0020o\u006e\u006c\u0079\u0020\u0074\u0068\u0065\u0020\u004e\u0020\u006b\u0065\u0079\u002e\u0020\u0049\u0066\u0020\u0061\u006e\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0064i\u0063\u0074\u0069o\u006e\u0061\u0072\u0079\u0027\u0073\u0020\u0053\u0075\u0062ty\u0070\u0065\u0020\u006b\u0065\u0079\u0020\u0068\u0061\u0073\u0020\u0061\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0057\u0069\u0064g\u0065\u0074\u0020\u0061\u006e\u0064\u0020\u0069\u0074s\u0020\u0046\u0054 \u006be\u0079\u0020\u0068\u0061\u0073\u0020\u0061\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020B\u0074\u006e,\u0020\u0074he \u0076a\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u004e\u0020\u006b\u0065\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0061\u0070\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0020\u0073\u0075\u0062\u0064\u0069\u0063\u0074\u0069\u006fn\u0061r\u0079; \u006f\u0074\u0068\u0065\u0072\u0077\u0069s\u0065\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020th\u0065\u0020N\u0020\u006b\u0065y\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062e\u0020\u0061\u006e\u0020\u0061\u0070\u0070\u0065\u0061\u0072\u0061n\u0063\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u002e"))
						_ggbbd = true
						if _gbgca() {
							return _abafb
						}
						continue
					}
				}
			}
			_eefc, _abfcd := _egffc.GetContext().(*_b.PdfAnnotationWidget)
			if !_abfcd {
				continue
			}
			if !_gbcc {
				if _eefc.A != nil {
					_abafb = append(_abafb, _af("\u0036.\u0034\u002e\u0031\u002d\u0031", "A \u0057\u0069d\u0067\u0065\u0074\u0020\u0061\u006e\u006e\u006f\u0074a\u0074\u0069\u006f\u006e\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0069\u006ec\u006cu\u0064\u0065\u0020\u0061\u006e\u0020\u0041\u0020e\u006et\u0072\u0079."))
					_gbcc = true
					if _gbgca() {
						return _abafb
					}
				}
			}
			if !_afad {
				if _eefc.AA != nil {
					_abafb = append(_abafb, _af("\u0036.\u0034\u002e\u0031\u002d\u0031", "\u0041\u0020\u0057\u0069\u0064\u0067\u0065\u0074\u0020\u0061\u006e\u006eo\u0074\u0061\u0074i\u006f\u006e\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061r\u0079\u0020\u0073h\u0061\u006c\u006c\u0020n\u006f\u0074\u0020\u0069\u006e\u0063\u006c\u0075\u0064\u0065\u0020\u0061\u006e\u0020\u0041\u0041\u0020\u0065\u006e\u0074\u0072\u0079\u0020\u0066\u006f\u0072\u0020\u0061\u006e\u0020\u0061d\u0064\u0069\u0074\u0069\u006f\u006e\u0061\u006c\u002d\u0061\u0063t\u0069\u006f\u006e\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e"))
					_afad = true
					if _gbgca() {
						return _abafb
					}
				}
			}
		}
	}
	return _abafb
}

func _edga(_eff *_eg.Document, _cgea bool) error {
	_bega, _abag := _eff.GetPages()
	if !_abag {
		return nil
	}
	for _, _fdg := range _bega {
		_gbf, _cag := _gf.GetArray(_fdg.Object.Get("\u0041\u006e\u006e\u006f\u0074\u0073"))
		if !_cag {
			continue
		}
		for _, _fgga := range _gbf.Elements() {
			_edb, _fbea := _gf.GetDict(_fgga)
			if !_fbea {
				continue
			}
			_adcd := _edb.Get("\u0043")
			if _adcd == nil {
				continue
			}
			_gebc, _fbea := _gf.GetArray(_adcd)
			if !_fbea {
				continue
			}
			_fcb, _eba := _gebc.GetAsFloat64Slice()
			if _eba != nil {
				return _eba
			}
			switch _gebc.Len() {
			case 0, 1:
				if _cgea {
					_edb.Set("\u0043", _gf.MakeArrayFromIntegers([]int{1, 1, 1, 1}))
				} else {
					_edb.Set("\u0043", _gf.MakeArrayFromIntegers([]int{1, 1, 1}))
				}
			case 3:
				if _cgea {
					_ace, _gdb, _fba, _fbcf := _a.RGBToCMYK(uint8(_fcb[0]*255), uint8(_fcb[1]*255), uint8(_fcb[2]*255))
					_edb.Set("\u0043", _gf.MakeArrayFromFloats([]float64{float64(_ace) / 255, float64(_gdb) / 255, float64(_fba) / 255, float64(_fbcf) / 255}))
				}
			case 4:
				if !_cgea {
					_acea, _ffb, _gfca := _a.CMYKToRGB(uint8(_fcb[0]*255), uint8(_fcb[1]*255), uint8(_fcb[2]*255), uint8(_fcb[3]*255))
					_edb.Set("\u0043", _gf.MakeArrayFromFloats([]float64{float64(_acea) / 255, float64(_ffb) / 255, float64(_gfca) / 255}))
				}
			}
		}
	}
	return nil
}

// Profile3A is the implementation of the PDF/A-3A standard profile.
// Implements model.StandardImplementer, Profile interfaces.
type Profile3A struct{ profile3 }

// DefaultProfile2Options are the default options for the Profile2.
func DefaultProfile2Options() *Profile2Options {
	return &Profile2Options{Now: _d.Now, Xmp: XmpOptions{MarshalIndent: "\u0009"}}
}

func _dgg(_bdd *_eg.Document) error {
	for _, _fbg := range _bdd.Objects {
		_dad, _gaeg := _gf.GetDict(_fbg)
		if !_gaeg {
			continue
		}
		_beec := _dad.Get("\u0054\u0079\u0070\u0065")
		if _beec == nil {
			continue
		}
		if _gdcc, _edg := _gf.GetName(_beec); _edg && _gdcc.String() != "\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d" {
			continue
		}
		_gcc, _cba := _gf.GetBool(_dad.Get("\u004ee\u0065d\u0041\u0070\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0073"))
		if _cba {
			if bool(*_gcc) {
				_dad.Set("\u004ee\u0065d\u0041\u0070\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0073", _gf.MakeBool(false))
			}
		}
		_facf := _dad.Get("\u0041")
		if _facf != nil {
			_dad.Remove("\u0041")
		}
		_cec, _cba := _gf.GetArray(_dad.Get("\u0046\u0069\u0065\u006c\u0064\u0073"))
		if _cba {
			for _gbd := 0; _gbd < _cec.Len(); _gbd++ {
				_gaac, _aef := _gf.GetDict(_cec.Get(_gbd))
				if !_aef {
					continue
				}
				if _gaac.Get("\u0041\u0041") != nil {
					_gaac.Remove("\u0041\u0041")
				}
			}
		}
	}
	return nil
}

// DefaultProfile3Options the default options for the Profile3.
func DefaultProfile3Options() *Profile3Options {
	return &Profile3Options{Now: _d.Now, Xmp: XmpOptions{MarshalIndent: "\u0009"}}
}

func _adeb(_ffd *_eg.Document, _cffe int) {
	if _ffd.Version.Major == 0 {
		_ffd.Version.Major = 1
	}
	if _ffd.Version.Minor < _cffe {
		_ffd.Version.Minor = _cffe
	}
}

func _gaba(_bcgf *_b.CompliancePdfReader) (_efbc []ViolatedRule) {
	var _gege, _fcfaa, _gedbf, _deea bool
	_dcgfd := func() bool { return _gege && _fcfaa && _gedbf && _deea }
	_afabg, _eegg := _gafg(_bcgf)
	var _fgfcg _ebc.ProfileHeader
	if _eegg {
		_fgfcg, _ = _ebc.ParseHeader(_afabg.DestOutputProfile)
	}
	_cdad := map[_gf.PdfObject]struct{}{}
	var _dbbb func(_dbfed _b.PdfColorspace) bool
	_dbbb = func(_ddfe _b.PdfColorspace) bool {
		switch _egada := _ddfe.(type) {
		case *_b.PdfColorspaceDeviceGray:
			if !_gege {
				if !_eegg {
					_efbc = append(_efbc, _af("\u0036.\u0032\u002e\u0034\u002e\u0033\u002d4", "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079 \u0073\u0068\u0061\u006c\u006c\u0020\u006f\u006e\u006c\u0079\u0020\u0062\u0065\u0020\u0075\u0073\u0065\u0064 \u0069\u0066\u0020\u0061\u0020\u0064\u0065v\u0069\u0063\u0065\u0020\u0069\u006e\u0064\u0065p\u0065\u006e\u0064\u0065\u006e\u0074\u0020\u0044\u0065\u0066\u0061\u0075\u006c\u0074\u0047\u0072\u0061\u0079\u0020\u0063\u006f\u006c\u006f\u0075r \u0073\u0070\u0061\u0063\u0065\u0020\u0068\u0061\u0073\u0020\u0062\u0065\u0065\u006e \u0073\u0065\u0074\u0020\u0077\u0068\u0065n \u0074\u0068\u0065\u0020\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072a\u0079\u0020\u0063\u006f\u006c\u006f\u0075\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0069\u0073\u0020\u0075\u0073\u0065\u0064\u002c o\u0072\u0020\u0069\u0066\u0020\u0061\u0020\u0050\u0044\u0046\u002fA\u0020\u004f\u0075tp\u0075\u0074\u0049\u006e\u0074\u0065\u006e\u0074\u0020\u0069\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u002e"))
					_gege = true
					if _dcgfd() {
						return true
					}
				}
			}
		case *_b.PdfColorspaceDeviceRGB:
			if !_fcfaa {
				if !_eegg || _fgfcg.ColorSpace != _ebc.ColorSpaceRGB {
					_efbc = append(_efbc, _af("\u0036.\u0032\u002e\u0034\u002e\u0033\u002d2", "\u0044\u0065\u0076\u0069c\u0065\u0052\u0047\u0042\u0020\u0073\u0068\u0061\u006cl\u0020\u006f\u006e\u006c\u0079\u0020\u0062e\u0020\u0075\u0073\u0065\u0064\u0020\u0069f\u0020\u0061\u0020\u0064\u0065\u0076\u0069\u0063e\u0020\u0069n\u0064\u0065\u0070e\u006e\u0064\u0065\u006et \u0044\u0065\u0066\u0061\u0075\u006c\u0074\u0052\u0047\u0042\u0020\u0063\u006fl\u006f\u0075r\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0068\u0061\u0073\u0020b\u0065\u0065\u006e\u0020s\u0065\u0074 \u0077\u0068\u0065\u006e\u0020\u0074\u0068\u0065\u0020\u0044\u0065\u0076\u0069\u0063\u0065\u0052\u0047\u0042\u0020c\u006flou\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020i\u0073\u0020\u0075\u0073\u0065\u0064\u002c\u0020\u006f\u0072\u0020if\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u006c\u0065\u0020\u0068\u0061\u0073\u0020\u0061\u0020\u0050\u0044F\u002f\u0041\u0020\u004fut\u0070\u0075\u0074\u0049\u006e\u0074\u0065n\u0074\u0020t\u0068\u0061t\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0073\u0020\u0061\u006e\u0020\u0052\u0047\u0042\u0020\u0064\u0065\u0073\u0074\u0069\u006e\u0061\u0074io\u006e\u0020\u0070\u0072\u006f\u0066\u0069\u006c\u0065\u002e"))
					_fcfaa = true
					if _dcgfd() {
						return true
					}
				}
			}
		case *_b.PdfColorspaceDeviceCMYK:
			if !_gedbf {
				if !_eegg || _fgfcg.ColorSpace != _ebc.ColorSpaceCMYK {
					_efbc = append(_efbc, _af("\u0036.\u0032\u002e\u0034\u002e\u0033\u002d3", "\u0044e\u0076\u0069c\u0065\u0043\u004d\u0059\u004b\u0020\u0073hal\u006c\u0020\u006f\u006e\u006c\u0079\u0020\u0062\u0065\u0020\u0075\u0073\u0065\u0064\u0020\u0069\u0066\u0020\u0061\u0020\u0064\u0065\u0076\u0069\u0063\u0065\u0020\u0069\u006e\u0064\u0065\u0070\u0065\u006e\u0064\u0065\u006e\u0074\u0020\u0044ef\u0061\u0075\u006c\u0074\u0043\u004d\u0059K\u0020\u0063\u006f\u006c\u006f\u0075\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0068\u0061s\u0020\u0062\u0065\u0065\u006e \u0073\u0065\u0074\u0020\u006fr \u0069\u0066\u0020\u0061\u0020\u0044e\u0076\u0069\u0063\u0065\u004e\u002d\u0062\u0061\u0073\u0065\u0064\u0020\u0044\u0065f\u0061\u0075\u006c\u0074\u0043\u004d\u0059\u004b\u0020c\u006f\u006c\u006f\u0075r\u0020\u0073\u0070\u0061\u0063e\u0020\u0068\u0061\u0073\u0020\u0062\u0065\u0065\u006e\u0020\u0073\u0065\u0074\u0020\u0077\u0068\u0065\u006e\u0020\u0074h\u0065\u0020\u0044\u0065\u0076\u0069c\u0065\u0043\u004d\u0059\u004b\u0020c\u006f\u006c\u006fu\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0069\u0073\u0020\u0075\u0073\u0065\u0064\u0020\u006f\u0072\u0020t\u0068\u0065\u0020\u0066\u0069l\u0065\u0020\u0068\u0061\u0073\u0020\u0061\u0020\u0050\u0044\u0046\u002f\u0041\u0020\u004f\u0075\u0074p\u0075\u0074\u0049\u006e\u0074\u0065\u006e\u0074\u0020\u0074\u0068\u0061\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0073\u0020\u0061\u0020\u0043\u004d\u0059\u004b\u0020d\u0065\u0073\u0074\u0069\u006e\u0061t\u0069\u006f\u006e\u0020\u0070r\u006f\u0066\u0069\u006c\u0065\u002e"))
					_gedbf = true
					if _dcgfd() {
						return true
					}
				}
			}
		case *_b.PdfColorspaceICCBased:
			if !_deea {
				_eedg, _bbfc := _ebc.ParseHeader(_egada.Data)
				if _bbfc != nil {
					_df.Log.Debug("\u0070\u0061\u0072si\u006e\u0067\u0020\u0049\u0043\u0043\u0042\u0061\u0073e\u0064 \u0068e\u0061d\u0065\u0072\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076", _bbfc)
					_efbc = append(_efbc, func() ViolatedRule {
						return _af("\u0036.\u0032\u002e\u0034\u002e\u0032\u002d1", "\u0054\u0068e\u0020\u0070\u0072\u006f\u0066\u0069\u006c\u0065\u0020\u0074\u0068\u0061\u0074\u0020\u0066o\u0072\u006d\u0073\u0020\u0074\u0068\u0065\u0020\u0073\u0074r\u0065\u0061\u006d o\u0066\u0020\u0061\u006e\u0020\u0049C\u0043\u0042\u0061\u0073\u0065\u0064\u0020\u0063\u006fl\u006f\u0075\u0072\u0020\u0073p\u0061\u0063\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0020\u0074o\u0020\u0049\u0043\u0043.\u0031\u003a\u0031\u0039\u0039\u0038-\u0030\u0039,\u0020\u0049\u0043\u0043\u002e\u0031\u003a\u0032\u0030\u0030\u0031\u002d\u00312\u002c\u0020\u0049\u0043\u0043\u002e\u0031\u003a\u0032\u0030\u0030\u0033\u002d\u0030\u0039\u0020\u006f\u0072\u0020I\u0053\u004f\u0020\u0031\u0035\u0030\u0037\u0036\u002d\u0031\u002e")
					}())
					_deea = true
					if _dcgfd() {
						return true
					}
				}
				if !_deea {
					var _gcce, _ggae bool
					switch _eedg.DeviceClass {
					case _ebc.DeviceClassPRTR, _ebc.DeviceClassMNTR, _ebc.DeviceClassSCNR, _ebc.DeviceClassSPAC:
					default:
						_gcce = true
					}
					switch _eedg.ColorSpace {
					case _ebc.ColorSpaceRGB, _ebc.ColorSpaceCMYK, _ebc.ColorSpaceGRAY, _ebc.ColorSpaceLAB:
					default:
						_ggae = true
					}
					if _gcce || _ggae {
						_efbc = append(_efbc, _af("\u0036.\u0032\u002e\u0034\u002e\u0032\u002d1", "\u0054\u0068e\u0020\u0070\u0072\u006f\u0066\u0069\u006c\u0065\u0020\u0074\u0068\u0061\u0074\u0020\u0066o\u0072\u006d\u0073\u0020\u0074\u0068\u0065\u0020\u0073\u0074r\u0065\u0061\u006d o\u0066\u0020\u0061\u006e\u0020\u0049C\u0043\u0042\u0061\u0073\u0065\u0064\u0020\u0063\u006fl\u006f\u0075\u0072\u0020\u0073p\u0061\u0063\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0020\u0074o\u0020\u0049\u0043\u0043.\u0031\u003a\u0031\u0039\u0039\u0038-\u0030\u0039,\u0020\u0049\u0043\u0043\u002e\u0031\u003a\u0032\u0030\u0030\u0031\u002d\u00312\u002c\u0020\u0049\u0043\u0043\u002e\u0031\u003a\u0032\u0030\u0030\u0033\u002d\u0030\u0039\u0020\u006f\u0072\u0020I\u0053\u004f\u0020\u0031\u0035\u0030\u0037\u0036\u002d\u0031\u002e"))
						_deea = true
						if _dcgfd() {
							return true
						}
					}
				}
			}
			if _egada.Alternate != nil {
				return _dbbb(_egada.Alternate)
			}
		}
		return false
	}
	for _, _aggd := range _bcgf.GetObjectNums() {
		_gdaf, _gbff := _bcgf.GetIndirectObjectByNumber(_aggd)
		if _gbff != nil {
			continue
		}
		_bbfa, _bede := _gf.GetStream(_gdaf)
		if !_bede {
			continue
		}
		_dfcd, _bede := _gf.GetName(_bbfa.Get("\u0054\u0079\u0070\u0065"))
		if !_bede || _dfcd.String() != "\u0058O\u0062\u006a\u0065\u0063\u0074" {
			continue
		}
		_fdaf, _bede := _gf.GetName(_bbfa.Get("\u0053u\u0062\u0074\u0079\u0070\u0065"))
		if !_bede {
			continue
		}
		_cdad[_bbfa] = struct{}{}
		switch _fdaf.String() {
		case "\u0049\u006d\u0061g\u0065":
			_edce, _fcacf := _b.NewXObjectImageFromStream(_bbfa)
			if _fcacf != nil {
				continue
			}
			_cdad[_bbfa] = struct{}{}
			if _dbbb(_edce.ColorSpace) {
				return _efbc
			}
		case "\u0046\u006f\u0072\u006d":
			_bfbaa, _adcc := _gf.GetDict(_bbfa.Get("\u0047\u0072\u006fu\u0070"))
			if !_adcc {
				continue
			}
			_aeadb := _bfbaa.Get("\u0043\u0053")
			if _aeadb == nil {
				continue
			}
			_abdfb, _egda := _b.NewPdfColorspaceFromPdfObject(_aeadb)
			if _egda != nil {
				continue
			}
			if _dbbb(_abdfb) {
				return _efbc
			}
		}
	}
	for _, _cfadg := range _bcgf.PageList {
		_cccda, _eedef := _cfadg.GetContentStreams()
		if _eedef != nil {
			continue
		}
		for _, _afgd := range _cccda {
			_fdgab, _cfed := _eb.NewContentStreamParser(_afgd).Parse()
			if _cfed != nil {
				continue
			}
			for _, _afeg := range *_fdgab {
				if len(_afeg.Params) > 1 {
					continue
				}
				switch _afeg.Operand {
				case "\u0042\u0049":
					_edde, _dfcac := _afeg.Params[0].(*_eb.ContentStreamInlineImage)
					if !_dfcac {
						continue
					}
					_cbdf, _ccddd := _edde.GetColorSpace(_cfadg.Resources)
					if _ccddd != nil {
						continue
					}
					if _dbbb(_cbdf) {
						return _efbc
					}
				case "\u0044\u006f":
					_fcgd, _adfd := _gf.GetName(_afeg.Params[0])
					if !_adfd {
						continue
					}
					_fgab, _gedbe := _cfadg.Resources.GetXObjectByName(*_fcgd)
					if _, _gbcb := _cdad[_fgab]; _gbcb {
						continue
					}
					switch _gedbe {
					case _b.XObjectTypeImage:
						_fddf, _agcf := _b.NewXObjectImageFromStream(_fgab)
						if _agcf != nil {
							continue
						}
						_cdad[_fgab] = struct{}{}
						if _dbbb(_fddf.ColorSpace) {
							return _efbc
						}
					case _b.XObjectTypeForm:
						_dcgb, _aefgg := _gf.GetDict(_fgab.Get("\u0047\u0072\u006fu\u0070"))
						if !_aefgg {
							continue
						}
						_aafb, _aefgg := _gf.GetName(_dcgb.Get("\u0043\u0053"))
						if !_aefgg {
							continue
						}
						_fffcc, _aadb := _b.NewPdfColorspaceFromPdfObject(_aafb)
						if _aadb != nil {
							continue
						}
						_cdad[_fgab] = struct{}{}
						if _dbbb(_fffcc) {
							return _efbc
						}
					}
				}
			}
		}
	}
	return _efbc
}

var _ Profile = (*Profile3B)(nil)

func _abfd(_cagb *_eg.Document, _fbf *_eg.Page, _cbfa []*_eg.Image) error {
	for _, _ada := range _cbfa {
		if _ada.SMask == nil {
			continue
		}
		_ceee, _cgedc := _b.NewXObjectImageFromStream(_ada.Stream)
		if _cgedc != nil {
			return _cgedc
		}
		_gdge, _cgedc := _ceee.ToImage()
		if _cgedc != nil {
			return _cgedc
		}
		_ggg, _cgedc := _gdge.ToGoImage()
		if _cgedc != nil {
			return _cgedc
		}
		_cbgc, _cgedc := _bg.RGBAConverter.Convert(_ggg)
		if _cgedc != nil {
			return _cgedc
		}
		_cacg := _cbgc.Base()
		_bdcc := &_b.Image{Width: int64(_cacg.Width), Height: int64(_cacg.Height), BitsPerComponent: int64(_cacg.BitsPerComponent), ColorComponents: _cacg.ColorComponents, Data: _cacg.Data}
		_bdcc.SetDecode(_cacg.Decode)
		_bdcc.SetAlpha(_cacg.Alpha)
		if _cgedc = _ceee.SetImage(_bdcc, nil); _cgedc != nil {
			return _cgedc
		}
		_ceee.SMask = _gf.MakeNull()
		var _dgd _gf.PdfObject
		_cfee := -1
		for _cfee, _dgd = range _cagb.Objects {
			if _dgd == _ada.SMask.Stream {
				break
			}
		}
		if _cfee != -1 {
			_cagb.Objects = append(_cagb.Objects[:_cfee], _cagb.Objects[_cfee+1:]...)
		}
		_ada.SMask = nil
		_ceee.ToPdfObject()
	}
	return nil
}

func _edgbd(_ggbb *_b.CompliancePdfReader) ViolatedRule { return _cgf }

func _eace(_bebba *_b.CompliancePdfReader) []ViolatedRule { return nil }

func _eagc(_faad *_b.CompliancePdfReader) ViolatedRule {
	_cbag := _faad.ParserMetadata().HeaderCommentBytes()
	if _cbag[0] > 127 && _cbag[1] > 127 && _cbag[2] > 127 && _cbag[3] > 127 {
		return _cgf
	}
	return _af("\u0036.\u0031\u002e\u0032\u002d\u0032", "\u0054\u0068\u0065\u0020\u0066\u0069\u006c\u0065\u0020\u0068\u0065\u0061\u0064\u0065\u0072\u0020\u006c\u0069\u006e\u0065\u0020\u0073\u0068\u0061\u006c\u006c b\u0065\u0020i\u006d\u006d\u0065\u0064\u0069a\u0074\u0065\u006c\u0079 \u0066\u006f\u006c\u006co\u0077\u0065\u0064\u0020\u0062\u0079\u0020\u0061\u0020\u0063\u006f\u006d\u006d\u0065n\u0074\u0020\u0063\u006f\u006e\u0073\u0069s\u0074\u0069\u006e\u0067\u0020o\u0066\u0020\u0061\u0020\u0025\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006fwe\u0064\u0020\u0062y\u0020a\u0074\u0009\u006c\u0065a\u0073\u0074\u0020f\u006f\u0075\u0072\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065r\u0073\u002c\u0020e\u0061\u0063\u0068\u0020\u006f\u0066\u0020\u0077\u0068\u006f\u0073\u0065 \u0065\u006e\u0063\u006f\u0064e\u0064\u0020\u0062\u0079\u0074e\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0068\u0061\u0076\u0065\u0020\u0061\u0020\u0064e\u0063\u0069\u006d\u0061\u006c \u0076\u0061\u006c\u0075\u0065\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0031\u0032\u0037\u002e")
}

func _faeb(_cbbe *_b.PdfFont, _gdgb *_gf.PdfObjectDictionary) ViolatedRule {
	const (
		_cbefd = "\u0036.\u0033\u002e\u0037\u002d\u0032"
		_acgf  = "\u0041l\u006c\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0069\u0063\u0020\u0054\u0072u\u0065\u0054\u0079p\u0065\u0020\u0066\u006f\u006e\u0074s\u0020\u0073h\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0079\u0020\u0061\u006e\u0020\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065n\u0074\u0072\u0079\u0020\u0069n\u0020\u0074\u0068e\u0020\u0066\u006f\u006e\u0074 \u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e"
	)
	var _gefa string
	if _cded, _bbdc := _gf.GetName(_gdgb.Get("\u0053u\u0062\u0074\u0079\u0070\u0065")); _bbdc {
		_gefa = _cded.String()
	}
	if _gefa != "\u0054\u0072\u0075\u0065\u0054\u0079\u0070\u0065" {
		return _cgf
	}
	_deddb := _cbbe.FontDescriptor()
	_febe, _ecefb := _gf.GetIntVal(_deddb.Flags)
	if !_ecefb {
		_df.Log.Debug("\u0066\u006c\u0061\u0067\u0073 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0066o\u0072\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069\u0070\u0074\u006f\u0072")
		return _af(_cbefd, _acgf)
	}
	_cbaga := (uint32(_febe) >> 3) & 1
	_bbaec := _cbaga != 0
	if !_bbaec {
		return _cgf
	}
	if _gdgb.Get("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067") != nil {
		return _af(_cbefd, _acgf)
	}
	return _cgf
}

func (_gda standardType) outputIntentSubtype() _b.PdfOutputIntentType {
	switch _gda._aac {
	case 1:
		return _b.PdfOutputIntentTypeA1
	case 2:
		return _b.PdfOutputIntentTypeA2
	case 3:
		return _b.PdfOutputIntentTypeA3
	case 4:
		return _b.PdfOutputIntentTypeA4
	default:
		return 0
	}
}

func _fgbdc(_ceebg *_b.CompliancePdfReader) (_gbbd []ViolatedRule) {
	var _eegce, _cfdfe, _aeagf bool
	if _ceebg.ParserMetadata().HasNonConformantStream() {
		_gbbd = []ViolatedRule{_af("\u0036.\u0031\u002e\u0037\u002d\u0032", "T\u0068\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u006b\u0065\u0079\u0077\u006fr\u0064\u0020\u0073\u0068\u0061\u006c\u006c \u0062\u0065\u0020f\u006f\u006cl\u006fw\u0065\u0064\u0020e\u0069\u0074h\u0065\u0072\u0020\u0062\u0079\u0020\u0061 \u0043\u0041\u0052\u0052I\u0041\u0047\u0045\u0020\u0052E\u0054\u0055\u0052\u004e\u0020\u00280\u0044\u0068\u0029\u0020\u0061\u006e\u0064\u0020\u004c\u0049\u004e\u0045\u0020F\u0045\u0045\u0044\u0020\u0028\u0030\u0041\u0068\u0029\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065\u0020o\u0072\u0020\u0062\u0079\u0020\u0061 \u0073\u0069ng\u006c\u0065\u0020\u004cIN\u0045 \u0046\u0045\u0045\u0044 \u0063\u0068\u0061r\u0061\u0063\u0074\u0065\u0072\u002e\u0020T\u0068\u0065\u0020e\u006e\u0064\u0073\u0074r\u0065\u0061\u006d\u0020\u006b\u0065\u0079\u0077\u006fr\u0064\u0020\u0073\u0068\u0061\u006c\u006c \u0062e\u0020p\u0072\u0065\u0063\u0065\u0064\u0065\u0064\u0020\u0062\u0079\u0020\u0061n\u0020\u0045\u004f\u004c \u006d\u0061\u0072\u006b\u0065\u0072\u002e")}
	}
	for _, _dafge := range _ceebg.GetObjectNums() {
		_begc, _ := _ceebg.GetIndirectObjectByNumber(_dafge)
		if _begc == nil {
			continue
		}
		_gfbc, _ffgd := _gf.GetStream(_begc)
		if !_ffgd {
			continue
		}
		if !_eegce {
			_eccbcf := _gfbc.Get("\u004c\u0065\u006e\u0067\u0074\u0068")
			if _eccbcf == nil {
				_gbbd = append(_gbbd, _af("\u0036.\u0031\u002e\u0037\u002d\u0031", "\u006e\u006f\u0020'\u004c\u0065\u006e\u0067\u0074\u0068\u0027\u0020\u006b\u0065\u0079\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0073\u0074\u0072\u0065a\u006d\u0020\u006f\u0062\u006a\u0065\u0063\u0074"))
				_eegce = true
			} else {
				_agec, _gcbabe := _gf.GetIntVal(_eccbcf)
				if !_gcbabe {
					_gbbd = append(_gbbd, _af("\u0036.\u0031\u002e\u0037\u002d\u0031", "s\u0074\u0072\u0065\u0061\u006d\u0020\u0027\u004c\u0065\u006e\u0067\u0074\u0068\u0027\u0020\u006b\u0065\u0079 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020an\u0020\u0069\u006et\u0065g\u0065\u0072"))
					_eegce = true
				} else {
					if len(_gfbc.Stream) != _agec {
						_gbbd = append(_gbbd, _af("\u0036.\u0031\u002e\u0037\u002d\u0031", "\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u006c\u0065\u006e\u0067th\u0020v\u0061\u006c\u0075\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020m\u0061\u0074\u0063\u0068\u0020\u0074\u0068\u0065\u0020\u0073\u0069\u007a\u0065\u0020\u006f\u0066\u0020t\u0068\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d"))
						_eegce = true
					}
				}
			}
		}
		if !_cfdfe {
			if _gfbc.Get("\u0046") != nil {
				_cfdfe = true
				_gbbd = append(_gbbd, _af("\u0036.\u0031\u002e\u0037\u002d\u0033", "\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u006f\u0062j\u0065\u0063\u0074\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020'\u0046\u0027,\u0020\u0027F\u0046\u0069\u006c\u0074\u0065\u0072\u0027\u002c\u0020\u006f\u0072\u0020\u0027FD\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u0061m\u0073\u0027\u0020\u006b\u0065\u0079"))
			}
			if _gfbc.Get("\u0046F\u0069\u006c\u0074\u0065\u0072") != nil && !_cfdfe {
				_cfdfe = true
				_gbbd = append(_gbbd, _af("\u0036.\u0031\u002e\u0037\u002d\u0033", "\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u006f\u0062j\u0065\u0063\u0074\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020'\u0046\u0027,\u0020\u0027F\u0046\u0069\u006c\u0074\u0065\u0072\u0027\u002c\u0020\u006f\u0072\u0020\u0027FD\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u0061m\u0073\u0027\u0020\u006b\u0065\u0079"))
				continue
			}
			if _gfbc.Get("\u0046\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u0061\u006d\u0073") != nil && !_cfdfe {
				_cfdfe = true
				_gbbd = append(_gbbd, _af("\u0036.\u0031\u002e\u0037\u002d\u0033", "\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u006f\u0062j\u0065\u0063\u0074\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020'\u0046\u0027,\u0020\u0027F\u0046\u0069\u006c\u0074\u0065\u0072\u0027\u002c\u0020\u006f\u0072\u0020\u0027FD\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u0061m\u0073\u0027\u0020\u006b\u0065\u0079"))
				continue
			}
		}
		if !_aeagf {
			_fbbag, _egcd := _gf.GetName(_gf.TraceToDirectObject(_gfbc.Get("\u0046\u0069\u006c\u0074\u0065\u0072")))
			if !_egcd {
				continue
			}
			if *_fbbag == _gf.StreamEncodingFilterNameLZW {
				_aeagf = true
				_gbbd = append(_gbbd, _af("\u0036.\u0031\u002e\u0037\u002d\u0034", "\u0054h\u0065\u0020L\u005a\u0057\u0044\u0065c\u006f\u0064\u0065 \u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0073\u0068al\u006c\u0020\u006eo\u0074\u0020b\u0065\u0020\u0070\u0065\u0072\u006di\u0074\u0074e\u0064\u002e"))
			}
		}
	}
	return _gbbd
}

// ApplyStandard tries to change the content of the writer to match the PDF/A-1 standard.
// Implements model.StandardApplier.
func (_ecbc *profile1) ApplyStandard(document *_eg.Document) (_ega error) {
	_adeb(document, 4)
	if _ega = _agcc(document, _ecbc._egcg.Now); _ega != nil {
		return _ega
	}
	if _ega = _gbdb(document); _ega != nil {
		return _ega
	}
	_gece, _gdgff := _fadg(_ecbc._egcg.CMYKDefaultColorSpace, _ecbc._bdg)
	_ega = _cecea(document, []pageColorspaceOptimizeFunc{_abfd, _gece}, []documentColorspaceOptimizeFunc{_gdgff})
	if _ega != nil {
		return _ega
	}
	_eege(document)
	if _ega = _bbed(document, _ecbc._bdg._aac); _ega != nil {
		return _ega
	}
	if _ega = _aece(document); _ega != nil {
		return _ega
	}
	if _ega = _cdbd(document); _ega != nil {
		return _ega
	}
	if _ega = _abc(document); _ega != nil {
		return _ega
	}
	if _ega = _abaa(document); _ega != nil {
		return _ega
	}
	if _ecbc._bdg._bc == "\u0041" {
		_bgab(document)
	}
	if _ega = _ddbf(document, _ecbc._bdg._aac); _ega != nil {
		return _ega
	}
	if _ega = _feb(document); _ega != nil {
		return _ega
	}
	if _fdga := _fde(document, _ecbc._bdg, _ecbc._egcg.Xmp); _fdga != nil {
		return _fdga
	}
	if _ecbc._bdg == _dfg() {
		if _ega = _egff(document); _ega != nil {
			return _ega
		}
	}
	if _ega = _dgg(document); _ega != nil {
		return _ega
	}
	return nil
}

type standardType struct {
	_aac int
	_bc  string
}

func _affb(_agaf *_gf.PdfObjectDictionary, _fefdg map[*_gf.PdfObjectStream][]byte, _ecbe map[*_gf.PdfObjectStream]*_dfc.CMap) ViolatedRule {
	const (
		_agddf = "\u0036\u002e\u0032\u002e\u0031\u0031\u002e\u0037\u002d\u0031"
		_gggca = "\u0054\u0068\u0065\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079\u0020\u0073\u0068\u0061\u006cl\u0020\u0069\u006e\u0063l\u0075\u0064e\u0020\u0061 \u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u0020\u0065\u006e\u0074\u0072\u0079\u0020w\u0068\u006f\u0073\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u0073 \u0061\u0020\u0043M\u0061\u0070\u0020\u0073\u0074\u0072\u0065\u0061\u006d \u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0068\u0061\u0074\u0020\u006d\u0061p\u0073\u0020\u0063\u0068\u0061\u0072ac\u0074\u0065\u0072\u0020\u0063\u006fd\u0065s\u0020\u0074\u006f\u0020\u0055\u006e\u0069\u0063\u006f\u0064e \u0076a\u006c\u0075\u0065\u0073,\u0020\u0061\u0073\u0020\u0064\u0065\u0073\u0063r\u0069\u0062\u0065\u0064\u0020\u0069\u006e\u0020P\u0044\u0046\u0020\u0052\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0035.\u0039\u002c\u0020\u0075\u006e\u006ce\u0073\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006e\u0074\u0020\u006d\u0065\u0065\u0074\u0073 \u0061\u006e\u0079\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0063\u006f\u006e\u0064\u0069\u0074\u0069\u006f\u006e\u0073\u003a\u000a\u0020\u002d\u0020\u0066o\u006e\u0074\u0073\u0020\u0074\u0068\u0061\u0074\u0020\u0075\u0073\u0065\u0020\u0074\u0068\u0065\u0020\u0070\u0072\u0065\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0065\u006e\u0063\u006f\u0064\u0069n\u0067\u0073\u0020M\u0061\u0063\u0052o\u006d\u0061\u006e\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067\u002c\u0020\u004d\u0061\u0063\u0045\u0078\u0070\u0065\u0072\u0074E\u006e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006f\u0072\u0020\u0057\u0069\u006e\u0041n\u0073\u0069\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067\u002c\u0020\u006f\u0072\u0020\u0074\u0068\u0061\u0074\u0020\u0075\u0073\u0065\u0020t\u0068\u0065\u0020\u0070\u0072\u0065d\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0048\u0020\u006f\u0072\u0020\u0049\u0064\u0065n\u0074\u0069\u0074\u0079\u002d\u0056\u0020C\u004d\u0061\u0070s\u003b\u000a\u0020\u002d\u0020\u0054\u0079\u0070\u0065\u0020\u0031\u0020\u0066\u006f\u006e\u0074\u0073\u0020\u0077\u0068\u006f\u0073\u0065\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u006e\u0061\u006d\u0065\u0073\u0020a\u0072\u0065 \u0074\u0061k\u0065\u006e\u0020\u0066\u0072\u006f\u006d\u0020\u0074\u0068\u0065\u0020\u0041\u0064\u006f\u0062\u0065\u0020\u0073\u0074\u0061n\u0064\u0061\u0072\u0064\u0020L\u0061t\u0069\u006e\u0020\u0063\u0068a\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0020\u006fr\u0020\u0074\u0068\u0065 \u0073\u0065\u0074\u0020\u006f\u0066 \u006e\u0061\u006d\u0065\u0064\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065r\u0073\u0020\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0053\u0079\u006d\u0062\u006f\u006c\u0020\u0066\u006f\u006e\u0074\u002c\u0020\u0061\u0073\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020i\u006e\u0020\u0050\u0044\u0046 \u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0041\u0070\u0070\u0065\u006e\u0064\u0069\u0078 \u0044\u003b\u000a\u0020\u002d\u0020\u0054\u0079\u0070\u0065\u0020\u0030\u0020\u0066\u006f\u006e\u0074\u0073\u0020w\u0068\u006f\u0073e\u0020d\u0065\u0073\u0063\u0065n\u0064\u0061\u006e\u0074 \u0043\u0049\u0044\u0046\u006f\u006e\u0074\u0020\u0075\u0073\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0041\u0064\u006f\u0062\u0065\u002d\u0047B\u0031\u002c\u0020\u0041\u0064\u006fb\u0065\u002d\u0043\u004e\u0053\u0031\u002c\u0020\u0041\u0064\u006f\u0062\u0065\u002d\u004a\u0061\u0070\u0061\u006e\u0031\u0020\u006f\u0072\u0020\u0041\u0064\u006f\u0062\u0065\u002d\u004b\u006fr\u0065\u0061\u0031\u0020\u0063\u0068\u0061r\u0061\u0063\u0074\u0065\u0072\u0020\u0063\u006f\u006c\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u0073\u002e"
	)
	_feag, _baee := _gf.GetStream(_agaf.Get("\u0054o\u0055\u006e\u0069\u0063\u006f\u0064e"))
	if _baee {
		_, _aedc := _dcge(_feag, _fefdg, _ecbe)
		if _aedc != nil {
			return _af(_agddf, _gggca)
		}
		return _cgf
	}
	_aefc, _baee := _gf.GetName(_agaf.Get("\u0053u\u0062\u0074\u0079\u0070\u0065"))
	if !_baee {
		return _af(_agddf, _gggca)
	}
	switch _aefc.String() {
	case "\u0054\u0079\u0070e\u0031":
		return _cgf
	}
	return _af(_agddf, _gggca)
}

func _edca(_defef *_b.PdfFont, _dbcd *_gf.PdfObjectDictionary, _fabb bool) ViolatedRule {
	const (
		_dbfe = "\u0036.\u0033\u002e\u0034\u002d\u0031"
		_cbfc = "\u0054\u0068\u0065\u0020\u0066\u006f\u006et\u0020\u0070\u0072\u006f\u0067\u0072\u0061\u006d\u0073\u0020\u0066\u006f\u0072\u0020\u0061\u006c\u006c\u0020\u0066\u006f\u006e\u0074\u0073\u0020\u0075\u0073\u0065\u0064\u0020\u0077\u0069\u0074\u0068\u0069\u006e \u0061\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0066\u0069l\u0065\u0020s\u0068\u0061\u006cl\u0020\u0062\u0065\u0020\u0065\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0077\u0069\u0074\u0068i\u006e\u0020\u0074h\u0061\u0074\u0020\u0066\u0069\u006ce\u002c\u0020a\u0073\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0069\u006e\u0020\u0050\u0044\u0046\u0020\u0052e\u0066\u0065\u0072\u0065\u006e\u0063\u0065 \u0035\u002e\u0038\u002c\u0020\u0065\u0078\u0063\u0065\u0070\u0074\u0020\u0077h\u0065\u006e\u0020\u0074\u0068\u0065 \u0066\u006f\u006e\u0074\u0073\u0020\u0061\u0072\u0065\u0020\u0075\u0073\u0065\u0064\u0020\u0065\u0078\u0063\u006cu\u0073i\u0076\u0065\u006c\u0079\u0020\u0077\u0069t\u0068\u0020\u0074\u0065\u0078\u0074\u0020\u0072e\u006ed\u0065\u0072\u0069\u006e\u0067\u0020\u006d\u006f\u0064\u0065\u0020\u0033\u002e"
	)
	if _fabb {
		return _cgf
	}
	_dbef := _defef.FontDescriptor()
	var _gadg string
	if _feab, _bcagc := _gf.GetName(_dbcd.Get("\u0053u\u0062\u0074\u0079\u0070\u0065")); _bcagc {
		_gadg = _feab.String()
	}
	switch _gadg {
	case "\u0054\u0079\u0070e\u0031":
		if _dbef.FontFile == nil {
			return _af(_dbfe, _cbfc)
		}
	case "\u0054\u0072\u0075\u0065\u0054\u0079\u0070\u0065":
		if _dbef.FontFile2 == nil {
			return _af(_dbfe, _cbfc)
		}
	case "\u0054\u0079\u0070e\u0030", "\u0054\u0079\u0070e\u0033":
	default:
		if _dbef.FontFile3 == nil {
			return _af(_dbfe, _cbfc)
		}
	}
	return _cgf
}

func _bebbg(_abfdc *_b.CompliancePdfReader) ViolatedRule {
	_egeg := _abfdc.ParserMetadata()
	if _egeg.HasInvalidSeparationAfterXRef() {
		return _af("\u0036.\u0031\u002e\u0034\u002d\u0032", "\u0054\u0068\u0065 \u0078\u0072\u0065\u0066\u0020\u006b\u0065\u0079\u0077\u006fr\u0064\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020\u0063\u0072\u006f\u0073s\u0020\u0072\u0065\u0066e\u0072\u0065\u006e\u0063\u0065 s\u0075b\u0073\u0065\u0063ti\u006f\u006e\u0020\u0068\u0065\u0061\u0064e\u0072\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u0065\u0064\u0020\u0062\u0079 \u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0045\u004fL\u0020\u006d\u0061\u0072\u006b\u0065\u0072\u002e")
	}
	return _cgf
}

func _ecb(_ebfb *_eg.Document, _fbbb bool) error {
	_ffc, _ebg := _ebfb.GetPages()
	if !_ebg {
		return nil
	}
	for _, _bfe := range _ffc {
		_fcef, _fdf := _bfe.GetContents()
		if !_fdf {
			continue
		}
		var _bae *_b.PdfPageResources
		_ddbg, _fdf := _bfe.GetResources()
		if _fdf {
			_bae, _ = _b.NewPdfPageResourcesFromDict(_ddbg)
		}
		for _ddga, _gabb := range _fcef {
			_ecbf, _fafb := _gabb.GetData()
			if _fafb != nil {
				continue
			}
			_gbda := _eb.NewContentStreamParser(string(_ecbf))
			_dcf, _fafb := _gbda.Parse()
			if _fafb != nil {
				continue
			}
			_aacg, _fafb := _fdef(_bae, _dcf, _fbbb)
			if _fafb != nil {
				return _fafb
			}
			if _aacg == nil {
				continue
			}
			if _fafb = (&_fcef[_ddga]).SetData(_aacg); _fafb != nil {
				return _fafb
			}
		}
	}
	return nil
}

func _aece(_eeee *_eg.Document) error {
	_gaad, _afc := _eeee.GetPages()
	if !_afc {
		return nil
	}
	for _, _efge := range _gaad {
		_eea := _efge.FindXObjectForms()
		for _, _cdd := range _eea {
			_ffgb, _dcbd := _gf.GetDict(_cdd.Get("\u0047\u0072\u006fu\u0070"))
			if _dcbd {
				if _ded := _ffgb.Get("\u0053"); _ded != nil {
					_cadbf, _aecd := _gf.GetName(_ded)
					if _aecd && _cadbf.String() == "\u0054\u0072\u0061n\u0073\u0070\u0061\u0072\u0065\u006e\u0063\u0079" {
						_cdd.Remove("\u0047\u0072\u006fu\u0070")
					}
				}
			}
		}
		_fdgdd, _bac := _efge.GetResourcesXObject()
		if _bac {
			_gbeec, _ffaa := _gf.GetDict(_fdgdd.Get("\u0047\u0072\u006fu\u0070"))
			if _ffaa {
				_afga := _gbeec.Get("\u0053")
				if _afga != nil {
					_adfe, _fcfd := _gf.GetName(_afga)
					if _fcfd && _adfe.String() == "\u0054\u0072\u0061n\u0073\u0070\u0061\u0072\u0065\u006e\u0063\u0079" {
						_fdgdd.Remove("\u0047\u0072\u006fu\u0070")
					}
				}
			}
		}
		_daeg, _aegg := _gf.GetDict(_efge.Object.Get("\u0047\u0072\u006fu\u0070"))
		if _aegg {
			_cgfe := _daeg.Get("\u0053")
			if _cgfe != nil {
				_bfc, _gabc := _gf.GetName(_cgfe)
				if _gabc && _bfc.String() == "\u0054\u0072\u0061n\u0073\u0070\u0061\u0072\u0065\u006e\u0063\u0079" {
					_efge.Object.Remove("\u0047\u0072\u006fu\u0070")
				}
			}
		}
	}
	return nil
}

// Profile1B is the implementation of the PDF/A-1B standard profile.
// Implements model.StandardImplementer, Profile interfaces.
type Profile1B struct{ profile1 }

var _ Profile = (*Profile1A)(nil)

func _cecea(_egb *_eg.Document, _eebd []pageColorspaceOptimizeFunc, _ebdf []documentColorspaceOptimizeFunc) error {
	_dafg, _aea := _egb.GetPages()
	if !_aea {
		return nil
	}
	var _fdcc []*_eg.Image
	for _daaf, _fcd := range _dafg {
		_adce, _cbb := _fcd.FindXObjectImages()
		if _cbb != nil {
			return _cbb
		}
		for _, _gccb := range _eebd {
			if _cbb = _gccb(_egb, &_dafg[_daaf], _adce); _cbb != nil {
				return _cbb
			}
		}
		_fdcc = append(_fdcc, _adce...)
	}
	for _, _cgfa := range _ebdf {
		if _ceb := _cgfa(_egb, _fdcc); _ceb != nil {
			return _ceb
		}
	}
	return nil
}

func _acbd(_bbaca *_b.PdfInfo, _fgdee *_ebf.Document) bool {
	_fgfae, _bgdb := _fgdee.GetPdfInfo()
	if !_bgdb {
		return false
	}
	if _fgfae.InfoDict == nil {
		return false
	}
	_dbcda, _ecfd := _b.NewPdfInfoFromObject(_fgfae.InfoDict)
	if _ecfd != nil {
		return false
	}
	if _bbaca.Creator != nil {
		if _dbcda.Creator == nil || _dbcda.Creator.String() != _bbaca.Creator.String() {
			return false
		}
	}
	if _bbaca.CreationDate != nil {
		if _dbcda.CreationDate == nil || !_dbcda.CreationDate.ToGoTime().Equal(_bbaca.CreationDate.ToGoTime()) {
			return false
		}
	}
	if _bbaca.ModifiedDate != nil {
		if _dbcda.ModifiedDate == nil || !_dbcda.ModifiedDate.ToGoTime().Equal(_bbaca.ModifiedDate.ToGoTime()) {
			return false
		}
	}
	if _bbaca.Producer != nil {
		if _dbcda.Producer == nil || _dbcda.Producer.String() != _bbaca.Producer.String() {
			return false
		}
	}
	if _bbaca.Keywords != nil {
		if _dbcda.Keywords == nil || _dbcda.Keywords.String() != _bbaca.Keywords.String() {
			return false
		}
	}
	if _bbaca.Trapped != nil {
		if _dbcda.Trapped == nil {
			return false
		}
		switch _bbaca.Trapped.String() {
		case "\u0054\u0072\u0075\u0065":
			if _dbcda.Trapped.String() != "\u0054\u0072\u0075\u0065" {
				return false
			}
		case "\u0046\u0061\u006cs\u0065":
			if _dbcda.Trapped.String() != "\u0046\u0061\u006cs\u0065" {
				return false
			}
		default:
			if _dbcda.Trapped.String() != "\u0046\u0061\u006cs\u0065" {
				return false
			}
		}
	}
	if _bbaca.Title != nil {
		if _dbcda.Title == nil || _dbcda.Title.String() != _bbaca.Title.String() {
			return false
		}
	}
	if _bbaca.Subject != nil {
		if _dbcda.Subject == nil || _dbcda.Subject.String() != _bbaca.Subject.String() {
			return false
		}
	}
	return true
}

func _abcba(_efgfe *_b.CompliancePdfReader) ViolatedRule { return _cgf }

func _bgab(_egaf *_eg.Document) {
	_gcdf, _gbc := _egaf.FindCatalog()
	if !_gbc {
		return
	}
	_gcga, _gbc := _gcdf.GetMarkInfo()
	if !_gbc {
		_gcga = _gf.MakeDict()
	}
	_bebe, _gbc := _gf.GetBool(_gcga.Get("\u004d\u0061\u0072\u006b\u0065\u0064"))
	if !_gbc || !bool(*_bebe) {
		_gcga.Set("\u004d\u0061\u0072\u006b\u0065\u0064", _gf.MakeBool(true))
		_gcdf.SetMarkInfo(_gcga)
	}
}

func _dcbg(_ffaac string, _aefba string, _cfaf string) (string, bool) {
	_cbea := _ec.Index(_ffaac, _aefba)
	if _cbea == -1 {
		return "", false
	}
	_cbea += len(_aefba)
	_baba := _ec.Index(_ffaac[_cbea:], _cfaf)
	if _baba == -1 {
		return "", false
	}
	_baba = _cbea + _baba
	return _ffaac[_cbea:_baba], true
}

func _gcad(_bgff *_b.CompliancePdfReader) ViolatedRule {
	for _, _acfdb := range _bgff.GetObjectNums() {
		_adgc, _gfbg := _bgff.GetIndirectObjectByNumber(_acfdb)
		if _gfbg != nil {
			continue
		}
		_faacg, _dgdgb := _gf.GetStream(_adgc)
		if !_dgdgb {
			continue
		}
		_afef, _dgdgb := _gf.GetName(_faacg.Get("\u0054\u0079\u0070\u0065"))
		if !_dgdgb {
			continue
		}
		if *_afef != "\u0058O\u0062\u006a\u0065\u0063\u0074" {
			continue
		}
		if _faacg.Get("\u0053\u004d\u0061s\u006b") != nil {
			return _af("\u0036\u002e\u0034-\u0032", "\u0041\u006e\u0020\u0058\u004f\u0062\u006a\u0065\u0063\u0074\u0020\u0064\u0069\u0063\u0074i\u006f\u006e\u0061\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006eo\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068e \u0053\u004d\u0061\u0073\u006b\u0020\u006b\u0065\u0079\u002e")
		}
	}
	return _cgf
}

type profile2 struct {
	_eggde standardType
	_dddf  Profile2Options
}

func _dbe(_gdbg *Profile3Options) {
	if _gdbg.Now == nil {
		_gdbg.Now = _d.Now
	}
}

var _ Profile = (*Profile3A)(nil)

// Validate checks if provided input document reader matches given PDF/A profile.
func Validate(d *_b.CompliancePdfReader, profile Profile) error {
	return profile.ValidateStandard(d)
}

func _ggbg(_bdga *_b.CompliancePdfReader) (_eagbe ViolatedRule) {
	for _, _abbe := range _bdga.GetObjectNums() {
		_aeae, _egdf := _bdga.GetIndirectObjectByNumber(_abbe)
		if _egdf != nil {
			continue
		}
		_effd, _ebca := _gf.GetStream(_aeae)
		if !_ebca {
			continue
		}
		_cfbd, _ebca := _gf.GetName(_effd.Get("\u0054\u0079\u0070\u0065"))
		if !_ebca {
			continue
		}
		if *_cfbd != "\u0058O\u0062\u006a\u0065\u0063\u0074" {
			continue
		}
		if _effd.Get("\u0052\u0065\u0066") != nil {
			return _af("\u0036.\u0032\u002e\u0036\u002d\u0031", "\u0041\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u0020\u0073\u0068a\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u006e\u0079\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0058O\u0062\u006a\u0065\u0063\u0074s\u002e")
		}
	}
	return _eagbe
}

func _dfcf(_ede, _eaf, _bfb, _gbfg string) (string, bool) {
	_eafb := _ec.Index(_ede, _eaf)
	if _eafb == -1 {
		return "", false
	}
	_ecef := _ec.Index(_ede, _bfb)
	if _ecef == -1 {
		return "", false
	}
	if _ecef < _eafb {
		return "", false
	}
	return _ede[:_eafb] + _eaf + _gbfg + _ede[_ecef:], true
}

func _cbgb(_cacf *_b.CompliancePdfReader) (_cdbb ViolatedRule) {
	for _, _ffdbg := range _cacf.GetObjectNums() {
		_gag, _dcbda := _cacf.GetIndirectObjectByNumber(_ffdbg)
		if _dcbda != nil {
			continue
		}
		_fdgb, _abgd := _gf.GetStream(_gag)
		if !_abgd {
			continue
		}
		_fadb, _abgd := _gf.GetName(_fdgb.Get("\u0054\u0079\u0070\u0065"))
		if !_abgd {
			continue
		}
		if *_fadb != "\u0058O\u0062\u006a\u0065\u0063\u0074" {
			continue
		}
		_cefg, _abgd := _gf.GetName(_fdgb.Get("\u0053u\u0062\u0074\u0079\u0070\u0065"))
		if !_abgd {
			continue
		}
		if *_cefg == "\u0050\u0053" {
			return _af("\u0036.\u0032\u002e\u0037\u002d\u0031", "A \u0063\u006fn\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0066i\u006c\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u006e\u0079\u0020\u0050\u006f\u0073t\u0053c\u0072\u0069\u0070\u0074\u0020\u0058\u004f\u0062j\u0065c\u0074\u0073.")
		}
	}
	return _cdbb
}

func _acbc(_edeeb *_b.CompliancePdfReader) (_bggdc []ViolatedRule) {
	_bdfdb := _edeeb.GetObjectNums()
	for _, _aeee := range _bdfdb {
		_dbcg, _baegb := _edeeb.GetIndirectObjectByNumber(_aeee)
		if _baegb != nil {
			continue
		}
		_gefda, _aecb := _gf.GetDict(_dbcg)
		if !_aecb {
			continue
		}
		_eaea, _aecb := _gf.GetName(_gefda.Get("\u0054\u0079\u0070\u0065"))
		if !_aecb {
			continue
		}
		if _eaea.String() != "\u0046\u0069\u006c\u0065\u0073\u0070\u0065\u0063" {
			continue
		}
		_ddagg, _baegb := _b.NewPdfFilespecFromObj(_gefda)
		if _baegb != nil {
			continue
		}
		if _ddagg.EF != nil {
			if _ddagg.F == nil || _ddagg.UF == nil {
				_bggdc = append(_bggdc, _af("\u0036\u002e\u0038-\u0032", "\u0054h\u0065\u0020\u0066\u0069\u006c\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0063\u0061\u0074i\u006f\u006e\u0020\u0064\u0069\u0063t\u0069\u006fn\u0061\u0072\u0079\u0020\u0066\u006f\u0072\u0020\u0061\u006e\u0020\u0065\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u0069\u006c\u0065\u0020\u0073\u0068\u0061\u006cl\u0020\u0063\u006f\u006e\u0074a\u0069\u006e\u0020t\u0068\u0065\u0020\u0046\u0020a\u006e\u0064\u0020\u0055\u0046\u0020\u006b\u0065\u0079\u0073\u002e"))
				break
			}
			if _ddagg.AFRelationship == nil {
				_bggdc = append(_bggdc, _af("\u0036\u002e\u0038-\u0033", "\u0049\u006e\u0020\u006f\u0072d\u0065\u0072\u0020\u0074\u006f\u0020\u0065\u006e\u0061\u0062\u006c\u0065\u0020i\u0064\u0065nt\u0069\u0066\u0069c\u0061\u0074\u0069o\u006e\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0074\u0068\u0065\u0020fi\u006ce\u0020\u0073\u0070\u0065\u0063\u0069f\u0069c\u0061\u0074\u0069o\u006e\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020c\u006f\u006e\u0074e\u006e\u0074\u0020\u0074\u0068\u0061\u0074\u0020\u0069\u0073\u0020\u0072\u0065\u0066\u0065\u0072\u0072\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0069\u0074\u002c\u0020\u0061\u0020\u006e\u0065\u0077\u0020(\u0072\u0065\u0071\u0075i\u0072\u0065\u0064\u0029\u0020\u006be\u0079\u0020h\u0061\u0073\u0020\u0062e\u0065\u006e\u0020\u0064\u0065\u0066i\u006e\u0065\u0064\u0020a\u006e\u0064\u0020\u0069\u0074s \u0070\u0072e\u0073\u0065n\u0063\u0065\u0020\u0028\u0069\u006e\u0020\u0074\u0068e\u0020\u0064\u0069\u0063\u0074i\u006f\u006e\u0061\u0072\u0079\u0029\u0020\u0069\u0073\u0020\u0072\u0065q\u0075\u0069\u0072e\u0064\u002e"))
				break
			}
		}
	}
	return _bggdc
}

func _dccff(_fbff *_b.PdfFont, _ggabb *_gf.PdfObjectDictionary) ViolatedRule {
	const (
		_deeg = "\u0036.\u0033\u002e\u0037\u002d\u0033"
		_bfdg = "\u0046\u006f\u006e\u0074\u0020\u0070\u0072\u006f\u0067\u0072\u0061\u006d\u0073\u0027\u0020\u0022\u0063\u006d\u0061\u0070\u0022\u0020\u0074\u0061\u0062\u006c\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0061\u006c\u006c\u0020\u0073\u0079\u006d\u0062o\u006c\u0069c\u0020\u0054\u0072\u0075e\u0054\u0079\u0070\u0065\u0020\u0066\u006f\u006e\u0074\u0073 \u0073\u0068\u0061\u006c\u006c\u0020\u0063\u006f\u006et\u0061\u0069\u006e\u0020\u0065\u0078\u0061\u0063\u0074\u006cy\u0020\u006f\u006ee\u0020\u0065\u006e\u0063\u006f\u0064\u0069n\u0067\u002e"
	)
	var _baf string
	if _cgcca, _cdbdc := _gf.GetName(_ggabb.Get("\u0053u\u0062\u0074\u0079\u0070\u0065")); _cdbdc {
		_baf = _cgcca.String()
	}
	if _baf != "\u0054\u0072\u0075\u0065\u0054\u0079\u0070\u0065" {
		return _cgf
	}
	_baafa := _fbff.FontDescriptor()
	_fcbce, _adfa := _gf.GetIntVal(_baafa.Flags)
	if !_adfa {
		_df.Log.Debug("\u0066\u006c\u0061\u0067\u0073 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0066o\u0072\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069\u0070\u0074\u006f\u0072")
		return _af(_deeg, _bfdg)
	}
	_gbfdg := (uint32(_fcbce) >> 3) != 0
	if !_gbfdg {
		return _cgf
	}
	return _cgf
}

// NewProfile2B creates a new Profile2B with the given options.
func NewProfile2B(options *Profile2Options) *Profile2B {
	if options == nil {
		options = DefaultProfile2Options()
	}
	_eaaa(options)
	return &Profile2B{profile2{_dddf: *options, _eggde: _dd()}}
}

func _feb(_cece *_eg.Document) error {
	_adf, _cgb := _cece.FindCatalog()
	if !_cgb {
		return _ee.New("\u0063\u0061\u0074\u0061\u006c\u006f\u0067\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064")
	}
	_, _cgb = _gf.GetDict(_adf.Object.Get("\u0041\u0041"))
	if !_cgb {
		return nil
	}
	_adf.Object.Remove("\u0041\u0041")
	return nil
}

func _aabg(_eafd *_b.CompliancePdfReader) (_egfe []ViolatedRule) {
	_bbgd := _eafd.GetObjectNums()
	for _, _adaf := range _bbgd {
		_ecfc, _bfcb := _eafd.GetIndirectObjectByNumber(_adaf)
		if _bfcb != nil {
			continue
		}
		_dfccg, _fedd := _gf.GetDict(_ecfc)
		if !_fedd {
			continue
		}
		_gafe, _fedd := _gf.GetName(_dfccg.Get("\u0054\u0079\u0070\u0065"))
		if !_fedd {
			continue
		}
		if _gafe.String() != "\u0046\u0069\u006c\u0065\u0073\u0070\u0065\u0063" {
			continue
		}
		if _dfccg.Get("\u0045\u0046") != nil {
			_egfe = append(_egfe, _af("\u0036\u002e\u0031\u002e\u0031\u0031\u002d\u0031", "\u0041 \u0066\u0069\u006c\u0065 \u0073p\u0065\u0063\u0069\u0066\u0069\u0063\u0061\u0074\u0069o\u006e\u0020\u0064\u0069\u0063\u0074\u0069\u006fn\u0061\u0072\u0079\u002c\u0020\u0061\u0073\u0020\u0064\u0065\u0066i\u006e\u0065\u0064\u0020\u0069\u006e\u0020\u0050\u0044\u0046 \u0033\u002e\u0031\u0030\u002e\u0032\u002c\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0063o\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0045\u0046 \u006be\u0079\u002e"))
			break
		}
	}
	_bbfd, _bgcdg := _gfad(_eafd)
	if !_bgcdg {
		return _egfe
	}
	_cebe, _bgcdg := _gf.GetDict(_bbfd.Get("\u004e\u0061\u006de\u0073"))
	if !_bgcdg {
		return _egfe
	}
	if _cebe.Get("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0046\u0069\u006c\u0065\u0073") != nil {
		_egfe = append(_egfe, _af("\u0036\u002e\u0031\u002e\u0031\u0031\u002d\u0032", "\u0041\u0020\u0066i\u006c\u0065\u0027\u0073\u0020\u006e\u0061\u006d\u0065\u0020d\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002c\u0020\u0061\u0073\u0020d\u0065\u0066\u0069\u006ee\u0064\u0020\u0069\u006e\u0020PD\u0046 \u0052\u0065\u0066er\u0065\u006e\u0063\u0065\u0020\u0033\u002e6\u002e\u0033\u002c\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074h\u0065\u0020\u0045m\u0062\u0065\u0064\u0064\u0065\u0064\u0046i\u006c\u0065\u0073\u0020\u006b\u0065\u0079\u002e"))
	}
	return _egfe
}

func _fde(_age *_eg.Document, _fgd standardType, _bfff XmpOptions) error {
	_accf, _acce := _age.FindCatalog()
	if !_acce {
		return nil
	}
	var _adbf *_ebf.Document
	_bceb, _acce := _accf.GetMetadata()
	if !_acce {
		_adbf = _ebf.NewDocument()
	} else {
		var _adc error
		_adbf, _adc = _ebf.LoadDocument(_bceb.Stream)
		if _adc != nil {
			return _adc
		}
	}
	_ccg := _ebf.PdfInfoOptions{InfoDict: _age.Info, PdfVersion: _c.Sprintf("\u0025\u0064\u002e%\u0064", _age.Version.Major, _age.Version.Minor), Copyright: _bfff.Copyright, Overwrite: true}
	_cfe, _acce := _accf.GetMarkInfo()
	if _acce {
		_cdcd, _bcb := _gf.GetBool(_cfe.Get("\u004d\u0061\u0072\u006b\u0065\u0064"))
		if _bcb && bool(*_cdcd) {
			_ccg.Marked = true
		}
	}
	if _cabd := _adbf.SetPdfInfo(&_ccg); _cabd != nil {
		return _cabd
	}
	if _bag := _adbf.SetPdfAID(_fgd._aac, _fgd._bc); _bag != nil {
		return _bag
	}
	_cbf := _ebf.MediaManagementOptions{OriginalDocumentID: _bfff.OriginalDocumentID, DocumentID: _bfff.DocumentID, InstanceID: _bfff.InstanceID, NewDocumentID: !_bfff.NewDocumentVersion, ModifyComment: "O\u0070\u0074\u0069\u006d\u0069\u007ae\u0020\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u0020\u0074\u006f\u0020\u0050D\u0046\u002f\u0041\u0020\u0073\u0074\u0061\u006e\u0064\u0061r\u0064"}
	_adbb, _acce := _gf.GetDict(_age.Info)
	if _acce {
		if _afd, _bbae := _gf.GetString(_adbb.Get("\u004do\u0064\u0044\u0061\u0074\u0065")); _bbae && _afd.String() != "" {
			_acdc, _cadf := _bgd.ParsePdfTime(_afd.String())
			if _cadf != nil {
				return _c.Errorf("\u0069n\u0076\u0061\u006c\u0069d\u0020\u004d\u006f\u0064\u0044a\u0074e\u0020f\u0069\u0065\u006c\u0064\u003a\u0020\u0025w", _cadf)
			}
			_cbf.ModifyDate = _acdc
		}
	}
	if _dec := _adbf.SetMediaManagement(&_cbf); _dec != nil {
		return _dec
	}
	if _cdb := _adbf.SetPdfAExtension(); _cdb != nil {
		return _cdb
	}
	_ece, _bbgg := _adbf.MarshalIndent(_bfff.MarshalPrefix, _bfff.MarshalIndent)
	if _bbgg != nil {
		return _bbgg
	}
	if _acg := _accf.SetMetadata(_ece); _acg != nil {
		return _acg
	}
	return nil
}

func _ecba(_gggd *_b.PdfInfo, _bcbe func() _d.Time) error {
	var _ccda *_b.PdfDate
	if _gggd.CreationDate == nil {
		_bebb, _adgb := _b.NewPdfDateFromTime(_bcbe())
		if _adgb != nil {
			return _adgb
		}
		_ccda = &_bebb
		_gggd.CreationDate = _ccda
	}
	if _gggd.ModifiedDate == nil {
		if _ccda != nil {
			_fdfa, _eeeg := _b.NewPdfDateFromTime(_bcbe())
			if _eeeg != nil {
				return _eeeg
			}
			_ccda = &_fdfa
		}
		_gggd.ModifiedDate = _ccda
	}
	return nil
}

func _eege(_bcee *_eg.Document) {
	if _bcee.ID[0] != "" && _bcee.ID[1] != "" {
		return
	}
	_bcee.UseHashBasedID = true
}

func _gbdae(_fcbeb *_b.CompliancePdfReader) (_gdgce []ViolatedRule) { return _gdgce }

// StandardName gets the name of the standard.
func (_fgae *profile2) StandardName() string {
	return _c.Sprintf("\u0050D\u0046\u002f\u0041\u002d\u0032\u0025s", _fgae._eggde._bc)
}

func _dgbc(_bacba *_b.CompliancePdfReader) (_dabga ViolatedRule) {
	_cbgaf, _cfafa := _gfad(_bacba)
	if !_cfafa {
		return _cgf
	}
	if _cbgaf.Get("\u0041\u0041") != nil {
		return _af("\u0036.\u0035\u002e\u0032\u002d\u0031", "\u0054h\u0065\u0020\u0064\u006fc\u0075m\u0065\u006e\u0074\u0020\u0063\u0061\u0074\u0061\u006co\u0067\u0020\u0073\u0068\u0061\u006c\u006c\u0020n\u006f\u0074\u0020\u0069\u006e\u0063\u006c\u0075\u0064\u0065\u0020a\u006e\u0020\u0041\u0041\u0020\u0065\u006e\u0074\u0072\u0079 \u0066\u006f\u0072\u0020\u0061\u006e\u0020\u0061\u0064\u0064\u0069\u0074\u0069\u006f\u006e\u0061\u006c\u002d\u0061c\u0074\u0069\u006f\u006e\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006fn\u0061r\u0079\u002e")
	}
	return _cgf
}

func _geacd(_efcg *_b.CompliancePdfReader) (_begb []ViolatedRule) {
	var _dadac, _gfec, _ecdg, _cfafe, _egcf, _cfbe, _cfba bool
	_eccc := func() bool { return _dadac && _gfec && _ecdg && _cfafe && _egcf && _cfbe && _cfba }
	_dbbe := func(_bfbf *_gf.PdfObjectDictionary) bool {
		if !_dadac && _bfbf.Get("\u0054\u0052") != nil {
			_dadac = true
			_begb = append(_begb, _af("\u0036.\u0032\u002e\u0035\u002d\u0031", "\u0041\u006e\u0020\u0045\u0078\u0074\u0047\u0053\u0074\u0061\u0074e\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072y\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e \u0074\u0068\u0065\u0020\u0054\u0052\u0020\u006b\u0065\u0079\u002e"))
		}
		if _cbfbg := _bfbf.Get("\u0054\u0052\u0032"); !_gfec && _cbfbg != nil {
			_bgbc, _cdbdcg := _gf.GetName(_cbfbg)
			if !_cdbdcg || (_cdbdcg && *_bgbc != "\u0044e\u0066\u0061\u0075\u006c\u0074") {
				_gfec = true
				_begb = append(_begb, _af("\u0036.\u0032\u002e\u0035\u002d\u0032", "\u0041\u006e \u0045\u0078\u0074G\u0053\u0074\u0061\u0074\u0065 \u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074a\u0069n\u0020\u0074\u0068\u0065\u0020\u0054R2 \u006b\u0065\u0079\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0020\u0076al\u0075e\u0020\u006f\u0074\u0068e\u0072 \u0074h\u0061\u006e \u0044\u0065fa\u0075\u006c\u0074\u002e"))
				if _eccc() {
					return true
				}
			}
		}
		if !_ecdg && _bfbf.Get("\u0048\u0054\u0050") != nil {
			_ecdg = true
			_begb = append(_begb, _af("\u0036.\u0032\u002e\u0035\u002d\u0033", "\u0041\u006e\u0020\u0045\u0078\u0074\u0047\u0053\u0074\u0061\u0074\u0065\u0020\u0064\u0069c\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c \u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020th\u0065\u0020\u0048\u0054\u0050\u0020\u006b\u0065\u0079\u002e"))
		}
		_aeade, _debbc := _gf.GetDict(_bfbf.Get("\u0048\u0054"))
		if _debbc {
			if _fgfg := _aeade.Get("\u0048\u0061\u006cf\u0074\u006f\u006e\u0065\u0054\u0079\u0070\u0065"); !_cfafe && _fgfg != nil {
				_eagda, _dafdf := _gf.GetInt(_fgfg)
				if !_dafdf || (_dafdf && !(*_eagda == 1 || *_eagda == 5)) {
					_begb = append(_begb, _af("\u0020\u0036\u002e\u0032\u002e\u0035\u002d\u0034", "\u0041\u006c\u006c\u0020\u0068\u0061\u006c\u0066\u0074\u006f\u006e\u0065\u0073\u0020\u0069\u006e\u0020\u0061\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u002f\u0041\u002d\u0032\u0020\u0066\u0069\u006ce\u0020\u0073h\u0061\u006c\u006c\u0020h\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u0035 \u0066\u006f\u0072\u0020\u0074\u0068\u0065\u0020\u0048\u0061l\u0066\u0074\u006fn\u0065\u0054\u0079\u0070\u0065\u0020\u006be\u0079\u002e"))
					if _eccc() {
						return true
					}
				}
			}
			if _bffce := _aeade.Get("\u0048\u0061\u006cf\u0074\u006f\u006e\u0065\u004e\u0061\u006d\u0065"); !_egcf && _bffce != nil {
				_egcf = true
				_begb = append(_begb, _af("\u0036.\u0032\u002e\u0035\u002d\u0035", "\u0048\u0061\u006c\u0066\u0074o\u006e\u0065\u0073\u0020\u0069\u006e\u0020a\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u002f\u0041\u002d\u0032\u0020\u0066\u0069\u006c\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061i\u006e\u0020\u0061\u0020\u0048\u0061\u006c\u0066\u0074\u006f\u006e\u0065N\u0061\u006d\u0065\u0020\u006b\u0065y\u002e"))
				if _eccc() {
					return true
				}
			}
		}
		_, _fbfef := _gafg(_efcg)
		var _dgdc bool
		_ebdgd, _debbc := _gf.GetDict(_bfbf.Get("\u0047\u0072\u006fu\u0070"))
		if _debbc {
			_, _bebc := _gf.GetName(_ebdgd.Get("\u0043\u0053"))
			if _bebc {
				_dgdc = true
			}
		}
		if _ffef := _bfbf.Get("\u0042\u004d"); !_cfbe && !_cfba && _ffef != nil {
			_bbcdg, _cgedf := _gf.GetName(_ffef)
			if _cgedf {
				switch _bbcdg.String() {
				case "\u004e\u006f\u0072\u006d\u0061\u006c", "\u0043\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u006c\u0065", "\u004d\u0075\u006c\u0074\u0069\u0070\u006c\u0079", "\u0053\u0063\u0072\u0065\u0065\u006e", "\u004fv\u0065\u0072\u006c\u0061\u0079", "\u0044\u0061\u0072\u006b\u0065\u006e", "\u004ci\u0067\u0068\u0074\u0065\u006e", "\u0043\u006f\u006c\u006f\u0072\u0044\u006f\u0064\u0067\u0065", "\u0043o\u006c\u006f\u0072\u0042\u0075\u0072n", "\u0048a\u0072\u0064\u004c\u0069\u0067\u0068t", "\u0053o\u0066\u0074\u004c\u0069\u0067\u0068t", "\u0044\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0063\u0065", "\u0045x\u0063\u006c\u0075\u0073\u0069\u006fn", "\u0048\u0075\u0065", "\u0053\u0061\u0074\u0075\u0072\u0061\u0074\u0069\u006f\u006e", "\u0043\u006f\u006co\u0072", "\u004c\u0075\u006d\u0069\u006e\u006f\u0073\u0069\u0074\u0079":
				default:
					_cfbe = true
					_begb = append(_begb, _af("\u0036\u002e\u0032\u002e\u0031\u0030\u002d\u0031", "\u004f\u006el\u0079\u0020\u0062\u006c\u0065\u006e\u0064\u0020\u006d\u006f\u0064\u0065\u0073\u0020\u0074h\u0061\u0074\u0020\u0061\u0072\u0065\u0020\u0073\u0070\u0065c\u0069\u0066\u0069ed\u0020\u0069\u006e\u0020\u0049\u0053O\u0020\u0033\u0032\u0030\u0030\u0030\u002d\u0031\u003a2\u0030\u0030\u0038\u0020\u0073h\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0075\u0073\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0074\u0068\u0065 \u0076\u0061\u006c\u0075e\u0020\u006f\u0066\u0020\u0074\u0068e\u0020\u0042M\u0020\u006b\u0065\u0079\u0020\u0069\u006e\u0020\u0061\u006e\u0020\u0065\u0078t\u0065\u006e\u0064\u0065\u0064\u0020\u0067\u0072\u0061\u0070\u0068\u0069\u0063\u0020\u0073\u0074\u0061\u0074\u0065 \u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e"))
					if _eccc() {
						return true
					}
				}
				if _bbcdg.String() != "\u004e\u006f\u0072\u006d\u0061\u006c" && !_fbfef && !_dgdc {
					_cfba = true
					_begb = append(_begb, _af("\u0036\u002e\u0032\u002e\u0031\u0030\u002d\u0032", "\u0049\u0066\u0020\u0074\u0068\u0065 \u0064\u006f\u0063\u0075\u006de\u006e\u0074\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0020P\u0044\u0046\u002f\u0041\u0020\u004f\u0075\u0074\u0070u\u0074\u0049\u006e\u0074\u0065\u006e\u0074\u002c\u0020\u0074\u0068\u0065\u006e\u0020\u0061\u006c\u006c\u0020\u0050\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065\u0063t\u0073\u0020\u0074\u0068a\u0074 \u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020t\u0072\u0061\u006e\u0073\u0070\u0061\u0072\u0065\u006e\u0063\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0069\u006e\u0063l\u0075\u0064\u0065\u0020\u0074\u0068\u0065\u0020\u0047\u0072\u006f\u0075\u0070\u0020\u006b\u0065y\u002c a\u006e\u0064\u0020\u0074\u0068\u0065\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u0064\u0069c\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0074\u0068\u0061\u0074\u0020\u0066\u006f\u0072\u006d\u0073\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006cu\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0061\u0074\u0020\u0047\u0072\u006fu\u0070\u0020\u006b\u0065y\u0020sh\u0061\u006c\u006c\u0020\u0069\u006e\u0063\u006c\u0075d\u0065\u0020\u0061\u0020\u0043\u0053\u0020\u0065\u006e\u0074\u0072\u0079\u0020\u0077\u0068\u006fs\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073\u0068\u0061\u006c\u006c \u0062\u0065 \u0075\u0073\u0065\u0064\u0020\u0061\u0073\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u0062\u006c\u0065\u006e\u0064\u0069n\u0067 \u0063\u006f\u006c\u006f\u0075\u0072\u0020\u0073p\u0061\u0063\u0065\u002e"))
					if _eccc() {
						return true
					}
				}
			}
		}
		if _, _debbc = _gf.GetDict(_bfbf.Get("\u0053\u004d\u0061s\u006b")); !_cfba && _debbc && !_fbfef && !_dgdc {
			_cfba = true
			_begb = append(_begb, _af("\u0036\u002e\u0032\u002e\u0031\u0030\u002d\u0032", "\u0049\u0066\u0020\u0074\u0068\u0065 \u0064\u006f\u0063\u0075\u006de\u006e\u0074\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0020P\u0044\u0046\u002f\u0041\u0020\u004f\u0075\u0074\u0070u\u0074\u0049\u006e\u0074\u0065\u006e\u0074\u002c\u0020\u0074\u0068\u0065\u006e\u0020\u0061\u006c\u006c\u0020\u0050\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065\u0063t\u0073\u0020\u0074\u0068a\u0074 \u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020t\u0072\u0061\u006e\u0073\u0070\u0061\u0072\u0065\u006e\u0063\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0069\u006e\u0063l\u0075\u0064\u0065\u0020\u0074\u0068\u0065\u0020\u0047\u0072\u006f\u0075\u0070\u0020\u006b\u0065y\u002c a\u006e\u0064\u0020\u0074\u0068\u0065\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u0064\u0069c\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0074\u0068\u0061\u0074\u0020\u0066\u006f\u0072\u006d\u0073\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006cu\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0061\u0074\u0020\u0047\u0072\u006fu\u0070\u0020\u006b\u0065y\u0020sh\u0061\u006c\u006c\u0020\u0069\u006e\u0063\u006c\u0075d\u0065\u0020\u0061\u0020\u0043\u0053\u0020\u0065\u006e\u0074\u0072\u0079\u0020\u0077\u0068\u006fs\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073\u0068\u0061\u006c\u006c \u0062\u0065 \u0075\u0073\u0065\u0064\u0020\u0061\u0073\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u0062\u006c\u0065\u006e\u0064\u0069n\u0067 \u0063\u006f\u006c\u006f\u0075\u0072\u0020\u0073p\u0061\u0063\u0065\u002e"))
			if _eccc() {
				return true
			}
		}
		if _gefb := _bfbf.Get("\u0043\u0041"); !_cfba && _gefb != nil && !_fbfef && !_dgdc {
			_gfce, _egcdd := _gf.GetNumberAsFloat(_gefb)
			if _egcdd == nil && _gfce < 1.0 {
				_cfba = true
				_begb = append(_begb, _af("\u0036\u002e\u0032\u002e\u0031\u0030\u002d\u0032", "\u0049\u0066\u0020\u0074\u0068\u0065 \u0064\u006f\u0063\u0075\u006de\u006e\u0074\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0020P\u0044\u0046\u002f\u0041\u0020\u004f\u0075\u0074\u0070u\u0074\u0049\u006e\u0074\u0065\u006e\u0074\u002c\u0020\u0074\u0068\u0065\u006e\u0020\u0061\u006c\u006c\u0020\u0050\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065\u0063t\u0073\u0020\u0074\u0068a\u0074 \u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020t\u0072\u0061\u006e\u0073\u0070\u0061\u0072\u0065\u006e\u0063\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0069\u006e\u0063l\u0075\u0064\u0065\u0020\u0074\u0068\u0065\u0020\u0047\u0072\u006f\u0075\u0070\u0020\u006b\u0065y\u002c a\u006e\u0064\u0020\u0074\u0068\u0065\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u0064\u0069c\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0074\u0068\u0061\u0074\u0020\u0066\u006f\u0072\u006d\u0073\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006cu\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0061\u0074\u0020\u0047\u0072\u006fu\u0070\u0020\u006b\u0065y\u0020sh\u0061\u006c\u006c\u0020\u0069\u006e\u0063\u006c\u0075d\u0065\u0020\u0061\u0020\u0043\u0053\u0020\u0065\u006e\u0074\u0072\u0079\u0020\u0077\u0068\u006fs\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073\u0068\u0061\u006c\u006c \u0062\u0065 \u0075\u0073\u0065\u0064\u0020\u0061\u0073\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u0062\u006c\u0065\u006e\u0064\u0069n\u0067 \u0063\u006f\u006c\u006f\u0075\u0072\u0020\u0073p\u0061\u0063\u0065\u002e"))
				if _eccc() {
					return true
				}
			}
		}
		if _ccaaa := _bfbf.Get("\u0063\u0061"); !_cfba && _ccaaa != nil && !_fbfef && !_dgdc {
			_bbda, _effb := _gf.GetNumberAsFloat(_ccaaa)
			if _effb == nil && _bbda < 1.0 {
				_cfba = true
				_begb = append(_begb, _af("\u0036\u002e\u0032\u002e\u0031\u0030\u002d\u0032", "\u0049\u0066\u0020\u0074\u0068\u0065 \u0064\u006f\u0063\u0075\u006de\u006e\u0074\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0020P\u0044\u0046\u002f\u0041\u0020\u004f\u0075\u0074\u0070u\u0074\u0049\u006e\u0074\u0065\u006e\u0074\u002c\u0020\u0074\u0068\u0065\u006e\u0020\u0061\u006c\u006c\u0020\u0050\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065\u0063t\u0073\u0020\u0074\u0068a\u0074 \u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020t\u0072\u0061\u006e\u0073\u0070\u0061\u0072\u0065\u006e\u0063\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0069\u006e\u0063l\u0075\u0064\u0065\u0020\u0074\u0068\u0065\u0020\u0047\u0072\u006f\u0075\u0070\u0020\u006b\u0065y\u002c a\u006e\u0064\u0020\u0074\u0068\u0065\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u0064\u0069c\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0074\u0068\u0061\u0074\u0020\u0066\u006f\u0072\u006d\u0073\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006cu\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0061\u0074\u0020\u0047\u0072\u006fu\u0070\u0020\u006b\u0065y\u0020sh\u0061\u006c\u006c\u0020\u0069\u006e\u0063\u006c\u0075d\u0065\u0020\u0061\u0020\u0043\u0053\u0020\u0065\u006e\u0074\u0072\u0079\u0020\u0077\u0068\u006fs\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073\u0068\u0061\u006c\u006c \u0062\u0065 \u0075\u0073\u0065\u0064\u0020\u0061\u0073\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u0062\u006c\u0065\u006e\u0064\u0069n\u0067 \u0063\u006f\u006c\u006f\u0075\u0072\u0020\u0073p\u0061\u0063\u0065\u002e"))
				if _eccc() {
					return true
				}
			}
		}
		return false
	}
	for _, _fdaa := range _efcg.PageList {
		_gefbb := _fdaa.Resources
		if _gefbb == nil {
			continue
		}
		if _gefbb.ExtGState == nil {
			continue
		}
		_edag, _afbfe := _gf.GetDict(_gefbb.ExtGState)
		if !_afbfe {
			continue
		}
		_fffe := _edag.Keys()
		for _, _cggfc := range _fffe {
			_cgfcb, _bfab := _gf.GetDict(_edag.Get(_cggfc))
			if !_bfab {
				continue
			}
			if _dbbe(_cgfcb) {
				return _begb
			}
		}
	}
	for _, _bdge := range _efcg.PageList {
		_fbcfa := _bdge.Resources
		if _fbcfa == nil {
			continue
		}
		_efde, _gdgfc := _gf.GetDict(_fbcfa.XObject)
		if !_gdgfc {
			continue
		}
		for _, _gcbc := range _efde.Keys() {
			_eaeg, _bcfa := _gf.GetStream(_efde.Get(_gcbc))
			if !_bcfa {
				continue
			}
			_aebd, _bcfa := _gf.GetDict(_eaeg.Get("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"))
			if !_bcfa {
				continue
			}
			_adfg, _bcfa := _gf.GetDict(_aebd.Get("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"))
			if !_bcfa {
				continue
			}
			for _, _dcbbf := range _adfg.Keys() {
				_edfd, _geea := _gf.GetDict(_adfg.Get(_dcbbf))
				if !_geea {
					continue
				}
				if _dbbe(_edfd) {
					return _begb
				}
			}
		}
	}
	return _begb
}

// Profile3Options are the options that changes the way how optimizer may try to adapt document into PDF/A standard.
type Profile3Options struct {

	// CMYKDefaultColorSpace is an option that refers PDF/A
	CMYKDefaultColorSpace bool

	// Now is a function that returns current time.
	Now func() _d.Time

	// Xmp is the xmp options information.
	Xmp XmpOptions
}

func _gbdb(_bcdc *_eg.Document) error {
	_cbe, _afba := _bcdc.FindCatalog()
	if !_afba {
		return _ee.New("\u0063\u0061\u0074\u0061\u006c\u006f\u0067\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064")
	}
	_cbe.SetVersion()
	return nil
}

func _cdgd(_efgec *_b.CompliancePdfReader, _bggfe standardType) (_gbgc []ViolatedRule) {
	var _deaab, _gfga, _egcac, _bbbf, _bfcf, _eade, _feba bool
	_ggdg := func() bool { return _deaab && _gfga && _egcac && _bbbf && _bfcf && _eade && _feba }
	_badb := map[*_gf.PdfObjectStream]*_dfc.CMap{}
	_gebfg := map[*_gf.PdfObjectStream][]byte{}
	_dddda := map[_gf.PdfObject]*_b.PdfFont{}
	for _, _adbd := range _efgec.GetObjectNums() {
		_gefc, _babed := _efgec.GetIndirectObjectByNumber(_adbd)
		if _babed != nil {
			continue
		}
		_ddff, _cbebe := _gf.GetDict(_gefc)
		if !_cbebe {
			continue
		}
		_ggefa, _cbebe := _gf.GetName(_ddff.Get("\u0054\u0079\u0070\u0065"))
		if !_cbebe {
			continue
		}
		if *_ggefa != "\u0046\u006f\u006e\u0074" {
			continue
		}
		_cdbba, _babed := _b.NewPdfFontFromPdfObject(_ddff)
		if _babed != nil {
			_df.Log.Debug("g\u0065\u0074\u0074\u0069\u006e\u0067 \u0066\u006f\u006e\u0074\u0020\u0066r\u006f\u006d\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0076", _babed)
			continue
		}
		_dddda[_ddff] = _cdbba
	}
	for _, _fbdf := range _efgec.PageList {
		_gedee, _aeff := _fbdf.GetContentStreams()
		if _aeff != nil {
			_df.Log.Debug("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0070\u0061\u0067\u0065\u0020\u0063o\u006e\u0074\u0065\u006e\u0074\u0020\u0073t\u0072\u0065\u0061\u006d\u0073\u0020\u0066\u0061\u0069\u006ce\u0064")
			continue
		}
		for _, _dacdc := range _gedee {
			_ceff := _eb.NewContentStreamParser(_dacdc)
			_efaba, _bcca := _ceff.Parse()
			if _bcca != nil {
				_df.Log.Debug("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074s\u0074r\u0065\u0061\u006d\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076", _bcca)
				continue
			}
			var _cgac bool
			for _, _aada := range *_efaba {
				if _aada.Operand != "\u0054\u0072" {
					continue
				}
				if len(_aada.Params) != 1 {
					_df.Log.Debug("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0074\u0068\u0065\u0020\u0027\u0054\u0072\u0027\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u002c\u0020\u0065\u0078\u0070e\u0063\u0074\u0065\u0064\u0020\u0027\u0031\u0027\u0020\u0062\u0075\u0074 \u0069\u0073\u003a\u0020\u0027\u0025d\u0027", len(_aada.Params))
					continue
				}
				_cdca, _gggc := _gf.GetIntVal(_aada.Params[0])
				if !_gggc {
					_df.Log.Debug("\u0072\u0065\u006e\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u006d\u006f\u0064\u0065\u0020i\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072")
					continue
				}
				if _cdca == 3 {
					_cgac = true
					break
				}
			}
			for _, _fcag := range *_efaba {
				if _fcag.Operand != "\u0054\u0066" {
					continue
				}
				if len(_fcag.Params) != 2 {
					_df.Log.Debug("i\u006eva\u006ci\u0064 \u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066 \u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072s\u0020\u0066\u006f\u0072\u0020\u0074\u0068\u0065\u0020\u0027\u0054f\u0027\u0020\u006fper\u0061\u006e\u0064\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0027\u0032\u0027\u0020\u0069s\u003a \u0027\u0025\u0064\u0027", len(_fcag.Params))
					continue
				}
				_edbd, _gbge := _gf.GetName(_fcag.Params[0])
				if !_gbge {
					_df.Log.Debug("\u0045\u0052\u0052\u004f\u0052\u003a \u0054\u0066\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0047\u0065\u0074\u004ea\u006d\u0065\u0056\u0061\u006c\u0020\u0066a\u0069\u006c\u0065\u0064", _fcag)
					continue
				}
				_fafd, _caafa := _fbdf.Resources.GetFontByName(*_edbd)
				if !_caafa {
					_df.Log.Debug("\u0066\u006f\u006e\u0074\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064")
					continue
				}
				_dagf, _gbge := _gf.GetDict(_fafd)
				if !_gbge {
					_df.Log.Debug("\u0066\u006f\u006e\u0074 d\u0069\u0063\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064")
					continue
				}
				_fefd, _gbge := _dddda[_dagf]
				if !_gbge {
					var _bggb error
					_fefd, _bggb = _b.NewPdfFontFromPdfObject(_dagf)
					if _bggb != nil {
						_df.Log.Debug("\u0067\u0065\u0074\u0074i\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020\u0066\u0072o\u006d \u006f\u0062\u006a\u0065\u0063\u0074\u003a \u0025\u0076", _bggb)
						continue
					}
					_dddda[_dagf] = _fefd
				}
				if !_deaab {
					_egbfg := _agdc(_dagf, _gebfg, _badb)
					if _egbfg != _cgf {
						_gbgc = append(_gbgc, _egbfg)
						_deaab = true
						if _ggdg() {
							return _gbgc
						}
					}
				}
				if !_gfga {
					_gaea := _gdbfa(_dagf)
					if _gaea != _cgf {
						_gbgc = append(_gbgc, _gaea)
						_gfga = true
						if _ggdg() {
							return _gbgc
						}
					}
				}
				if !_egcac {
					_gfcec := _bgbf(_dagf, _gebfg, _badb)
					if _gfcec != _cgf {
						_gbgc = append(_gbgc, _gfcec)
						_egcac = true
						if _ggdg() {
							return _gbgc
						}
					}
				}
				if !_bbbf {
					_cbbdf := _eggf(_dagf, _gebfg, _badb)
					if _cbbdf != _cgf {
						_gbgc = append(_gbgc, _cbbdf)
						_bbbf = true
						if _ggdg() {
							return _gbgc
						}
					}
				}
				if !_bfcf {
					_deag := _cefgd(_fefd, _dagf, _cgac)
					if _deag != _cgf {
						_bfcf = true
						_gbgc = append(_gbgc, _deag)
						if _ggdg() {
							return _gbgc
						}
					}
				}
				if !_eade {
					_cdae := _ccgd(_fefd, _dagf)
					if _cdae != _cgf {
						_eade = true
						_gbgc = append(_gbgc, _cdae)
						if _ggdg() {
							return _gbgc
						}
					}
				}
				if !_feba && (_bggfe._bc == "\u0041" || _bggfe._bc == "\u0055") {
					_cacfca := _affb(_dagf, _gebfg, _badb)
					if _cacfca != _cgf {
						_feba = true
						_gbgc = append(_gbgc, _cacfca)
						if _ggdg() {
							return _gbgc
						}
					}
				}
			}
		}
	}
	return _gbgc
}

// ViolatedRule is the structure that defines violated PDF/A rule.
type ViolatedRule struct {
	RuleNo string
	Detail string
}

func (_ca *documentImages) hasOnlyDeviceGray() bool { return _ca._ef && !_ca._bcd && !_ca._gfc }

func _fad() standardType { return standardType{_aac: 2, _bc: "\u0055"} }

func _fag(_gabe *_b.CompliancePdfReader) ViolatedRule { return _cgf }

func _cdbd(_ceef *_eg.Document) error {
	_cdde, _dagd := _ceef.GetPages()
	if !_dagd {
		return nil
	}
	for _, _eacb := range _cdde {
		_acdf, _cacd := _gf.GetArray(_eacb.Object.Get("\u0041\u006e\u006e\u006f\u0074\u0073"))
		if !_cacd {
			continue
		}
		for _, _fbge := range _acdf.Elements() {
			_fbge = _gf.ResolveReference(_fbge)
			if _, _dagc := _fbge.(*_gf.PdfObjectNull); _dagc {
				continue
			}
			_debb, _ebba := _gf.GetDict(_fbge)
			if !_ebba {
				continue
			}
			_faagg, _ := _gf.GetIntVal(_debb.Get("\u0046"))
			_faagg &= ^(1 << 0)
			_faagg &= ^(1 << 1)
			_faagg &= ^(1 << 5)
			_faagg |= 1 << 2
			_debb.Set("\u0046", _gf.MakeInteger(int64(_faagg)))
			_faab := false
			if _aeb := _debb.Get("\u0053u\u0062\u0074\u0079\u0070\u0065"); _aeb != nil {
				_cdeg, _efgb := _gf.GetName(_aeb)
				if _efgb && _cdeg.String() == "\u0057\u0069\u0064\u0067\u0065\u0074" {
					_faab = true
					if _debb.Get("\u0041\u0041") != nil {
						_debb.Remove("\u0041\u0041")
					}
				}
			}
			if _debb.Get("\u0043") != nil || _debb.Get("\u0049\u0043") != nil {
				_fecdb, _gdac := _bffc(_ceef)
				if !_gdac {
					_debb.Remove("\u0043")
					_debb.Remove("\u0049\u0043")
				} else {
					_ageef, _ggff := _gf.GetIntVal(_fecdb.Get("\u004e"))
					if !_ggff || _ageef != 3 {
						_debb.Remove("\u0043")
						_debb.Remove("\u0049\u0043")
					}
				}
			}
			_gdca, _ebba := _gf.GetDict(_debb.Get("\u0041\u0050"))
			if _ebba {
				_abcf := _gdca.Get("\u004e")
				if _abcf == nil {
					continue
				}
				if len(_gdca.Keys()) > 1 {
					_gdca.Clear()
					_gdca.Set("\u004e", _abcf)
				}
				if _faab {
					_gbag, _ddbb := _gf.GetName(_debb.Get("\u0046\u0054"))
					if _ddbb && *_gbag == "\u0042\u0074\u006e" {
						continue
					}
				}
			}
		}
	}
	return nil
}

func _gdbfa(_ccce *_gf.PdfObjectDictionary) ViolatedRule {
	const (
		_gdaa  = "\u0036\u002e\u0032\u002e\u0031\u0031\u002e\u0033\u002d\u0032"
		_geceb = "IS\u004f\u0020\u0033\u0032\u0030\u0030\u0030\u002d\u0031\u003a\u0032\u0030\u0030\u0038\u002c\u00209\u002e\u0037\u002e\u0034\u002c\u0020\u0054\u0061\u0062\u006c\u0065\u0020\u0031\u0031\u0037\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068a\u0074\u0020\u0061\u006c\u006c\u0020\u0065m\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0043\u0049\u0044\u0046\u006fn\u0074\u0073\u0020\u0069n\u0020t\u0068e\u0020\u0043\u0049D\u0046\u006f\u006e\u0074\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061r\u0079\u0020\u0073\u0068a\u006c\u006c\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0020\u0043\u0049\u0044\u0054\u006fG\u0049\u0044M\u0061\u0070\u0020\u0065\u006e\u0074\u0072\u0079 \u0074\u0068\u0061\u0074\u0020\u0073\u0068\u0061\u006c\u006c \u0062e\u0020\u0061\u0020\u0073t\u0072\u0065\u0061\u006d\u0020\u006d\u0061\u0070p\u0069\u006e\u0067 f\u0072\u006f\u006d \u0043\u0049\u0044\u0073\u0020\u0074\u006f\u0020\u0067\u006c\u0079p\u0068 \u0069\u006e\u0064\u0069c\u0065\u0073\u0020\u006fr\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0020\u0049d\u0065\u006e\u0074\u0069\u0074\u0079\u002c\u0020\u0061\u0073\u0020\u0064\u0065\u0073\u0063\u0072\u0069\u0062\u0065\u0064\u0020\u0069\u006e\u0020\u0049\u0053\u004f\u0020\u0033\u0032\u0030\u0030\u0030\u002d\u0031\u003a\u0032\u0030\u0030\u0038\u002c\u0020\u0039\u002e\u0037\u002e\u0034\u002c\u0020\u0054\u0061\u0062\u006c\u0065\u0020\u0031\u0031\u0037\u002e"
	)
	var _aeadg string
	if _edgca, _cdgf := _gf.GetName(_ccce.Get("\u0053u\u0062\u0074\u0079\u0070\u0065")); _cdgf {
		_aeadg = _edgca.String()
	}
	if _aeadg != "\u0043\u0049\u0044F\u006f\u006e\u0074\u0054\u0079\u0070\u0065\u0032" {
		return _cgf
	}
	if _ccce.Get("C\u0049\u0044\u0054\u006f\u0047\u0049\u0044\u004d\u0061\u0070") == nil {
		return _af(_gdaa, _geceb)
	}
	return _cgf
}

func _abc(_dc *_eg.Document) error {
	_abcb := func(_bdf *_gf.PdfObjectDictionary) error {
		if _bcc := _bdf.Get("\u0053\u004d\u0061s\u006b"); _bcc != nil {
			_bdf.Set("\u0053\u004d\u0061s\u006b", _gf.MakeName("\u004e\u006f\u006e\u0065"))
		}
		_ddb := _bdf.Get("\u0043\u0041")
		if _ddb != nil {
			_bca, _eec := _gf.GetNumberAsFloat(_ddb)
			if _eec != nil {
				_df.Log.Debug("\u0045x\u0074\u0047S\u0074\u0061\u0074\u0065 \u006f\u0062\u006ae\u0063\u0074\u0020\u0043\u0041\u0020\u0076\u0061\u006cue\u0020\u0069\u0073 \u006e\u006ft\u0020\u0061\u0020\u0066\u006c\u006fa\u0074\u003a \u0025\u0076", _eec)
				_bca = 0
			}
			if _bca != 1.0 {
				_bdf.Set("\u0043\u0041", _gf.MakeFloat(1.0))
			}
		}
		_ddb = _bdf.Get("\u0063\u0061")
		if _ddb != nil {
			_daa, _gge := _gf.GetNumberAsFloat(_ddb)
			if _gge != nil {
				_df.Log.Debug("\u0045\u0078t\u0047\u0053\u0074\u0061\u0074\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0027\u0063\u0061\u0027\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0066\u006c\u006f\u0061\u0074\u003a\u0020\u0025\u0076", _gge)
				_daa = 0
			}
			if _daa != 1.0 {
				_bdf.Set("\u0063\u0061", _gf.MakeFloat(1.0))
			}
		}
		_feef := _bdf.Get("\u0042\u004d")
		if _feef != nil {
			_ade, _gcg := _gf.GetName(_feef)
			if !_gcg {
				_df.Log.Debug("E\u0078\u0074\u0047\u0053\u0074\u0061t\u0065\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u0027\u0042\u004d\u0027\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061m\u0065")
				_ade = _gf.MakeName("")
			}
			_caab := _ade.String()
			switch _caab {
			case "\u004e\u006f\u0072\u006d\u0061\u006c", "\u0043\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u006c\u0065":
			default:
				_bdf.Set("\u0042\u004d", _gf.MakeName("\u004e\u006f\u0072\u006d\u0061\u006c"))
			}
		}
		_bba := _bdf.Get("\u0054\u0052")
		if _bba != nil {
			_df.Log.Debug("\u0045\u0078\u0074\u0047\u0053\u0074\u0061\u0074\u0065\u0020\u006f\u0062\u006a\u0065\u0063t\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0073\u0020\u0054\u0052\u0020\u006b\u0065\u0079")
			_bdf.Remove("\u0054\u0052")
		}
		_cge := _bdf.Get("\u0054\u0052\u0032")
		if _cge != nil {
			_afe := _cge.String()
			if _afe != "\u0044e\u0066\u0061\u0075\u006c\u0074" {
				_df.Log.Debug("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074\u0065 o\u0062\u006a\u0065\u0063\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0073 \u0054\u00522\u0020\u006b\u0065y\u0020\u0077\u0069\u0074\u0068\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0074\u0068\u0065r\u0020\u0074ha\u006e\u0020\u0044e\u0066\u0061\u0075\u006c\u0074")
				_bdf.Set("\u0054\u0052\u0032", _gf.MakeName("\u0044e\u0066\u0061\u0075\u006c\u0074"))
			}
		}
		return nil
	}
	_dcb, _ffg := _dc.GetPages()
	if !_ffg {
		return nil
	}
	for _, _aaf := range _dcb {
		_abf, _bga := _aaf.GetResources()
		if !_bga {
			continue
		}
		_cce, _dbbc := _gf.GetDict(_abf.Get("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"))
		if !_dbbc {
			return nil
		}
		_dga := _cce.Keys()
		for _, _cceb := range _dga {
			_fg, _fec := _gf.GetDict(_cce.Get(_cceb))
			if !_fec {
				continue
			}
			_agg := _abcb(_fg)
			if _agg != nil {
				continue
			}
		}
	}
	for _, _dgc := range _dcb {
		_facb, _ddg := _dgc.GetContents()
		if !_ddg {
			return nil
		}
		for _, _eef := range _facb {
			_cgd, _beb := _eef.GetData()
			if _beb != nil {
				continue
			}
			_agd := _eb.NewContentStreamParser(string(_cgd))
			_eagf, _beb := _agd.Parse()
			if _beb != nil {
				continue
			}
			for _, _gcbgf := range *_eagf {
				if len(_gcbgf.Params) == 0 {
					continue
				}
				_, _aab := _gf.GetName(_gcbgf.Params[0])
				if !_aab {
					continue
				}
				_aabb, _ege := _dgc.GetResourcesXObject()
				if !_ege {
					continue
				}
				for _, _ddd := range _aabb.Keys() {
					_bcg, _faf := _gf.GetStream(_aabb.Get(_ddd))
					if !_faf {
						continue
					}
					_aed, _faf := _gf.GetDict(_bcg.Get("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"))
					if !_faf {
						continue
					}
					_bgdd, _faf := _gf.GetDict(_aed.Get("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"))
					if !_faf {
						continue
					}
					for _, _bbaa := range _bgdd.Keys() {
						_bdc, _cd := _gf.GetDict(_bgdd.Get(_bbaa))
						if !_cd {
							continue
						}
						_bdb := _abcb(_bdc)
						if _bdb != nil {
							continue
						}
					}
				}
			}
		}
	}
	return nil
}

// ValidateStandard checks if provided input CompliancePdfReader matches rules that conforms PDF/A-3 standard.
func (_babe *profile3) ValidateStandard(r *_b.CompliancePdfReader) error {
	_ccca := VerificationError{ConformanceLevel: _babe._dggeb._aac, ConformanceVariant: _babe._dggeb._bc}
	if _gcgbe := _gebf(r); _gcgbe != _cgf {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _gcgbe)
	}
	if _befb := _eagc(r); _befb != _cgf {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _befb)
	}
	if _acdcc := _dbaga(r); _acdcc != _cgf {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _acdcc)
	}
	if _eegd := _gcf(r); _eegd != _cgf {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _eegd)
	}
	if _cgeb := _bebbg(r); _cgeb != _cgf {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _cgeb)
	}
	if _defca := _cedg(r); len(_defca) != 0 {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _defca...)
	}
	if _dbbd := _fgbdc(r); len(_dbbd) != 0 {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _dbbd...)
	}
	if _bffd := _eace(r); len(_bffd) != 0 {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _bffd...)
	}
	if _gbfd := _fafg(r); _gbfd != _cgf {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _gbfd)
	}
	if _fadcg := _fgcg(r); len(_fadcg) != 0 {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _fadcg...)
	}
	if _dfba := _abddc(r); len(_dfba) != 0 {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _dfba...)
	}
	if _efa := _ffec(r); _efa != _cgf {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _efa)
	}
	if _fea := _gaba(r); len(_fea) != 0 {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _fea...)
	}
	if _gebd := _geacd(r); len(_gebd) != 0 {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _gebd...)
	}
	if _cgbcd := _abcba(r); _cgbcd != _cgf {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _cgbcd)
	}
	if _cgef := _agca(r); len(_cgef) != 0 {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _cgef...)
	}
	if _egd := _ggba(r); len(_egd) != 0 {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _egd...)
	}
	if _bdfd := _deeeg(r); _bdfd != _cgf {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _bdfd)
	}
	if _gbaa := _fbdd(r); len(_gbaa) != 0 {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _gbaa...)
	}
	if _ddgb := _cdgd(r, _babe._dggeb); len(_ddgb) != 0 {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _ddgb...)
	}
	if _eca := _dfad(r); len(_eca) != 0 {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _eca...)
	}
	if _bgee := _fbbc(r); len(_bgee) != 0 {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _bgee...)
	}
	if _gfdb := _gbdae(r); len(_gfdb) != 0 {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _gfdb...)
	}
	if _dabf := _egbb(r); _dabf != _cgf {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _dabf)
	}
	if _gbce := _eaab(r); len(_gbce) != 0 {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _gbce...)
	}
	if _cecg := _dgbc(r); _cecg != _cgf {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _cecg)
	}
	if _efe := _ffdbc(r, _babe._dggeb, false); len(_efe) != 0 {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _efe...)
	}
	if _babe._dggeb == _ccc() {
		if _efb := _fbgc(r); len(_efb) != 0 {
			_ccca.ViolatedRules = append(_ccca.ViolatedRules, _efb...)
		}
	}
	if _dcea := _acbc(r); len(_dcea) != 0 {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _dcea...)
	}
	if _cbec := _afcd(r); len(_cbec) != 0 {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _cbec...)
	}
	if _gdcg := _accef(r); len(_gdcg) != 0 {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _gdcg...)
	}
	if _befe := _dbfg(r); _befe != _cgf {
		_ccca.ViolatedRules = append(_ccca.ViolatedRules, _befe)
	}
	if len(_ccca.ViolatedRules) > 0 {
		_e.Slice(_ccca.ViolatedRules, func(_dadd, _bgddg int) bool {
			return _ccca.ViolatedRules[_dadd].RuleNo < _ccca.ViolatedRules[_bgddg].RuleNo
		})
		return _ccca
	}
	return nil
}

func _deec(_gcbb *_b.CompliancePdfReader) (_gffd []ViolatedRule) {
	var _gbac, _acgc, _ebad, _eded, _cdee, _bbgda bool
	_ceaa := map[*_gf.PdfObjectStream]struct{}{}
	for _, _abbg := range _gcbb.GetObjectNums() {
		if _gbac && _acgc && _cdee && _ebad && _eded && _bbgda {
			return _gffd
		}
		_fdce, _cga := _gcbb.GetIndirectObjectByNumber(_abbg)
		if _cga != nil {
			continue
		}
		_fggd, _dabfa := _gf.GetStream(_fdce)
		if !_dabfa {
			continue
		}
		if _, _dabfa = _ceaa[_fggd]; _dabfa {
			continue
		}
		_ceaa[_fggd] = struct{}{}
		_afdee, _dabfa := _gf.GetName(_fggd.Get("\u0053u\u0062\u0054\u0079\u0070\u0065"))
		if !_dabfa {
			continue
		}
		if !_eded {
			if _fggd.Get("\u0052\u0065\u0066") != nil {
				_gffd = append(_gffd, _af("\u0036.\u0032\u002e\u0036\u002d\u0031", "\u0041\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u0020\u0073\u0068a\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u006e\u0079\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0058O\u0062\u006a\u0065\u0063\u0074s\u002e"))
				_eded = true
			}
		}
		if _afdee.String() == "\u0050\u0053" {
			if !_bbgda {
				_gffd = append(_gffd, _af("\u0036.\u0032\u002e\u0037\u002d\u0031", "A \u0063\u006fn\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0066i\u006c\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u006e\u0079\u0020\u0050\u006f\u0073t\u0053c\u0072\u0069\u0070\u0074\u0020\u0058\u004f\u0062j\u0065c\u0074\u0073."))
				_bbgda = true
				continue
			}
		}
		if _afdee.String() == "\u0046\u006f\u0072\u006d" {
			if _acgc && _ebad && _eded {
				continue
			}
			if !_acgc && _fggd.Get("\u004f\u0050\u0049") != nil {
				_gffd = append(_gffd, _af("\u0036.\u0032\u002e\u0034\u002d\u0032", "\u0041\u006e\u0020\u0058\u004f\u0062\u006a\u0065\u0063\u0074\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072y\u0020\u0028\u0049\u006d\u0061\u0067\u0065\u0020\u006f\u0072\u0020\u0046\u006f\u0072\u006d\u0029\u0020\u0073\u0068\u0061\u006cl\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074h\u0065\u0020\u004fP\u0049\u0020\u006b\u0065\u0079\u002e"))
				_acgc = true
			}
			if !_ebad {
				if _fggd.Get("\u0050\u0053") != nil {
					_ebad = true
				}
				if _ddfb := _fggd.Get("\u0053\u0075\u0062\u0074\u0079\u0070\u0065\u0032"); _ddfb != nil && !_ebad {
					if _efeg, _eadcb := _gf.GetName(_ddfb); _eadcb && *_efeg == "\u0050\u0053" {
						_ebad = true
					}
				}
				if _ebad {
					_gffd = append(_gffd, _af("\u0036.\u0032\u002e\u0035\u002d\u0031", "A\u0020\u0066\u006fr\u006d\u0020\u0058\u004f\u0062\u006a\u0065\u0063\u0074\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006ft\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e \u0074\u0068\u0065\u0020\u0053\u0075\u0062\u0074\u0079\u0070\u0065\u0032\u0020\u006b\u0065\u0079 \u0077\u0069\u0074\u0068\u0020a\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0050\u0053\u0020o\u0072\u0020\u0074\u0068e\u0020\u0050\u0053\u0020\u006b\u0065\u0079\u002e"))
				}
			}
			continue
		}
		if _afdee.String() != "\u0049\u006d\u0061g\u0065" {
			continue
		}
		if !_gbac && _fggd.Get("\u0041\u006c\u0074\u0065\u0072\u006e\u0061\u0074\u0065\u0073") != nil {
			_gffd = append(_gffd, _af("\u0036.\u0032\u002e\u0034\u002d\u0031", "\u0041\u006e\u0020\u0049m\u0061\u0067\u0065\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006et\u0061\u0069\u006e\u0020\u0074h\u0065\u0020\u0041\u006c\u0074\u0065\u0072\u006e\u0061\u0074\u0065\u0073\u0020\u006b\u0065\u0079\u002e"))
			_gbac = true
		}
		if !_cdee && _fggd.Get("I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065") != nil {
			_bfba, _ccde := _gf.GetBool(_fggd.Get("I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065"))
			if _ccde && bool(*_bfba) {
				continue
			}
			_gffd = append(_gffd, _af("\u0036.\u0032\u002e\u0034\u002d\u0033", "\u0049\u0066 a\u006e\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0063o\u006e\u0074\u0061\u0069n\u0073\u0020\u0074\u0068e \u0049\u006et\u0065r\u0070\u006f\u006c\u0061\u0074\u0065 \u006b\u0065\u0079,\u0020\u0069t\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020b\u0065\u0020\u0066\u0061\u006c\u0073\u0065\u002e"))
			_cdee = true
		}
	}
	return _gffd
}

func _cgbc(_aafd *_eg.Document) error {
	for _, _eecgf := range _aafd.Objects {
		_bcgd, _bdce := _gf.GetDict(_eecgf)
		if !_bdce {
			continue
		}
		_agea := _bcgd.Get("\u0054\u0079\u0070\u0065")
		if _agea == nil {
			continue
		}
		if _feefd, _fcbd := _gf.GetName(_agea); _fcbd && _feefd.String() != "\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d" {
			continue
		}
		_deba, _gcgg := _gf.GetBool(_bcgd.Get("\u004ee\u0065d\u0041\u0070\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0073"))
		if _gcgg && bool(*_deba) {
			_bcgd.Set("\u004ee\u0065d\u0041\u0070\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0073", _gf.MakeBool(false))
		}
		if _bcgd.Get("\u0058\u0046\u0041") != nil {
			_bcgd.Remove("\u0058\u0046\u0041")
		}
	}
	_cdg, _bda := _aafd.FindCatalog()
	if !_bda {
		return _ee.New("\u0063\u0061\u0074\u0061\u006c\u006f\u0067\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064")
	}
	if _cdg.Object.Get("\u004e\u0065\u0065\u0064\u0073\u0052\u0065\u006e\u0064e\u0072\u0069\u006e\u0067") != nil {
		_cdg.Object.Remove("\u004e\u0065\u0065\u0064\u0073\u0052\u0065\u006e\u0064e\u0072\u0069\u006e\u0067")
	}
	return nil
}

// NewProfile3A creates a new Profile3A with given options.
func NewProfile3A(options *Profile3Options) *Profile3A {
	if options == nil {
		options = DefaultProfile3Options()
	}
	_dbe(options)
	return &Profile3A{profile3{_adcf: *options, _dggeb: _ccc()}}
}

// NewProfile3B creates a new Profile3B with the given options.
func NewProfile3B(options *Profile3Options) *Profile3B {
	if options == nil {
		options = DefaultProfile3Options()
	}
	_dbe(options)
	return &Profile3B{profile3{_adcf: *options, _dggeb: _cb()}}
}

type profile1 struct {
	_bdg  standardType
	_egcg Profile1Options
}

func _af(_eda string, _da string) ViolatedRule { return ViolatedRule{RuleNo: _eda, Detail: _da} }

func _aafc(_afab *_b.PdfFont, _fafc *_gf.PdfObjectDictionary) ViolatedRule {
	const (
		_egeag = "\u0036.\u0033\u002e\u0035\u002d\u0033"
		_edee  = "\u0046\u006f\u0072\u0020\u0061\u006c\u006c\u0020\u0043\u0049\u0044\u0046\u006f\u006e\u0074\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0073 \u0072e\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0064\u0020\u0077i\u0074\u0068\u0069n\u0020\u0061\u0020c\u006f\u006e\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0066\u0069l\u0065\u002c\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006et\u0020\u0064\u0065s\u0063\u0072\u0069\u0070\u0074\u006f\u0072\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061r\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0069\u006e\u0063\u006c\u0075\u0064\u0065\u0020\u0061\u0020\u0043\u0049\u0044\u0053\u0065\u0074\u0020s\u0074\u0072\u0065\u0061\u006d\u0020\u0069\u0064\u0065\u006e\u0074\u0069\u0066\u0079\u0069\u006eg\u0020\u0077\u0068i\u0063\u0068\u0020\u0043\u0049\u0044\u0073 \u0061\u0072e\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0069\u006e \u0074\u0068\u0065\u0020\u0065\u006d\u0062\u0065\u0064d\u0065\u0064\u0020\u0043\u0049D\u0046\u006f\u006e\u0074\u0020\u0066\u0069l\u0065,\u0020\u0061\u0073 \u0064\u0065\u0073\u0063\u0072\u0069b\u0065\u0064 \u0069\u006e\u0020\u0050\u0044\u0046\u0020\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063e\u0020\u0054ab\u006c\u0065\u0020\u0035.\u00320\u002e"
	)
	var _aafda string
	if _dgadg, _baad := _gf.GetName(_fafc.Get("\u0053u\u0062\u0074\u0079\u0070\u0065")); _baad {
		_aafda = _dgadg.String()
	}
	switch _aafda {
	case "\u0043\u0049\u0044F\u006f\u006e\u0074\u0054\u0079\u0070\u0065\u0030", "\u0043\u0049\u0044F\u006f\u006e\u0074\u0054\u0079\u0070\u0065\u0032":
		_dacb := _afab.FontDescriptor()
		if _dacb.CIDSet == nil {
			return _af(_egeag, _edee)
		}
		return _cgf
	default:
		return _cgf
	}
}

func _ccgd(_aceb *_b.PdfFont, _agddd *_gf.PdfObjectDictionary) ViolatedRule {
	const (
		_bgcdf = "\u0036\u002e\u0032\u002e\u0031\u0031\u002e\u0036\u002d\u0033"
		_fgec  = "\u0041l\u006c\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0069\u0063\u0020\u0054\u0072u\u0065\u0054\u0079p\u0065\u0020\u0066\u006f\u006e\u0074s\u0020\u0073h\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0079\u0020\u0061\u006e\u0020\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065n\u0074\u0072\u0079\u0020\u0069n\u0020\u0074\u0068e\u0020\u0066\u006f\u006e\u0074 \u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e"
	)
	var _edfe string
	if _aeef, _acffa := _gf.GetName(_agddd.Get("\u0053u\u0062\u0074\u0079\u0070\u0065")); _acffa {
		_edfe = _aeef.String()
	}
	if _edfe != "\u0054\u0072\u0075\u0065\u0054\u0079\u0070\u0065" {
		return _cgf
	}
	_adacd := _aceb.FontDescriptor()
	_ffefc, _gdgad := _gf.GetIntVal(_adacd.Flags)
	if !_gdgad {
		_df.Log.Debug("\u0066\u006c\u0061\u0067\u0073 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0066o\u0072\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069\u0070\u0074\u006f\u0072")
		return _af(_bgcdf, _fgec)
	}
	_gfcea := (uint32(_ffefc) >> 3) & 1
	_fdaac := _gfcea != 0
	if !_fdaac {
		return _cgf
	}
	if _agddd.Get("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067") != nil {
		return _af(_bgcdf, _fgec)
	}
	return _cgf
}

func _aecee(_fdgad *_b.CompliancePdfReader) ViolatedRule {
	for _, _abfeg := range _fdgad.PageList {
		_fegb := _abfeg.GetContentStreamObjs()
		for _, _efbg := range _fegb {
			_efbg = _gf.TraceToDirectObject(_efbg)
			var _bebbd string
			switch _ggeg := _efbg.(type) {
			case *_gf.PdfObjectString:
				_bebbd = _ggeg.Str()
			case *_gf.PdfObjectStream:
				_dfa, _ddabg := _gf.GetName(_gf.TraceToDirectObject(_ggeg.Get("\u0046\u0069\u006c\u0074\u0065\u0072")))
				if _ddabg {
					if *_dfa == _gf.StreamEncodingFilterNameLZW {
						return _af("\u0036\u002e\u0031\u002e\u0031\u0030\u002d\u0032", "\u0054h\u0065\u0020L\u005a\u0057\u0044\u0065c\u006f\u0064\u0065 \u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0073\u0068al\u006c\u0020\u006eo\u0074\u0020b\u0065\u0020\u0070\u0065\u0072\u006di\u0074\u0074e\u0064\u002e")
					}
				}
				_agbe, _fecea := _gf.DecodeStream(_ggeg)
				if _fecea != nil {
					_df.Log.Debug("\u0045r\u0072\u003a\u0020\u0025\u0076", _fecea)
					continue
				}
				_bebbd = string(_agbe)
			default:
				_df.Log.Debug("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0020\u0073\u0074\u0072\u0065a\u006d\u0020\u006f\u0062\u006a\u0065\u0063t\u003a\u0020\u0025\u0054", _efbg)
				continue
			}
			_gdbb := _eb.NewContentStreamParser(_bebbd)
			_ecag, _dedd := _gdbb.Parse()
			if _dedd != nil {
				_df.Log.Debug("\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u006f\u006et\u0065\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d:\u0020\u0025\u0076", _dedd)
				continue
			}
			for _, _gfdf := range *_ecag {
				if !(_gfdf.Operand == "\u0042\u0049" && len(_gfdf.Params) == 1) {
					continue
				}
				_fded, _bdfb := _gfdf.Params[0].(*_eb.ContentStreamInlineImage)
				if !_bdfb {
					continue
				}
				_bgdcd, _ccfg := _fded.GetEncoder()
				if _ccfg != nil {
					_df.Log.Debug("\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006ee\u0020\u0069\u006d\u0061\u0067\u0065 \u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076", _ccfg)
					continue
				}
				if _bgdcd.GetFilterName() == _gf.StreamEncodingFilterNameLZW {
					return _af("\u0036\u002e\u0031\u002e\u0031\u0030\u002d\u0032", "\u0054h\u0065\u0020L\u005a\u0057\u0044\u0065c\u006f\u0064\u0065 \u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0073\u0068al\u006c\u0020\u006eo\u0074\u0020b\u0065\u0020\u0070\u0065\u0072\u006di\u0074\u0074e\u0064\u002e")
				}
			}
		}
	}
	return _cgf
}

func _feec(_egae *_b.CompliancePdfReader) (_fbecb []ViolatedRule) {
	var _faba, _aedaa bool
	_fcbec := func() bool { return _faba && _aedaa }
	for _, _daba := range _egae.GetObjectNums() {
		_gdcd, _dbebd := _egae.GetIndirectObjectByNumber(_daba)
		if _dbebd != nil {
			_df.Log.Debug("G\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0077\u0069\u0074\u0068 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0064\u0020fa\u0069\u006c\u0065d\u003a \u0025\u0076", _daba, _dbebd)
			continue
		}
		_ecfec, _dfd := _gf.GetDict(_gdcd)
		if !_dfd {
			continue
		}
		_dbgc, _dfd := _gf.GetName(_ecfec.Get("\u0054\u0079\u0070\u0065"))
		if !_dfd {
			continue
		}
		if *_dbgc != "\u0041\u0063\u0074\u0069\u006f\u006e" {
			continue
		}
		_bagce, _dfd := _gf.GetName(_ecfec.Get("\u0053"))
		if !_dfd {
			if !_faba {
				_fbecb = append(_fbecb, _af("\u0036.\u0036\u002e\u0031\u002d\u0031", "\u0054\u0068\u0065\u0020\u004c\u0061\u0075\u006e\u0063\u0068\u002c\u0020\u0053\u006f\u0075\u006e\u0064\u002c\u0020\u004d\u006f\u0076\u0069\u0065\u002c\u0020\u0052\u0065\u0073\u0065\u0074\u0046o\u0072\u006d\u002c\u0020\u0049\u006d\u0070\u006f\u0072\u0074\u0044\u0061\u0074\u0061\u0020\u0061\u006e\u0064 \u004a\u0061\u0076a\u0053\u0063\u0072\u0069\u0070\u0074\u0020\u0061\u0063\u0074\u0069\u006f\u006e\u0073\u0020s\u0068\u0061\u006c\u006c\u0020\u006eo\u0074\u0020\u0062\u0065\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074e\u0064\u002e \u0041\u0064\u0064\u0069\u0074\u0069\u006f\u006e\u0061\u006c\u006c\u0079\u002c\u0020th\u0065\u0020\u0064\u0065p\u0072\u0065\u0063\u0061\u0074\u0065\u0064\u0020s\u0065\u0074\u002d\u0073\u0074\u0061\u0074\u0065\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u002d\u006f\u0070\u0020\u0061\u0063\u0074\u0069\u006f\u006e\u0073\u0020\u0073\u0068a\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0062e\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074e\u0064\u002e\u0020T\u0068\u0065\u0020\u0048\u0069\u0064\u0065\u0020a\u0063\u0074\u0069\u006f\u006e \u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064\u002e"))
				_faba = true
				if _fcbec() {
					return _fbecb
				}
			}
			continue
		}
		switch _b.PdfActionType(*_bagce) {
		case _b.ActionTypeLaunch, _b.ActionTypeSound, _b.ActionTypeMovie, _b.ActionTypeResetForm, _b.ActionTypeImportData, _b.ActionTypeJavaScript:
			if !_faba {
				_fbecb = append(_fbecb, _af("\u0036.\u0036\u002e\u0031\u002d\u0031", "\u0054\u0068\u0065\u0020\u004c\u0061\u0075\u006e\u0063\u0068\u002c\u0020\u0053\u006f\u0075\u006e\u0064\u002c\u0020\u004d\u006f\u0076\u0069\u0065\u002c\u0020\u0052\u0065\u0073\u0065\u0074\u0046o\u0072\u006d\u002c\u0020\u0049\u006d\u0070\u006f\u0072\u0074\u0044\u0061\u0074\u0061\u0020\u0061\u006e\u0064 \u004a\u0061\u0076a\u0053\u0063\u0072\u0069\u0070\u0074\u0020\u0061\u0063\u0074\u0069\u006f\u006e\u0073\u0020s\u0068\u0061\u006c\u006c\u0020\u006eo\u0074\u0020\u0062\u0065\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074e\u0064\u002e \u0041\u0064\u0064\u0069\u0074\u0069\u006f\u006e\u0061\u006c\u006c\u0079\u002c\u0020th\u0065\u0020\u0064\u0065p\u0072\u0065\u0063\u0061\u0074\u0065\u0064\u0020s\u0065\u0074\u002d\u0073\u0074\u0061\u0074\u0065\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u002d\u006f\u0070\u0020\u0061\u0063\u0074\u0069\u006f\u006e\u0073\u0020\u0073\u0068a\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0062e\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074e\u0064\u002e\u0020T\u0068\u0065\u0020\u0048\u0069\u0064\u0065\u0020a\u0063\u0074\u0069\u006f\u006e \u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064\u002e"))
				_faba = true
				if _fcbec() {
					return _fbecb
				}
			}
			continue
		case _b.ActionTypeNamed:
			if !_aedaa {
				_bcced, _ccaf := _gf.GetName(_ecfec.Get("\u004e"))
				if !_ccaf {
					_fbecb = append(_fbecb, _af("\u0036.\u0036\u002e\u0031\u002d\u0032", "N\u0061\u006d\u0065\u0064\u0020\u0061\u0063t\u0069\u006f\u006e\u0073\u0020\u006f\u0074\u0068e\u0072\u0020\u0074h\u0061\u006e\u0020\u004e\u0065\u0078\u0074\u0050\u0061\u0067\u0065\u002c\u0020P\u0072\u0065v\u0050\u0061\u0067\u0065\u002c\u0020\u0046\u0069\u0072\u0073\u0074\u0050a\u0067e\u002c\u0020\u0061\u006e\u0064\u0020\u004c\u0061\u0073\u0074\u0050\u0061\u0067\u0065\u0020\u0073h\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064\u002e"))
					_aedaa = true
					if _fcbec() {
						return _fbecb
					}
					continue
				}
				switch *_bcced {
				case "\u004e\u0065\u0078\u0074\u0050\u0061\u0067\u0065", "\u0050\u0072\u0065\u0076\u0050\u0061\u0067\u0065", "\u0046i\u0072\u0073\u0074\u0050\u0061\u0067e", "\u004c\u0061\u0073\u0074\u0050\u0061\u0067\u0065":
				default:
					_fbecb = append(_fbecb, _af("\u0036.\u0036\u002e\u0031\u002d\u0032", "N\u0061\u006d\u0065\u0064\u0020\u0061\u0063t\u0069\u006f\u006e\u0073\u0020\u006f\u0074\u0068e\u0072\u0020\u0074h\u0061\u006e\u0020\u004e\u0065\u0078\u0074\u0050\u0061\u0067\u0065\u002c\u0020P\u0072\u0065v\u0050\u0061\u0067\u0065\u002c\u0020\u0046\u0069\u0072\u0073\u0074\u0050a\u0067e\u002c\u0020\u0061\u006e\u0064\u0020\u004c\u0061\u0073\u0074\u0050\u0061\u0067\u0065\u0020\u0073h\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064\u002e"))
					_aedaa = true
					if _fcbec() {
						return _fbecb
					}
					continue
				}
			}
		}
	}
	return _fbecb
}

func _acfb(_adec *_eg.Document) error {
	_bace, _bbd := _adec.FindCatalog()
	if !_bbd {
		return _ee.New("\u0063\u0061\u0074\u0061\u006c\u006f\u0067\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064")
	}
	_ddcd, _bbd := _gf.GetDict(_bace.Object.Get("\u0050\u0065\u0072m\u0073"))
	if _bbd {
		_abaf := _gf.MakeDict()
		_eaef := _ddcd.Keys()
		for _, _gbba := range _eaef {
			if _gbba.String() == "\u0055\u0052\u0033" || _gbba.String() == "\u0044\u006f\u0063\u004d\u0044\u0050" {
				_abaf.Set(_gbba, _ddcd.Get(_gbba))
			}
		}
		_bace.Object.Set("\u0050\u0065\u0072m\u0073", _abaf)
	}
	return nil
}

// NewProfile1A creates a new Profile1A with given options.
func NewProfile1A(options *Profile1Options) *Profile1A {
	if options == nil {
		options = DefaultProfile1Options()
	}
	_gbdbc(options)
	return &Profile1A{profile1{_egcg: *options, _bdg: _dfg()}}
}

func _fggcf(_gbaf *_b.CompliancePdfReader) (_afbf []ViolatedRule) {
	_dbga := _gbaf.ParserMetadata()
	if _dbga.HasInvalidSubsectionHeader() {
		_afbf = append(_afbf, _af("\u0036.\u0031\u002e\u0034\u002d\u0031", "\u006e\u0020\u0061\u0020\u0063\u0072\u006f\u0073\u0073\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0073\u0075\u0062\u0073\u0065c\u0074\u0069\u006f\u006e\u0020h\u0065a\u0064\u0065\u0072\u0020t\u0068\u0065\u0020\u0073\u0074\u0061\u0072t\u0069\u006e\u0067\u0020\u006fb\u006a\u0065\u0063\u0074 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020\u0072\u0061n\u0067e\u0020s\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u0065\u0064\u0020\u0062\u0079\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0053\u0050\u0041C\u0045\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074e\u0072\u0020\u0028\u0032\u0030\u0068\u0029\u002e"))
	}
	if _dbga.HasInvalidSeparationAfterXRef() {
		_afbf = append(_afbf, _af("\u0036.\u0031\u002e\u0034\u002d\u0032", "\u0054\u0068\u0065 \u0078\u0072\u0065\u0066\u0020\u006b\u0065\u0079\u0077\u006fr\u0064\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020\u0063\u0072\u006f\u0073s\u0020\u0072\u0065\u0066e\u0072\u0065\u006e\u0063\u0065 s\u0075b\u0073\u0065\u0063ti\u006f\u006e\u0020\u0068\u0065\u0061\u0064e\u0072\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u0065\u0064\u0020\u0062\u0079 \u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0045\u004fL\u0020\u006d\u0061\u0072\u006b\u0065\u0072\u002e"))
	}
	return _afbf
}

func _gbdbc(_aeag *Profile1Options) {
	if _aeag.Now == nil {
		_aeag.Now = _d.Now
	}
}

func _eggf(_dgbb *_gf.PdfObjectDictionary, _egadg map[*_gf.PdfObjectStream][]byte, _cgff map[*_gf.PdfObjectStream]*_dfc.CMap) ViolatedRule {
	const (
		_ccfgd = "\u0036\u002e\u0032\u002e\u0031\u0031\u002e\u0033\u002d\u0034"
		_ecdb  = "\u0046\u006f\u0072\u0020\u0074\u0068\u006fs\u0065\u0020\u0043\u004d\u0061\u0070\u0073\u0020\u0074\u0068\u0061\u0074\u0020\u0061\u0072e\u0020\u0065m\u0062\u0065\u0064de\u0064\u002c\u0020\u0074\u0068\u0065\u0020\u0069\u006et\u0065\u0067\u0065\u0072 \u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0057\u004d\u006f\u0064\u0065\u0020\u0065\u006e\u0074r\u0079\u0020i\u006e t\u0068\u0065\u0020CM\u0061\u0070\u0020\u0064\u0069\u0063\u0074\u0069o\u006ea\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0069\u0064\u0065\u006e\u0074\u0069\u0063\u0061\u006c\u0020\u0074\u006f \u0074h\u0065\u0020\u0057\u004d\u006f\u0064e\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0074h\u0065\u0020\u0065\u006d\u0062\u0065\u0064\u0064ed\u0020\u0043\u004d\u0061\u0070\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u002e"
	)
	var _efabg string
	if _ccfbf, _daadd := _gf.GetName(_dgbb.Get("\u0053u\u0062\u0074\u0079\u0070\u0065")); _daadd {
		_efabg = _ccfbf.String()
	}
	if _efabg != "\u0054\u0079\u0070e\u0030" {
		return _cgf
	}
	_cgdd := _dgbb.Get("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067")
	if _, _dede := _gf.GetName(_cgdd); _dede {
		return _cgf
	}
	_dcbe, _aeffe := _gf.GetStream(_cgdd)
	if !_aeffe {
		return _af(_ccfgd, _ecdb)
	}
	_bgbgc, _eegf := _dcge(_dcbe, _egadg, _cgff)
	if _eegf != nil {
		return _af(_ccfgd, _ecdb)
	}
	_aaaae, _bbcf := _gf.GetIntVal(_dcbe.Get("\u0057\u004d\u006fd\u0065"))
	_beaee, _deca := _bgbgc.WMode()
	if _bbcf && _deca {
		if _beaee != _aaaae {
			return _af(_ccfgd, _ecdb)
		}
	}
	if (_bbcf && !_deca) || (!_bbcf && _deca) {
		return _af(_ccfgd, _ecdb)
	}
	return _cgf
}

// Part gets the PDF/A version level.
func (_ccaa *profile3) Part() int { return _ccaa._dggeb._aac }

func _fbbc(_gefea *_b.CompliancePdfReader) (_cffcg []ViolatedRule) {
	for _, _fdde := range _gefea.GetObjectNums() {
		_fcea, _babd := _gefea.GetIndirectObjectByNumber(_fdde)
		if _babd != nil {
			continue
		}
		_gfag, _addgb := _gf.GetDict(_fcea)
		if !_addgb {
			continue
		}
		_efae, _addgb := _gf.GetName(_gfag.Get("\u0054\u0079\u0070\u0065"))
		if !_addgb {
			continue
		}
		if _efae.String() != "\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d" {
			continue
		}
		_ddbgd, _addgb := _gf.GetBool(_gfag.Get("\u004ee\u0065d\u0041\u0070\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0073"))
		if _addgb && bool(*_ddbgd) {
			_cffcg = append(_cffcg, _af("\u0036.\u0034\u002e\u0031\u002d\u0033", "\u0054\u0068\u0065\u0020\u004e\u0065e\u0064\u0041\u0070\u0070\u0065a\u0072\u0061\u006e\u0063\u0065\u0073\u0020\u0066\u006c\u0061\u0067\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0069\u006e\u0074\u0065\u0072\u0061\u0063\u0074\u0069\u0076e\u0020\u0066\u006f\u0072\u006d \u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0065\u0069\u0074\u0068\u0065\u0072\u0020\u006e\u006f\u0074\u0020b\u0065\u0020\u0070\u0072\u0065se\u006e\u0074\u0020\u006f\u0072\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0066\u0061\u006c\u0073\u0065\u002e"))
		}
		if _gfag.Get("\u0058\u0046\u0041") != nil {
			_cffcg = append(_cffcg, _af("\u0036.\u0034\u002e\u0032\u002d\u0031", "\u0054\u0068\u0065\u0020\u0064o\u0063\u0075\u006d\u0065\u006e\u0074\u0027\u0073\u0020i\u006e\u0074\u0065\u0072\u0061\u0063\u0074\u0069\u0076\u0065\u0020\u0066\u006f\u0072\u006d\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061r\u0079\u0020t\u0068\u0061\u0074\u0020f\u006f\u0072\u006d\u0073\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065 \u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d \u006b\u0065\u0079\u0020i\u006e\u0020\u0074\u0068\u0065\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u0027\u0073\u0020\u0043\u0061\u0074\u0061\u006c\u006f\u0067\u0020\u006f\u0066 \u0061 \u0050\u0044F\u002fA\u002d\u0032\u0020\u0066ile\u002c\u0020\u0069\u0066\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u002c\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006ft\u0020\u0063\u006f\u006e\u0074a\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0058\u0046\u0041\u0020\u006b\u0065y."))
		}
	}
	_egffg, _fadgb := _gfad(_gefea)
	if _fadgb && _egffg.Get("\u004e\u0065\u0065\u0064\u0073\u0052\u0065\u006e\u0064e\u0072\u0069\u006e\u0067") != nil {
		_cffcg = append(_cffcg, _af("\u0036.\u0034\u002e\u0032\u002d\u0032", "\u0041\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u0027\u0073\u0020\u0043\u0061\u0074\u0061\u006cog\u0020s\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006et\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u004e\u0065\u0065\u0064\u0073\u0052\u0065\u006e\u0064e\u0072\u0069\u006e\u0067\u0020\u006b\u0065\u0079\u002e"))
	}
	return _cffcg
}

// Error implements error interface.
func (_cg VerificationError) Error() string {
	_ed := _ec.Builder{}
	_ed.WriteString("\u0053\u0074\u0061\u006e\u0064\u0061\u0072\u0064\u003a\u0020")
	_ed.WriteString(_c.Sprintf("\u0050\u0044\u0046\u002f\u0041\u002d\u0025\u0064\u0025\u0073", _cg.ConformanceLevel, _cg.ConformanceVariant))
	_ed.WriteString("\u0020\u0056\u0069\u006f\u006c\u0061\u0074\u0065\u0064\u0020\u0072\u0075l\u0065\u0073\u003a\u0020")
	for _ebcf, _db := range _cg.ViolatedRules {
		_ed.WriteString(_db.String())
		if _ebcf != len(_cg.ViolatedRules)-1 {
			_ed.WriteRune('\n')
		}
	}
	return _ed.String()
}

func _afcd(_dfec *_b.CompliancePdfReader) (_gfccc []ViolatedRule) {
	_bccc := func(_fgbb *_gf.PdfObjectDictionary, _gcge *[]string, _degd *[]ViolatedRule) error {
		_ecdc := _fgbb.Get("\u004e\u0061\u006d\u0065")
		if _ecdc == nil || len(_ecdc.String()) == 0 {
			*_degd = append(*_degd, _af("\u0036\u002e\u0039-\u0031", "\u0045\u0061\u0063\u0068\u0020o\u0070\u0074\u0069\u006f\u006e\u0061l\u0020\u0063\u006f\u006e\u0074\u0065\u006et\u0020\u0063\u006fn\u0066\u0069\u0067\u0075r\u0061\u0074\u0069\u006f\u006e\u0020d\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0063o\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u004e\u0061\u006d\u0065\u0020\u006b\u0065\u0079\u002e"))
		}
		for _, _gecg := range *_gcge {
			if _gecg == _ecdc.String() {
				*_degd = append(*_degd, _af("\u0036\u002e\u0039-\u0032", "\u0045\u0061\u0063\u0068\u0020\u006f\u0070\u0074\u0069\u006f\u006e\u0061l\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0020\u0063\u006f\u006e\u0066\u0069\u0067\u0075\u0072a\u0074\u0069\u006fn\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0073\u0068a\u006c\u006c\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020N\u0061\u006d\u0065\u0020\u006b\u0065\u0079\u002c w\u0068\u006fs\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020s\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0075ni\u0071\u0075\u0065 \u0061\u006d\u006f\u006e\u0067\u0073\u0074\u0020\u0061\u006c\u006c\u0020o\u0070\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0063\u006fn\u0074\u0065\u006e\u0074 \u0063\u006f\u006e\u0066\u0069\u0067u\u0072\u0061\u0074\u0069\u006f\u006e\u0020\u0064\u0069\u0063\u0074i\u006fn\u0061\u0072\u0069\u0065\u0073\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0074\u0068e\u0020\u0050\u0044\u0046\u002fA\u002d\u0032\u0020\u0066\u0069l\u0065\u002e"))
			} else {
				*_gcge = append(*_gcge, _ecdc.String())
			}
		}
		if _fgbb.Get("\u0041\u0053") != nil {
			*_degd = append(*_degd, _af("\u0036\u002e\u0039-\u0034", "Th\u0065\u0020\u0041\u0053\u0020\u006b\u0065y \u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0061\u0070\u0070\u0065\u0061r\u0020\u0069\u006e\u0020\u0061\u006e\u0079\u0020\u006f\u0070\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0063\u006f\u006et\u0065\u006e\u0074\u0020\u0063\u006fn\u0066\u0069\u0067\u0075\u0072\u0061\u0074\u0069\u006fn\u0020d\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e"))
		}
		return nil
	}
	_bbgae, _eeddd := _gfad(_dfec)
	if !_eeddd {
		return _gfccc
	}
	_ccbc, _eeddd := _gf.GetDict(_bbgae.Get("\u004f\u0043\u0050r\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073"))
	if !_eeddd {
		return _gfccc
	}
	var _cgfab []string
	_ggee, _eeddd := _gf.GetDict(_ccbc.Get("\u0044"))
	if _eeddd {
		_bccc(_ggee, &_cgfab, &_gfccc)
	}
	_debf, _eeddd := _gf.GetArray(_ccbc.Get("\u0043o\u006e\u0066\u0069\u0067\u0073"))
	if _eeddd {
		for _baegc := 0; _baegc < _debf.Len(); _baegc++ {
			_acbdg, _bgbd := _gf.GetDict(_debf.Get(_baegc))
			if !_bgbd {
				continue
			}
			_bccc(_acbdg, &_cgfab, &_gfccc)
		}
	}
	return _gfccc
}

// Conformance gets the PDF/A conformance.
func (_accd *profile2) Conformance() string { return _accd._eggde._bc }

// Profile3B is the implementation of the PDF/A-3B standard profile.
// Implements model.StandardImplementer, Profile interfaces.
type Profile3B struct{ profile3 }

// StandardName gets the name of the standard.
func (_acda *profile1) StandardName() string {
	return _c.Sprintf("\u0050D\u0046\u002f\u0041\u002d\u0031\u0025s", _acda._bdg._bc)
}

// NewProfile1B creates a new Profile1B with the given options.
func NewProfile1B(options *Profile1Options) *Profile1B {
	if options == nil {
		options = DefaultProfile1Options()
	}
	_gbdbc(options)
	return &Profile1B{profile1{_egcg: *options, _bdg: _de()}}
}

func _bbag(_dgbaf *_eg.Document) error {
	_cagbe, _ffcc := _dgbaf.GetPages()
	if !_ffcc {
		return nil
	}
	for _, _eagb := range _cagbe {
		_fdee, _cea := _gf.GetArray(_eagb.Object.Get("\u0041\u006e\u006e\u006f\u0074\u0073"))
		if !_cea {
			continue
		}
		for _, _fffc := range _fdee.Elements() {
			_fffc = _gf.ResolveReference(_fffc)
			if _, _dfcc := _fffc.(*_gf.PdfObjectNull); _dfcc {
				continue
			}
			_baa, _ccgb := _gf.GetDict(_fffc)
			if !_ccgb {
				continue
			}
			_gaag, _ := _gf.GetIntVal(_baa.Get("\u0046"))
			_gaag &= ^(1 << 0)
			_gaag &= ^(1 << 1)
			_gaag &= ^(1 << 5)
			_gaag &= ^(1 << 8)
			_gaag |= 1 << 2
			_baa.Set("\u0046", _gf.MakeInteger(int64(_gaag)))
			_cefe := false
			if _geac := _baa.Get("\u0053u\u0062\u0074\u0079\u0070\u0065"); _geac != nil {
				_ffbb, _cfdd := _gf.GetName(_geac)
				if _cfdd && _ffbb.String() == "\u0057\u0069\u0064\u0067\u0065\u0074" {
					_cefe = true
					if _baa.Get("\u0041\u0041") != nil {
						_baa.Remove("\u0041\u0041")
					}
					if _baa.Get("\u0041") != nil {
						_baa.Remove("\u0041")
					}
				}
				if _cfdd && _ffbb.String() == "\u0054\u0065\u0078\u0074" {
					_eggb, _ := _gf.GetIntVal(_baa.Get("\u0046"))
					_eggb |= 1 << 3
					_eggb |= 1 << 4
					_baa.Set("\u0046", _gf.MakeInteger(int64(_eggb)))
				}
			}
			_ggef, _ccgb := _gf.GetDict(_baa.Get("\u0041\u0050"))
			if _ccgb {
				_gcegf := _ggef.Get("\u004e")
				if _gcegf == nil {
					continue
				}
				if len(_ggef.Keys()) > 1 {
					_ggef.Clear()
					_ggef.Set("\u004e", _gcegf)
				}
				if _cefe {
					_cgca, _babf := _gf.GetName(_baa.Get("\u0046\u0054"))
					if _babf && *_cgca == "\u0042\u0074\u006e" {
						continue
					}
				}
			}
		}
	}
	return nil
}

func _daad(_eggg *_eg.Document, _fdd bool) error {
	_fdbd, _cbac := _eggg.GetPages()
	if !_cbac {
		return nil
	}
	for _, _eefa := range _fdbd {
		_fcdaa := _eefa.FindXObjectForms()
		for _, _dgb := range _fcdaa {
			_agf, _fbag := _b.NewXObjectFormFromStream(_dgb)
			if _fbag != nil {
				return _fbag
			}
			_fbcg, _fbag := _agf.GetContentStream()
			if _fbag != nil {
				return _fbag
			}
			_edf := _eb.NewContentStreamParser(string(_fbcg))
			_afa, _fbag := _edf.Parse()
			if _fbag != nil {
				return _fbag
			}
			_bbfg, _fbag := _fdef(_agf.Resources, _afa, _fdd)
			if _fbag != nil {
				return _fbag
			}
			if len(_bbfg) == 0 {
				continue
			}
			if _fbag = _agf.SetContentStream(_bbfg, _gf.NewFlateEncoder()); _fbag != nil {
				return _fbag
			}
			_agf.ToPdfObject()
		}
	}
	return nil
}

// Profile1A is the implementation of the PDF/A-1A standard profile.
// Implements model.StandardImplementer, Profile interfaces.
type Profile1A struct{ profile1 }

func _aged(_dgee *_b.CompliancePdfReader) (_ceaf []ViolatedRule) {
	var _ggcba, _dgacc, _badcef, _debdb, _edbad, _adcga, _fcg bool
	_fbaa := func() bool { return _ggcba && _dgacc && _badcef && _debdb && _edbad && _adcga && _fcg }
	for _, _fccb := range _dgee.PageList {
		_gdggg, _ggea := _fccb.GetAnnotations()
		if _ggea != nil {
			_df.Log.Trace("\u006c\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0061\u006en\u006f\u0074\u0061\u0074\u0069\u006f\u006es\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076", _ggea)
			continue
		}
		for _, _cfdec := range _gdggg {
			if !_ggcba {
				switch _cfdec.GetContext().(type) {
				case *_b.PdfAnnotationFileAttachment, *_b.PdfAnnotationSound, *_b.PdfAnnotationMovie, nil:
					_ceaf = append(_ceaf, _af("\u0036.\u0035\u002e\u0032\u002d\u0031", "\u0041\u006e\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0074\u0079\u0070\u0065\u0073\u0020\u006e\u006f\u0074 \u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020i\u006e\u0020\u0050\u0044\u0046\u0020\u0052\u0065\u0066\u0065\u0072\u0065\u006ec\u0065\u0020\u0073\u0068\u0061l\u006c\u0020\u006e\u006f\u0074 \u0062\u0065\u0020p\u0065\u0072m\u0069\u0074\u0074\u0065\u0064\u002e\u0020\u0041d\u0064\u0069\u0074\u0069\u006f\u006e\u0061\u006c\u006c\u0079\u002c\u0020\u0074\u0068\u0065\u0020F\u0069\u006c\u0065\u0041\u0074\u0074\u0061\u0063\u0068\u006de\u006e\u0074\u002c\u0020\u0053\u006f\u0075\u006e\u0064\u0020\u0061\u006e\u0064\u0020\u004d\u006f\u0076\u0069e\u0020\u0074\u0079\u0070\u0065s \u0073ha\u006c\u006c\u0020\u006eo\u0074\u0020\u0062\u0065\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064\u002e"))
					_ggcba = true
					if _fbaa() {
						return _ceaf
					}
				}
			}
			_gfdc, _eecd := _gf.GetDict(_cfdec.GetContainingPdfObject())
			if !_eecd {
				continue
			}
			if !_dgacc {
				_abdb, _cdag := _gf.GetFloatVal(_gfdc.Get("\u0043\u0041"))
				if _cdag && _abdb != 1.0 {
					_ceaf = append(_ceaf, _af("\u0036.\u0035\u002e\u0033\u002d\u0031", "\u0041\u006e\u0020\u0061\u006e\u006e\u006ft\u0061\u0074\u0069\u006f\u006e\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0073h\u0061\u006c\u006c\u0020\u006eo\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e \u0074\u0068\u0065\u0020\u0043\u0041\u0020\u006b\u0065\u0079\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0074\u0068\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0031\u002e\u0030\u002e"))
					_dgacc = true
					if _fbaa() {
						return _ceaf
					}
				}
			}
			if !_badcef {
				_ggcf, _bfda := _gf.GetIntVal(_gfdc.Get("\u0046"))
				if !(_bfda && _ggcf&4 == 4 && _ggcf&1 == 0 && _ggcf&2 == 0 && _ggcf&32 == 0) {
					_ceaf = append(_ceaf, _af("\u0036.\u0035\u002e\u0033\u002d\u0032", "\u0041\u006e\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074i\u006f\u006e\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0073\u0068\u0061\u006c\u006c\u0020\u0063\u006f\u006e\u0074\u0061\u0069n\u0020\u0074\u0068\u0065\u0020\u0046\u0020\u006b\u0065\u0079\u002e\u0020\u0054\u0068\u0065\u0020\u0046\u0020\u006b\u0065\u0079\u0027\u0073\u0020\u0050\u0072\u0069\u006e\u0074\u0020\u0066\u006c\u0061\u0067\u0020\u0062\u0069\u0074\u0020\u0073h\u0061\u006c\u006c\u0020\u0062\u0065 s\u0065\u0074\u0020\u0074\u006f\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0069\u0074\u0073\u0020\u0048\u0069\u0064\u0064\u0065\u006e\u002c\u0020I\u006e\u0076\u0069\u0073\u0069\u0062\u006c\u0065\u0020\u0061\u006e\u0064\u0020\u004e\u006f\u0056\u0069\u0065\u0077\u0020\u0066\u006c\u0061\u0067\u0020b\u0069\u0074\u0073 \u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0073e\u0074\u0020t\u006f\u0020\u0030\u002e"))
					_badcef = true
					if _fbaa() {
						return _ceaf
					}
				}
			}
			if !_debdb {
				_aaed, _geab := _gf.GetDict(_gfdc.Get("\u0041\u0050"))
				if _geab {
					_efbbb := _aaed.Get("\u004e")
					if _efbbb == nil || len(_aaed.Keys()) > 1 {
						_ceaf = append(_ceaf, _af("\u0036.\u0035\u002e\u0033\u002d\u0034", "\u0046\u006f\u0072\u0020\u0061\u006c\u006c\u0020\u0061\u006e\u006e\u006ft\u0061\u0074\u0069\u006f\u006e\u0020d\u0069\u0063t\u0069\u006f\u006ea\u0072\u0069\u0065\u0073 \u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0069\u006e\u0067\u0020\u0061\u006e\u0020\u0041\u0050 \u006b\u0065\u0079\u002c\u0020\u0074\u0068\u0065\u0020\u0061p\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0074\u0068\u0061\u0074\u0020\u0069\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0073\u0020\u0061\u0073\u0020it\u0073\u0020\u0076\u0061\u006cu\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0063\u006f\u006e\u0074\u0061i\u006e\u0020o\u006e\u006c\u0079\u0020\u0074\u0068\u0065\u0020\u004e\u0020\u006b\u0065\u0079\u002e\u0020\u0049\u0066\u0020\u0061\u006e\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0064i\u0063\u0074\u0069o\u006e\u0061\u0072\u0079\u0027\u0073\u0020\u0053\u0075\u0062ty\u0070\u0065\u0020\u006b\u0065\u0079\u0020\u0068\u0061\u0073\u0020\u0061\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0057\u0069\u0064g\u0065\u0074\u0020\u0061\u006e\u0064\u0020\u0069\u0074s\u0020\u0046\u0054 \u006be\u0079\u0020\u0068\u0061\u0073\u0020\u0061\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020B\u0074\u006e,\u0020\u0074he \u0076a\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u004e\u0020\u006b\u0065\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0061\u0070\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0020\u0073\u0075\u0062\u0064\u0069\u0063\u0074\u0069\u006fn\u0061r\u0079; \u006f\u0074\u0068\u0065\u0072\u0077\u0069s\u0065\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020th\u0065\u0020N\u0020\u006b\u0065y\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062e\u0020\u0061\u006e\u0020\u0061\u0070\u0070\u0065\u0061\u0072\u0061n\u0063\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u002e"))
						_debdb = true
						if _fbaa() {
							return _ceaf
						}
						continue
					}
					_, _ddgc := _cfdec.GetContext().(*_b.PdfAnnotationWidget)
					if _ddgc {
						_eegcg, _eccge := _gf.GetName(_gfdc.Get("\u0046\u0054"))
						if _eccge && *_eegcg == "\u0042\u0074\u006e" {
							if _, _cgaa := _gf.GetDict(_efbbb); !_cgaa {
								_ceaf = append(_ceaf, _af("\u0036.\u0035\u002e\u0033\u002d\u0034", "\u0046\u006f\u0072\u0020\u0061\u006c\u006c\u0020\u0061\u006e\u006e\u006ft\u0061\u0074\u0069\u006f\u006e\u0020d\u0069\u0063t\u0069\u006f\u006ea\u0072\u0069\u0065\u0073 \u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0069\u006e\u0067\u0020\u0061\u006e\u0020\u0041\u0050 \u006b\u0065\u0079\u002c\u0020\u0074\u0068\u0065\u0020\u0061p\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0074\u0068\u0061\u0074\u0020\u0069\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0073\u0020\u0061\u0073\u0020it\u0073\u0020\u0076\u0061\u006cu\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0063\u006f\u006e\u0074\u0061i\u006e\u0020o\u006e\u006c\u0079\u0020\u0074\u0068\u0065\u0020\u004e\u0020\u006b\u0065\u0079\u002e\u0020\u0049\u0066\u0020\u0061\u006e\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0064i\u0063\u0074\u0069o\u006e\u0061\u0072\u0079\u0027\u0073\u0020\u0053\u0075\u0062ty\u0070\u0065\u0020\u006b\u0065\u0079\u0020\u0068\u0061\u0073\u0020\u0061\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0057\u0069\u0064g\u0065\u0074\u0020\u0061\u006e\u0064\u0020\u0069\u0074s\u0020\u0046\u0054 \u006be\u0079\u0020\u0068\u0061\u0073\u0020\u0061\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020B\u0074\u006e,\u0020\u0074he \u0076a\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u004e\u0020\u006b\u0065\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0061\u0070\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0020\u0073\u0075\u0062\u0064\u0069\u0063\u0074\u0069\u006fn\u0061r\u0079; \u006f\u0074\u0068\u0065\u0072\u0077\u0069s\u0065\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020th\u0065\u0020N\u0020\u006b\u0065y\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062e\u0020\u0061\u006e\u0020\u0061\u0070\u0070\u0065\u0061\u0072\u0061n\u0063\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u002e"))
								_debdb = true
								if _fbaa() {
									return _ceaf
								}
								continue
							}
						}
					}
					_, _eddg := _gf.GetStream(_efbbb)
					if !_eddg {
						_ceaf = append(_ceaf, _af("\u0036.\u0035\u002e\u0033\u002d\u0034", "\u0046\u006f\u0072\u0020\u0061\u006c\u006c\u0020\u0061\u006e\u006e\u006ft\u0061\u0074\u0069\u006f\u006e\u0020d\u0069\u0063t\u0069\u006f\u006ea\u0072\u0069\u0065\u0073 \u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0069\u006e\u0067\u0020\u0061\u006e\u0020\u0041\u0050 \u006b\u0065\u0079\u002c\u0020\u0074\u0068\u0065\u0020\u0061p\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0074\u0068\u0061\u0074\u0020\u0069\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0073\u0020\u0061\u0073\u0020it\u0073\u0020\u0076\u0061\u006cu\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0063\u006f\u006e\u0074\u0061i\u006e\u0020o\u006e\u006c\u0079\u0020\u0074\u0068\u0065\u0020\u004e\u0020\u006b\u0065\u0079\u002e\u0020\u0049\u0066\u0020\u0061\u006e\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0064i\u0063\u0074\u0069o\u006e\u0061\u0072\u0079\u0027\u0073\u0020\u0053\u0075\u0062ty\u0070\u0065\u0020\u006b\u0065\u0079\u0020\u0068\u0061\u0073\u0020\u0061\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0057\u0069\u0064g\u0065\u0074\u0020\u0061\u006e\u0064\u0020\u0069\u0074s\u0020\u0046\u0054 \u006be\u0079\u0020\u0068\u0061\u0073\u0020\u0061\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020B\u0074\u006e,\u0020\u0074he \u0076a\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u004e\u0020\u006b\u0065\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0061\u0070\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0020\u0073\u0075\u0062\u0064\u0069\u0063\u0074\u0069\u006fn\u0061r\u0079; \u006f\u0074\u0068\u0065\u0072\u0077\u0069s\u0065\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020th\u0065\u0020N\u0020\u006b\u0065y\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062e\u0020\u0061\u006e\u0020\u0061\u0070\u0070\u0065\u0061\u0072\u0061n\u0063\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u002e"))
						_debdb = true
						if _fbaa() {
							return _ceaf
						}
						continue
					}
				}
			}
			if !_edbad {
				if _gfdc.Get("\u0043") != nil || _gfdc.Get("\u0049\u0043") != nil {
					_dfgff, _cbfbd := _debdc(_dgee)
					if !_cbfbd {
						_ceaf = append(_ceaf, _af("\u0036.\u0035\u002e\u0033\u002d\u0033", "\u0041\u006e\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079\u0020\u0073\u0068\u0061l\u006c\u0020\u006e\u006f\u0074\u0020\u0063\u006fn\u0074a\u0069\u006e\u0020t\u0068e\u0020\u0043\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u006f\u0072\u0020\u0074\u0068e\u0020\u0049\u0043\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0075\u006e\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0065\u0020\u0063o\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0044\u0065\u0073\u0074\u004f\u0075\u0074\u0070\u0075\u0074\u0050\u0072\u006ff\u0069\u006ce\u0020\u0069\u006e\u0020\u0074h\u0065\u0020\u0050\u0044\u0046\u002f\u0041\u002d\u0031\u0020\u004f\u0075\u0074\u0070\u0075\u0074\u0049\u006e\u0074\u0065\u006e\u0074\u0020\u0064\u0069\u0063t\u0069\u006f\u006e\u0061\u0072\u0079\u002c\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0069n\u0020\u0036\u002e\u0032\u002e2\u002c\u0020\u0069\u0073\u0020\u0052\u0047\u0042."))
						_edbad = true
						if _fbaa() {
							return _ceaf
						}
					} else {
						_ebec, _fgbda := _gf.GetIntVal(_dfgff.Get("\u004e"))
						if !_fgbda || _ebec != 3 {
							_ceaf = append(_ceaf, _af("\u0036.\u0035\u002e\u0033\u002d\u0033", "\u0041\u006e\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079\u0020\u0073\u0068\u0061l\u006c\u0020\u006e\u006f\u0074\u0020\u0063\u006fn\u0074a\u0069\u006e\u0020t\u0068e\u0020\u0043\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u006f\u0072\u0020\u0074\u0068e\u0020\u0049\u0043\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0075\u006e\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0065\u0020\u0063o\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0044\u0065\u0073\u0074\u004f\u0075\u0074\u0070\u0075\u0074\u0050\u0072\u006ff\u0069\u006ce\u0020\u0069\u006e\u0020\u0074h\u0065\u0020\u0050\u0044\u0046\u002f\u0041\u002d\u0031\u0020\u004f\u0075\u0074\u0070\u0075\u0074\u0049\u006e\u0074\u0065\u006e\u0074\u0020\u0064\u0069\u0063t\u0069\u006f\u006e\u0061\u0072\u0079\u002c\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0069n\u0020\u0036\u002e\u0032\u002e2\u002c\u0020\u0069\u0073\u0020\u0052\u0047\u0042."))
							_edbad = true
							if _fbaa() {
								return _ceaf
							}
						}
					}
				}
			}
			_fgef, _gcecf := _cfdec.GetContext().(*_b.PdfAnnotationWidget)
			if !_gcecf {
				continue
			}
			if !_adcga {
				if _fgef.A != nil {
					_ceaf = append(_ceaf, _af("\u0036.\u0036\u002e\u0031\u002d\u0033", "A \u0057\u0069d\u0067\u0065\u0074\u0020\u0061\u006e\u006e\u006f\u0074a\u0074\u0069\u006f\u006e\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0069\u006ec\u006cu\u0064\u0065\u0020\u0061\u006e\u0020\u0041\u0020e\u006et\u0072\u0079."))
					_adcga = true
					if _fbaa() {
						return _ceaf
					}
				}
			}
			if !_fcg {
				if _fgef.AA != nil {
					_ceaf = append(_ceaf, _af("\u0036.\u0036\u002e\u0032\u002d\u0031", "\u0041\u0020\u0057\u0069\u0064\u0067\u0065\u0074\u0020\u0061\u006e\u006eo\u0074\u0061\u0074i\u006f\u006e\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061r\u0079\u0020\u0073h\u0061\u006c\u006c\u0020n\u006f\u0074\u0020\u0069\u006e\u0063\u006c\u0075\u0064\u0065\u0020\u0061\u006e\u0020\u0041\u0041\u0020\u0065\u006e\u0074\u0072\u0079\u0020\u0066\u006f\u0072\u0020\u0061\u006e\u0020\u0061d\u0064\u0069\u0074\u0069\u006f\u006e\u0061\u006c\u002d\u0061\u0063t\u0069\u006f\u006e\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e"))
					_fcg = true
					if _fbaa() {
						return _ceaf
					}
				}
			}
		}
	}
	return _ceaf
}

func _deeeg(_fdbde *_b.CompliancePdfReader) (_dcd ViolatedRule) {
	for _, _baabd := range _fdbde.GetObjectNums() {
		_bdgd, _fcade := _fdbde.GetIndirectObjectByNumber(_baabd)
		if _fcade != nil {
			continue
		}
		_feadb, _agcg := _gf.GetStream(_bdgd)
		if !_agcg {
			continue
		}
		_aeca, _agcg := _gf.GetName(_feadb.Get("\u0054\u0079\u0070\u0065"))
		if !_agcg {
			continue
		}
		if *_aeca != "\u0058O\u0062\u006a\u0065\u0063\u0074" {
			continue
		}
		_, _agcg = _gf.GetName(_feadb.Get("\u004f\u0050\u0049"))
		if _agcg {
			return _af("\u0036.\u0032\u002e\u0039\u002d\u0031", "\u0041\u0020\u0066\u006f\u0072m\u0020\u0058\u004f\u0062\u006a\u0065c\u0074\u0020\u0064i\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006ft\u0020\u0063\u006f\u006e\u0074\u0061\u0069n\u0020\u0061\u006e\u0079\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067\u003a \u002d\u0020\u0074\u0068\u0065\u0020O\u0050\u0049\u0020\u006b\u0065\u0079\u003b \u002d\u0020\u0074\u0068e \u0053u\u0062\u0074\u0079\u0070\u0065\u0032 ke\u0079 \u0077\u0069t\u0068\u0020\u0061\u0020\u0076\u0061l\u0075\u0065\u0020\u006f\u0066\u0020\u0050\u0053\u003b\u0020\u002d \u0074\u0068\u0065\u0020\u0050\u0053\u0020\u006b\u0065\u0079\u002e")
		}
		_dffa, _agcg := _gf.GetName(_feadb.Get("\u0053\u0075\u0062\u0074\u0079\u0070\u0065\u0032"))
		if !_agcg {
			continue
		}
		if *_dffa == "\u0050\u0053" {
			return _af("\u0036.\u0032\u002e\u0039\u002d\u0031", "\u0041\u0020\u0066\u006f\u0072m\u0020\u0058\u004f\u0062\u006a\u0065c\u0074\u0020\u0064i\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006ft\u0020\u0063\u006f\u006e\u0074\u0061\u0069n\u0020\u0061\u006e\u0079\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067\u003a \u002d\u0020\u0074\u0068\u0065\u0020O\u0050\u0049\u0020\u006b\u0065\u0079\u003b \u002d\u0020\u0074\u0068e \u0053u\u0062\u0074\u0079\u0070\u0065\u0032 ke\u0079 \u0077\u0069t\u0068\u0020\u0061\u0020\u0076\u0061l\u0075\u0065\u0020\u006f\u0066\u0020\u0050\u0053\u003b\u0020\u002d \u0074\u0068\u0065\u0020\u0050\u0053\u0020\u006b\u0065\u0079\u002e")
		}
		if _feadb.Get("\u0050\u0053") != nil {
			return _af("\u0036.\u0032\u002e\u0039\u002d\u0031", "\u0041\u0020\u0066\u006f\u0072m\u0020\u0058\u004f\u0062\u006a\u0065c\u0074\u0020\u0064i\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006ft\u0020\u0063\u006f\u006e\u0074\u0061\u0069n\u0020\u0061\u006e\u0079\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067\u003a \u002d\u0020\u0074\u0068\u0065\u0020O\u0050\u0049\u0020\u006b\u0065\u0079\u003b \u002d\u0020\u0074\u0068e \u0053u\u0062\u0074\u0079\u0070\u0065\u0032 ke\u0079 \u0077\u0069t\u0068\u0020\u0061\u0020\u0076\u0061l\u0075\u0065\u0020\u006f\u0066\u0020\u0050\u0053\u003b\u0020\u002d \u0074\u0068\u0065\u0020\u0050\u0053\u0020\u006b\u0065\u0079\u002e")
		}
	}
	return _dcd
}

func _bbbe(_fefaa *_b.CompliancePdfReader) ViolatedRule {
	for _, _dcgf := range _fefaa.PageList {
		_bdgaf, _cceca := _dcgf.GetContentStreams()
		if _cceca != nil {
			continue
		}
		for _, _dedg := range _bdgaf {
			_cfcf := _eb.NewContentStreamParser(_dedg)
			_, _cceca = _cfcf.Parse()
			if _cceca != nil {
				return _af("\u0036\u002e\u0032\u002e\u0031\u0030\u002d\u0031", "\u0041\u0020\u0063onten\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0073\u0068\u0061\u006c\u006c n\u006f\u0074\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u006e\u0079 \u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072\u0073\u0020\u006e\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0069\u006e\u0020\u0050\u0044\u0046\u0020\u0052\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0065\u0076\u0065\u006e\u0020\u0069\u0066\u0020s\u0075\u0063\u0068\u0020\u006f\u0070\u0065r\u0061\u0074\u006f\u0072\u0073\u0020\u0061\u0072\u0065\u0020\u0062\u0072\u0061\u0063\u006b\u0065\u0074\u0065\u0064\u0020\u0062\u0079\u0020\u0074\u0068\u0065\u0020\u0042\u0058\u002f\u0045\u0058\u0020\u0063\u006f\u006d\u0070\u0061\u0074\u0069\u0062i\u006c\u0069\u0074\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072\u0073\u002e")
			}
		}
	}
	return _cgf
}

// Profile2Options are the options that changes the way how optimizer may try to adapt document into PDF/A standard.
type Profile2Options struct {

	// CMYKDefaultColorSpace is an option that refers PDF/A
	CMYKDefaultColorSpace bool

	// Now is a function that returns current time.
	Now func() _d.Time

	// Xmp is the xmp options information.
	Xmp XmpOptions
}

func _gee(_fbef *_b.CompliancePdfReader) (_bfce ViolatedRule) {
	for _, _gadf := range _fbef.GetObjectNums() {
		_caaaa, _becdb := _fbef.GetIndirectObjectByNumber(_gadf)
		if _becdb != nil {
			continue
		}
		_ccfb, _fcaa := _gf.GetStream(_caaaa)
		if !_fcaa {
			continue
		}
		_adcff, _fcaa := _gf.GetName(_ccfb.Get("\u0054\u0079\u0070\u0065"))
		if !_fcaa {
			continue
		}
		if *_adcff != "\u0058O\u0062\u006a\u0065\u0063\u0074" {
			continue
		}
		_cafb, _fcaa := _gf.GetName(_ccfb.Get("\u0053\u0075\u0062\u0074\u0079\u0070\u0065\u0032"))
		if !_fcaa {
			continue
		}
		if *_cafb == "\u0050\u0053" {
			return _af("\u0036.\u0032\u002e\u0035\u002d\u0031", "A\u0020\u0066\u006fr\u006d\u0020\u0058\u004f\u0062\u006a\u0065\u0063\u0074\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006ft\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e \u0074\u0068\u0065\u0020\u0053\u0075\u0062\u0074\u0079\u0070\u0065\u0032\u0020\u006b\u0065\u0079 \u0077\u0069\u0074\u0068\u0020a\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0050\u0053\u0020o\u0072\u0020\u0074\u0068e\u0020\u0050\u0053\u0020\u006b\u0065\u0079\u002e")
		}
		if _ccfb.Get("\u0050\u0053") != nil {
			return _af("\u0036.\u0032\u002e\u0035\u002d\u0031", "A\u0020\u0066\u006fr\u006d\u0020\u0058\u004f\u0062\u006a\u0065\u0063\u0074\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006ft\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e \u0074\u0068\u0065\u0020\u0053\u0075\u0062\u0074\u0079\u0070\u0065\u0032\u0020\u006b\u0065\u0079 \u0077\u0069\u0074\u0068\u0020a\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0050\u0053\u0020o\u0072\u0020\u0074\u0068e\u0020\u0050\u0053\u0020\u006b\u0065\u0079\u002e")
		}
	}
	return _bfce
}

func _fbgc(_ceaac *_b.CompliancePdfReader) (_eabg []ViolatedRule) {
	_decf := true
	_fbgcd, _efddb := _ceaac.GetCatalogMarkInfo()
	if !_efddb {
		_decf = false
	} else {
		_aaeaf, _feedb := _gf.GetDict(_fbgcd)
		if _feedb {
			_cebeag, _befec := _gf.GetBool(_aaeaf.Get("\u004d\u0061\u0072\u006b\u0065\u0064"))
			if !bool(*_cebeag) || !_befec {
				_decf = false
			}
		} else {
			_decf = false
		}
	}
	if !_decf {
		_eabg = append(_eabg, _af("\u0036.\u0037\u002e\u0032\u002e\u0032\u002d1", "\u0054\u0068\u0065\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u0020\u0063\u0061\u0074\u0061\u006cog\u0020d\u0069\u0063\u0074\u0069\u006f\u006e\u0061r\u0079 \u0073\u0068\u0061\u006c\u006c\u0020\u0069\u006e\u0063\u006c\u0075\u0064\u0065\u0020\u0061\u0020M\u0061r\u006b\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079\u0020\u0077\u0069\u0074\u0068\u0020\u0061 \u004d\u0061\u0072\u006b\u0065\u0064\u0020\u0065\u006et\u0072\u0079\u0020\u0069\u006e\u0020\u0069\u0074,\u0020\u0077\u0068\u006f\u0073\u0065\u0020\u0076\u0061lu\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0074\u0072\u0075\u0065"))
	}
	_gacg, _efddb := _ceaac.GetCatalogStructTreeRoot()
	if !_efddb {
		_eabg = append(_eabg, _af("\u0036.\u0037\u002e\u0033\u002e\u0033\u002d1", "\u0054\u0068\u0065\u0020\u006c\u006f\u0067\u0069\u0063\u0061\u006c\u0020\u0073\u0074\u0072\u0075\u0063\u0074\u0075r\u0065\u0020\u006f\u0066\u0020\u0074\u0068e\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0069\u006e\u0067 \u0066\u0069\u006c\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0064\u0065\u0073\u0063\u0072\u0069\u0062\u0065d \u0062\u0079\u0020a\u0020s\u0074\u0072\u0075\u0063\u0074\u0075\u0072e\u0020\u0068\u0069\u0065\u0072\u0061\u0072\u0063\u0068\u0079\u0020\u0072\u006f\u006ft\u0065\u0064\u0020i\u006e\u0020\u0074\u0068\u0065\u0020\u0053\u0074\u0072\u0075\u0063\u0074\u0054\u0072\u0065\u0065\u0052\u006f\u006f\u0074\u0020\u0065\u006e\u0074r\u0079\u0020\u006f\u0066\u0020\u0074h\u0065\u0020d\u006fc\u0075\u006d\u0065\u006e\u0074\u0020\u0063\u0061t\u0061\u006c\u006fg \u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002c\u0020\u0061\u0073\u0020\u0064\u0065\u0073\u0063\u0072\u0069\u0062\u0065\u0064\u0020\u0069n\u0020\u0050\u0044\u0046\u0020\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065 \u0039\u002e\u0036\u002e"))
	}
	_fabeg, _efddb := _gf.GetDict(_gacg)
	if _efddb {
		_cbfbe, _bdec := _gf.GetName(_fabeg.Get("\u0052o\u006c\u0065\u004d\u0061\u0070"))
		if _bdec {
			_cfbf, _agdca := _gf.GetDict(_cbfbe)
			if _agdca {
				for _, _bdee := range _cfbf.Keys() {
					_becff := _cfbf.Get(_bdee)
					if _becff == nil {
						_eabg = append(_eabg, _af("\u0036.\u0037\u002e\u0033\u002e\u0034\u002d1", "\u0041\u006c\u006c\u0020\u006eo\u006e\u002ds\u0074\u0061\u006e\u0064\u0061\u0072\u0064\u0020\u0073t\u0072\u0075\u0063\u0074ure\u0020\u0074\u0079\u0070\u0065s\u0020\u0073\u0068\u0061\u006c\u006c \u0062\u0065\u0020\u006d\u0061\u0070\u0070\u0065d\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020n\u0065\u0061\u0072\u0065\u0073\u0074\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0061\u006c\u006c\u0079\u0020\u0065\u0071\u0075\u0069\u0076\u0061\u006c\u0065\u006e\u0074\u0020\u0073\u0074a\u006ed\u0061r\u0064\u0020\u0074\u0079\u0070\u0065\u002c\u0020\u0061\u0073\u0020\u0064\u0065\u0066\u0069\u006ee\u0064\u0020\u0069\u006e\u0020\u0050\u0044\u0046\u0020\u0052\u0065\u0066\u0065re\u006e\u0063e\u0020\u0039\u002e\u0037\u002e\u0034\u002c\u0020i\u006e\u0020\u0074\u0068e\u0020\u0072\u006fl\u0065\u0020\u006d\u0061p \u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u006f\u0066 \u0074h\u0065\u0020\u0073\u0074\u0072\u0075c\u0074\u0075r\u0065\u0020\u0074\u0072e\u0065\u0020\u0072\u006f\u006ft\u002e"))
					}
				}
			}
		}
	}
	return _eabg
}

// ApplyStandard tries to change the content of the writer to match the PDF/A-2 standard.
// Implements model.StandardApplier.
func (_bbfb *profile2) ApplyStandard(document *_eg.Document) (_gcdg error) {
	_adeb(document, 7)
	if _gcdg = _agcc(document, _bbfb._dddf.Now); _gcdg != nil {
		return _gcdg
	}
	if _gcdg = _gbdb(document); _gcdg != nil {
		return _gcdg
	}
	_fgb, _dgbad := _fadg(_bbfb._dddf.CMYKDefaultColorSpace, _bbfb._eggde)
	_gcdg = _cecea(document, []pageColorspaceOptimizeFunc{_fgb}, []documentColorspaceOptimizeFunc{_dgbad})
	if _gcdg != nil {
		return _gcdg
	}
	_eege(document)
	if _gcdg = _acfb(document); _gcdg != nil {
		return _gcdg
	}
	if _gcdg = _bbed(document, _bbfb._eggde._aac); _gcdg != nil {
		return _gcdg
	}
	if _gcdg = _bbag(document); _gcdg != nil {
		return _gcdg
	}
	if _gcdg = _bbbd(document); _gcdg != nil {
		return _gcdg
	}
	if _gcdg = _abaa(document); _gcdg != nil {
		return _gcdg
	}
	if _gcdg = _cgbc(document); _gcdg != nil {
		return _gcdg
	}
	if _bbfb._eggde._bc == "\u0041" {
		_bgab(document)
	}
	if _gcdg = _ddbf(document, _bbfb._eggde._aac); _gcdg != nil {
		return _gcdg
	}
	if _gcdg = _feb(document); _gcdg != nil {
		return _gcdg
	}
	if _fffa := _fde(document, _bbfb._eggde, _bbfb._dddf.Xmp); _fffa != nil {
		return _fffa
	}
	if _bbfb._eggde == _ab() {
		if _gcdg = _egff(document); _gcdg != nil {
			return _gcdg
		}
	}
	if _gcdg = _acef(document); _gcdg != nil {
		return _gcdg
	}
	if _gcdg = _agegc(document); _gcdg != nil {
		return _gcdg
	}
	if _gcdg = _gad(document); _gcdg != nil {
		return _gcdg
	}
	return nil
}

func _acef(_bcgb *_eg.Document) error {
	_dea, _cdgg := _bcgb.FindCatalog()
	if !_cdgg {
		return _ee.New("\u0063\u0061\u0074\u0061\u006c\u006f\u0067\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064")
	}
	_ebac, _cdgg := _gf.GetDict(_dea.Object.Get("\u004f\u0043\u0050r\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073"))
	if !_cdgg {
		return nil
	}
	_dde, _cdgg := _gf.GetDict(_ebac.Get("\u0044"))
	if _cdgg {
		if _dde.Get("\u0041\u0053") != nil {
			_dde.Remove("\u0041\u0053")
		}
	}
	_aefg, _cdgg := _gf.GetArray(_ebac.Get("\u0043o\u006e\u0066\u0069\u0067\u0073"))
	if _cdgg {
		for _aegf := 0; _aegf < _aefg.Len(); _aegf++ {
			_dbd, _bddd := _gf.GetDict(_aefg.Get(_aegf))
			if !_bddd {
				continue
			}
			if _dbd.Get("\u0041\u0053") != nil {
				_dbd.Remove("\u0041\u0053")
			}
		}
	}
	return nil
}

func _cbab(_edbg *_b.CompliancePdfReader) (_edeg []ViolatedRule) {
	var _befee, _cbda, _cbga, _baaf, _gfa, _gbcf, _eeeeg bool
	_accff := func() bool { return _befee && _cbda && _cbga && _baaf && _gfa && _gbcf && _eeeeg }
	for _, _gbbf := range _edbg.PageList {
		if _gbbf.Resources == nil {
			continue
		}
		_gfda, _efdb := _gf.GetDict(_gbbf.Resources.Font)
		if !_efdb {
			continue
		}
		for _, _gefd := range _gfda.Keys() {
			_ceg, _agfdf := _gf.GetDict(_gfda.Get(_gefd))
			if !_agfdf {
				if !_befee {
					_edeg = append(_edeg, _af("\u0036.\u0033\u002e\u0032\u002d\u0031", "\u0041\u006c\u006c\u0020\u0066\u006fn\u0074\u0073\u0020\u0075\u0073e\u0064\u0020\u0069\u006e\u0020\u0061\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020c\u006f\u006e\u0066\u006f\u0072m\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006e\u0074\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u0073\u0020d\u0065\u0066\u0069\u006e\u0065d \u0069\u006e\u0020\u0050\u0044\u0046\u0020\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0035\u002e\u0035\u002e"))
					_befee = true
					if _accff() {
						return _edeg
					}
				}
				continue
			}
			if _gdccf, _bdgf := _gf.GetName(_ceg.Get("\u0054\u0079\u0070\u0065")); !_befee && (!_bdgf || _gdccf.String() != "\u0046\u006f\u006e\u0074") {
				_edeg = append(_edeg, _af("\u0036.\u0033\u002e\u0032\u002d\u0031", "\u0054\u0079\u0070e\u0020\u002d\u0020\u006e\u0061\u006d\u0065\u0020\u002d\u0020\u0028\u0052\u0065\u0071\u0075i\u0072\u0065\u0064\u0029 Th\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u006f\u0066 \u0050\u0044\u0046\u0020\u006fbj\u0065\u0063\u0074\u0020\u0074\u0068\u0061t\u0020\u0074\u0068\u0069s\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0064\u0065\u0073c\u0072\u0069\u0062\u0065\u0073\u003b\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0046\u006f\u006e\u0074\u0020\u0066\u006fr\u0020\u0061\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0069\u0063t\u0069\u006f\u006e\u0061\u0072\u0079\u002e"))
				_befee = true
				if _accff() {
					return _edeg
				}
			}
			_fccd, _acfa := _b.NewPdfFontFromPdfObject(_ceg)
			if _acfa != nil {
				continue
			}
			var _dbgaf string
			if _gaaca, _ecbd := _gf.GetName(_ceg.Get("\u0053u\u0062\u0074\u0079\u0070\u0065")); _ecbd {
				_dbgaf = _gaaca.String()
			}
			if !_cbda {
				switch _dbgaf {
				case "\u0054\u0079\u0070e\u0030", "\u0054\u0079\u0070e\u0031", "\u004dM\u0054\u0079\u0070\u0065\u0031", "\u0054\u0072\u0075\u0065\u0054\u0079\u0070\u0065", "\u0043\u0049\u0044F\u006f\u006e\u0074\u0054\u0079\u0070\u0065\u0030", "\u0043\u0049\u0044F\u006f\u006e\u0074\u0054\u0079\u0070\u0065\u0032":
				default:
					_cbda = true
					_edeg = append(_edeg, _af("\u0036.\u0033\u002e\u0032\u002d\u0032", "\u0053\u0075\u0062\u0074\u0079\u0070\u0065\u0020\u002d\u0020\u006e\u0061\u006d\u0065\u0020\u002d\u0020\u0028\u0052\u0065\u0071\u0075\u0069\u0072\u0065d\u0029\u0020\u0054\u0068e \u0074\u0079\u0070\u0065 \u006f\u0066\u0020\u0066\u006f\u006et\u003b\u0020\u006d\u0075\u0073\u0074\u0020b\u0065\u0020\u0022\u0054\u0079\u0070\u0065\u0031\u0022\u0020f\u006f\u0072\u0020\u0054\u0079\u0070\u0065\u0020\u0031\u0020f\u006f\u006e\u0074\u0073\u002c\u0020\u0022\u004d\u004d\u0054\u0079\u0070\u0065\u0031\u0022\u0020\u0066\u006f\u0072\u0020\u006d\u0075\u006c\u0074\u0069\u0070\u006c\u0065\u0020\u006da\u0073\u0074e\u0072\u0020\u0066\u006f\u006e\u0074s\u002c\u0020\u0022\u0054\u0072\u0075\u0065T\u0079\u0070\u0065\u0022\u0020\u0066\u006f\u0072\u0020\u0054\u0072\u0075\u0065T\u0079\u0070\u0065\u0020\u0066\u006f\u006e\u0074\u0073\u0020\u0022\u0054\u0079\u0070\u0065\u0033\u0022\u0020\u0066\u006f\u0072\u0020\u0054\u0079\u0070e\u0020\u0033\u0020\u0066\u006f\u006e\u0074\u0073\u002c\u0020\"\u0054\u0079\u0070\u0065\u0030\"\u0020\u0066\u006f\u0072\u0020\u0054\u0079\u0070\u0065\u0020\u0030\u0020\u0066\u006f\u006e\u0074\u0073\u0020\u0061\u006ed\u0020\u0022\u0043\u0049\u0044\u0046\u006fn\u0074\u0054\u0079\u0070\u0065\u0030\u0022 \u006f\u0072\u0020\u0022\u0043\u0049\u0044\u0046\u006f\u006e\u0074T\u0079\u0070e\u0032\u0022\u0020\u0066\u006f\u0072\u0020\u0043\u0049\u0044\u0020\u0066\u006f\u006e\u0074\u0073\u002e"))
					if _accff() {
						return _edeg
					}
				}
			}
			if !_cbga {
				if _dbgaf != "\u0054\u0079\u0070e\u0033" {
					_eabb, _abbd := _gf.GetName(_ceg.Get("\u0042\u0061\u0073\u0065\u0046\u006f\u006e\u0074"))
					if !_abbd || _eabb.String() == "" {
						_edeg = append(_edeg, _af("\u0036.\u0033\u002e\u0032\u002d\u0033", "B\u0061\u0073\u0065\u0046\u006f\u006e\u0074\u0020\u002d\u0020\u006e\u0061\u006d\u0065\u0020\u002d\u0020\u0028\u0052\u0065\u0071\u0075\u0069\u0072\u0065\u0064)\u0020T\u0068\u0065\u0020\u0050o\u0073\u0074S\u0063\u0072\u0069\u0070\u0074\u0020\u006e\u0061\u006d\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006e\u0074\u002e"))
						_cbga = true
						if _accff() {
							return _edeg
						}
					}
				}
			}
			if _dbgaf != "\u0054\u0079\u0070e\u0031" {
				continue
			}
			_gbde := _aa.IsStdFont(_aa.StdFontName(_fccd.BaseFont()))
			if _gbde {
				continue
			}
			_gede, _cafbf := _gf.GetIntVal(_ceg.Get("\u0046i\u0072\u0073\u0074\u0043\u0068\u0061r"))
			if !_cafbf && !_baaf {
				_edeg = append(_edeg, _af("\u0036.\u0033\u002e\u0032\u002d\u0034", "\u0046\u0069r\u0073t\u0043\u0068\u0061\u0072\u0020\u002d\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u002d\u0020\u0028\u0052\u0065\u0071\u0075i\u0072\u0065\u0064\u0020\u0065\u0078\u0063\u0065\u0070t\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0073\u0074\u0061\u006e\u0064\u0061\u0072d\u0020\u0031\u0034\u0020\u0066\u006f\u006e\u0074\u0073\u0029\u0020\u0054\u0068\u0065\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0063\u006f\u0064e\u0020\u0064\u0065\u0066i\u006ee\u0064\u0020\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006e\u0074\u0027\u0073\u0020\u0057i\u0064\u0074\u0068\u0073 \u0061r\u0072\u0061y\u002e"))
				_baaf = true
				if _accff() {
					return _edeg
				}
			}
			_gedeg, _edba := _gf.GetIntVal(_ceg.Get("\u004c\u0061\u0073\u0074\u0043\u0068\u0061\u0072"))
			if !_edba && !_gfa {
				_edeg = append(_edeg, _af("\u0036.\u0033\u002e\u0032\u002d\u0035", "\u004c\u0061\u0073t\u0043\u0068\u0061\u0072\u0020\u002d\u0020\u0069n\u0074\u0065\u0067e\u0072 \u002d\u0020\u0028\u0052\u0065\u0071u\u0069\u0072\u0065d\u0020\u0065\u0078\u0063\u0065\u0070\u0074\u0020\u0066\u006f\u0072\u0020t\u0068\u0065 s\u0074\u0061\u006e\u0064\u0061\u0072\u0064\u0020\u0031\u0034\u0020\u0066\u006f\u006ets\u0029\u0020\u0054\u0068\u0065\u0020\u006c\u0061\u0073t\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006e\u0074\u0027\u0073\u0020\u0057\u0069\u0064\u0074h\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u002e"))
				_gfa = true
				if _accff() {
					return _edeg
				}
			}
			if !_gbcf {
				_gcfc, _adeg := _gf.GetArray(_ceg.Get("\u0057\u0069\u0064\u0074\u0068\u0073"))
				if !_adeg || !_cafbf || !_edba || _gcfc.Len() != _gedeg-_gede+1 {
					_edeg = append(_edeg, _af("\u0036.\u0033\u002e\u0032\u002d\u0036", "\u0057\u0069\u0064\u0074\u0068\u0073\u0020\u002d a\u0072\u0072\u0061y \u002d\u0020\u0028\u0052\u0065\u0071\u0075\u0069\u0072\u0065\u0064\u0020\u0065\u0078\u0063\u0065\u0070t\u0020\u0066\u006f\u0072\u0020\u0074\u0068\u0065\u0020\u0073\u0074a\u006e\u0064a\u0072\u0064\u00201\u0034\u0020\u0066\u006f\u006e\u0074\u0073\u003b\u0020\u0069\u006ed\u0069\u0072\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0070\u0072\u0065\u0066e\u0072\u0072e\u0064\u0029\u0020\u0041\u006e \u0061\u0072\u0072\u0061\u0079\u0020\u006f\u0066\u0020\u0028\u004c\u0061\u0073\u0074\u0043\u0068\u0061\u0072\u0020\u2212 F\u0069\u0072\u0073\u0074\u0043\u0068\u0061\u0072\u0020\u002b\u00201\u0029\u0020\u0077\u0069\u0064\u0074\u0068\u0073."))
					_gbcf = true
					if _accff() {
						return _edeg
					}
				}
			}
		}
	}
	return _edeg
}

func _dd() standardType { return standardType{_aac: 2, _bc: "\u0042"} }

// Profile3U is the implementation of the PDF/A-3U standard profile.
// Implements model.StandardImplementer, Profile interfaces.
type Profile3U struct{ profile3 }

type pageColorspaceOptimizeFunc func(_bbaea *_eg.Document, _gdf *_eg.Page, _daf []*_eg.Image) error

func _dbaga(_aggb *_b.CompliancePdfReader) ViolatedRule {
	_cdbe, _dgag := _aggb.PdfReader.GetTrailer()
	if _dgag != nil {
		return _af("\u0036.\u0031\u002e\u0033\u002d\u0031", "\u006d\u0069\u0073s\u0069\u006e\u0067\u0020t\u0072\u0061\u0069\u006c\u0065\u0072\u0020i\u006e\u0020\u0074\u0068\u0065\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074")
	}
	if _cdbe.Get("\u0049\u0044") == nil {
		return _af("\u0036.\u0031\u002e\u0033\u002d\u0031", "\u0054\u0068\u0065\u0020\u0066\u0069\u006c\u0065\u0020\u0074\u0072\u0061\u0069\u006c\u0065\u0072\u0020\u0064\u0069\u0063t\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0073\u0068a\u006c\u006c\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068e\u0020\u0027\u0049\u0044\u0027\u0020k\u0065\u0079\u0077o\u0072\u0064")
	}
	if _cdbe.Get("\u0045n\u0063\u0072\u0079\u0070\u0074") != nil {
		return _af("\u0036.\u0031\u002e\u0033\u002d\u0032", "\u0054\u0068\u0065\u0020\u006b\u0065y\u0077\u006f\u0072\u0064\u0020'\u0045\u006e\u0063\u0072\u0079\u0070t\u0027\u0020\u0073\u0068\u0061l\u006c\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u0075\u0073\u0065d\u0020\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0074\u0072\u0061\u0069\u006c\u0065\u0072 \u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061r\u0079\u002e\u0020")
	}
	return _cgf
}

func _fgcg(_fcad *_b.CompliancePdfReader) (_ebeg []ViolatedRule) {
	_dada, _cafg := _gfad(_fcad)
	if !_cafg {
		return _ebeg
	}
	_afece, _cafg := _gf.GetDict(_dada.Get("\u0050\u0065\u0072m\u0073"))
	if !_cafg {
		return _ebeg
	}
	_cdcda := _afece.Keys()
	for _, _dbdbg := range _cdcda {
		if _dbdbg.String() != "\u0055\u0052\u0033" && _dbdbg.String() != "\u0044\u006f\u0063\u004d\u0044\u0050" {
			_ebeg = append(_ebeg, _af("\u0036\u002e\u0031\u002e\u0031\u0032\u002d\u0031", "\u004e\u006f\u0020\u006b\u0065\u0079\u0073 \u006f\u0074\u0068\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0055\u0052\u0033 \u0061n\u0064\u0020\u0044\u006f\u0063\u004dD\u0050\u0020\u0073\u0068\u0061\u006c\u006c \u0062\u0065\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0069\u006e\u0020\u0061\u0020\u0070\u0065\u0072\u006d\u0069\u0073\u0073i\u006f\u006e\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072y\u002e"))
		}
	}
	return _ebeg
}

func _aaedc(_bbgf *_b.CompliancePdfReader) (_afgag ViolatedRule) {
	_fddce, _bbce := _gfad(_bbgf)
	if !_bbce {
		return _cgf
	}
	if _fddce.Get("\u0041\u0041") != nil {
		return _af("\u0036.\u0036\u002e\u0032\u002d\u0033", "\u0054\u0068e\u0020\u0064\u006f\u0063\u0075\u006d\u0065n\u0074 \u0063\u0061\u0074a\u006c\u006f\u0067\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006eo\u0074\u0020\u0069\u006e\u0063\u006c\u0075\u0064\u0065\u0020\u0061\u006e\u0020\u0041\u0041\u0020\u0065n\u0074r\u0079 \u0066\u006f\u0072 \u0061\u006e\u0020\u0061\u0064\u0064\u0069\u0074\u0069\u006f\u006e\u0061\u006c\u002d\u0061\u0063\u0074i\u006f\u006e\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e")
	}
	return _cgf
}

type documentColorspaceOptimizeFunc func(_bdca *_eg.Document, _ffff []*_eg.Image) error

func _add(_dccce *_b.CompliancePdfReader) (_cgfg []ViolatedRule) {
	var _edgf, _bagd, _dgdf, _eaec, _fbga, _eaedg bool
	_fdegf := func() bool { return _edgf && _bagd && _dgdf && _eaec && _fbga && _eaedg }
	_cbaa := func(_aedef *_gf.PdfObjectDictionary) bool {
		if !_edgf && _aedef.Get("\u0054\u0052") != nil {
			_edgf = true
			_cgfg = append(_cgfg, _af("\u0036.\u0032\u002e\u0038\u002d\u0031", "\u0041\u006e\u0020\u0045\u0078\u0074\u0047\u0053\u0074\u0061\u0074e\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072y\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e \u0074\u0068\u0065\u0020\u0054\u0052\u0020\u006b\u0065\u0079\u002e"))
		}
		if _abe := _aedef.Get("\u0054\u0052\u0032"); !_bagd && _abe != nil {
			_aabc, _bdccf := _gf.GetName(_abe)
			if !_bdccf || (_bdccf && *_aabc != "\u0044e\u0066\u0061\u0075\u006c\u0074") {
				_bagd = true
				_cgfg = append(_cgfg, _af("\u0036.\u0032\u002e\u0038\u002d\u0032", "\u0041\u006e \u0045\u0078\u0074G\u0053\u0074\u0061\u0074\u0065 \u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074a\u0069n\u0020\u0074\u0068\u0065\u0020\u0054R2 \u006b\u0065\u0079\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0020\u0076al\u0075e\u0020\u006f\u0074\u0068e\u0072 \u0074h\u0061\u006e \u0044\u0065fa\u0075\u006c\u0074\u002e"))
				if _fdegf() {
					return true
				}
			}
		}
		if _eaeb := _aedef.Get("\u0053\u004d\u0061s\u006b"); !_dgdf && _eaeb != nil {
			_gdab, _fggde := _gf.GetName(_eaeb)
			if !_fggde || (_fggde && *_gdab != "\u004e\u006f\u006e\u0065") {
				_dgdf = true
				_cgfg = append(_cgfg, _af("\u0036\u002e\u0034-\u0031", "\u0049\u0066\u0020\u0061\u006e \u0053\u004d\u0061\u0073\u006b\u0020\u006be\u0079\u0020\u0061\u0070\u0070\u0065\u0061\u0072\u0073\u0020\u0069\u006e\u0020\u0061\u006e\u0020\u0045\u0078\u0074\u0047\u0053\u0074\u0061\u0074\u0065\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002c\u0020\u0069\u0074s\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073\u0068\u0061\u006c\u006c \u0062\u0065\u0020\u004e\u006f\u006ee\u002e"))
				if _fdegf() {
					return true
				}
			}
		}
		if _ebffg := _aedef.Get("\u0043\u0041"); !_fbga && _ebffg != nil {
			_dacg, _cafe := _gf.GetNumberAsFloat(_ebffg)
			if _cafe == nil && _dacg != 1.0 {
				_fbga = true
				_cgfg = append(_cgfg, _af("\u0036\u002e\u0034-\u0035", "\u0054\u0068\u0065\u0020\u0066ol\u006c\u006fw\u0069\u006e\u0067\u0020\u006b\u0065\u0079\u0073\u002c\u0020\u0069\u0066\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0069\u006e\u0020\u0061\u006e\u0020\u0045\u0078t\u0047\u0053\u0074a\u0074\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u002c\u0020\u0073\u0068a\u006c\u006c\u0020\u0068\u0061v\u0065\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006cu\u0065\u0073 \u0073h\u006f\u0077\u006e\u003a\u0020\u0043\u0041 \u002d\u0020\u0031\u002e\u0030\u002e"))
				if _fdegf() {
					return true
				}
			}
		}
		if _bafb := _aedef.Get("\u0063\u0061"); !_eaedg && _bafb != nil {
			_bdac, _gefad := _gf.GetNumberAsFloat(_bafb)
			if _gefad == nil && _bdac != 1.0 {
				_eaedg = true
				_cgfg = append(_cgfg, _af("\u0036\u002e\u0034-\u0036", "\u0054\u0068\u0065\u0020\u0066ol\u006c\u006fw\u0069\u006e\u0067\u0020\u006b\u0065\u0079\u0073\u002c\u0020\u0069\u0066\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0069\u006e\u0020\u0061\u006e\u0020\u0045\u0078t\u0047\u0053\u0074a\u0074\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u002c\u0020\u0073\u0068a\u006c\u006c\u0020\u0068\u0061v\u0065\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006cu\u0065\u0073 \u0073h\u006f\u0077\u006e\u003a\u0020\u0063\u0061 \u002d\u0020\u0031\u002e\u0030\u002e"))
				if _fdegf() {
					return true
				}
			}
		}
		if _dcec := _aedef.Get("\u0042\u004d"); !_eaec && _dcec != nil {
			_dcbb, _eegba := _gf.GetName(_dcec)
			if _eegba {
				switch _dcbb.String() {
				case "\u004e\u006f\u0072\u006d\u0061\u006c", "\u0043\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u006c\u0065":
				default:
					_eaec = true
					_cgfg = append(_cgfg, _af("\u0036\u002e\u0034-\u0034", "T\u0068\u0065\u0020\u0066\u006f\u006cl\u006f\u0077\u0069\u006e\u0067 \u006b\u0065y\u0073\u002c\u0020\u0069\u0066 \u0070res\u0065\u006e\u0074\u0020\u0069\u006e\u0020\u0061\u006e\u0020\u0045\u0078\u0074\u0047S\u0074\u0061t\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u002c\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0068\u0061\u0076\u0065 \u0074\u0068\u0065 \u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0073\u0068\u006f\u0077n\u003a\u0020\u0042\u004d\u0020\u002d\u0020\u004e\u006f\u0072m\u0061\u006c\u0020\u006f\u0072\u0020\u0043\u006f\u006d\u0070\u0061t\u0069\u0062\u006c\u0065\u002e"))
					if _fdegf() {
						return true
					}
				}
			}
		}
		return false
	}
	for _, _ffafa := range _dccce.PageList {
		_bbafg := _ffafa.Resources
		if _bbafg == nil {
			continue
		}
		if _bbafg.ExtGState == nil {
			continue
		}
		_dbacg, _bdea := _gf.GetDict(_bbafg.ExtGState)
		if !_bdea {
			continue
		}
		_bafa := _dbacg.Keys()
		for _, _dfaf := range _bafa {
			_baecb, _ffcae := _gf.GetDict(_dbacg.Get(_dfaf))
			if !_ffcae {
				continue
			}
			if _cbaa(_baecb) {
				return _cgfg
			}
		}
	}
	for _, _efab := range _dccce.PageList {
		_cgcf := _efab.Resources
		if _cgcf == nil {
			continue
		}
		_gbdaa, _bggf := _gf.GetDict(_cgcf.XObject)
		if !_bggf {
			continue
		}
		for _, _gbeea := range _gbdaa.Keys() {
			_bbdd, _bacc := _gf.GetStream(_gbdaa.Get(_gbeea))
			if !_bacc {
				continue
			}
			_cdfc, _bacc := _gf.GetDict(_bbdd.Get("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"))
			if !_bacc {
				continue
			}
			_gbad, _bacc := _gf.GetDict(_cdfc.Get("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"))
			if !_bacc {
				continue
			}
			for _, _dacef := range _gbad.Keys() {
				_eaeba, _ebbb := _gf.GetDict(_gbad.Get(_dacef))
				if !_ebbb {
					continue
				}
				if _cbaa(_eaeba) {
					return _cgfg
				}
			}
		}
	}
	return _cgfg
}

// Profile2B is the implementation of the PDF/A-2B standard profile.
// Implements model.StandardImplementer, Profile interfaces.
type Profile2B struct{ profile2 }

func _ddbf(_bde *_eg.Document, _fff int) error {
	for _, _caea := range _bde.Objects {
		_faff, _cdf := _gf.GetDict(_caea)
		if !_cdf {
			continue
		}
		_adg := _faff.Get("\u0054\u0079\u0070\u0065")
		if _adg == nil {
			continue
		}
		if _fdc, _ced := _gf.GetName(_adg); _ced && _fdc.String() != "\u0041\u0063\u0074\u0069\u006f\u006e" {
			continue
		}
		_egg, _ecfe := _gf.GetName(_faff.Get("\u0053"))
		if !_ecfe {
			continue
		}
		switch _b.PdfActionType(*_egg) {
		case _b.ActionTypeLaunch, _b.ActionTypeSound, _b.ActionTypeMovie, _b.ActionTypeResetForm, _b.ActionTypeImportData, _b.ActionTypeJavaScript:
			_faff.Remove("\u0053")
		case _b.ActionTypeHide, _b.ActionTypeSetOCGState, _b.ActionTypeRendition, _b.ActionTypeTrans, _b.ActionTypeGoTo3DView:
			if _fff == 2 {
				_faff.Remove("\u0053")
			}
		case _b.ActionTypeNamed:
			_dbbf, _dcc := _gf.GetName(_faff.Get("\u004e"))
			if !_dcc {
				continue
			}
			switch *_dbbf {
			case "\u004e\u0065\u0078\u0074\u0050\u0061\u0067\u0065", "\u0050\u0072\u0065\u0076\u0050\u0061\u0067\u0065", "\u0046i\u0072\u0073\u0074\u0050\u0061\u0067e", "\u004c\u0061\u0073\u0074\u0050\u0061\u0067\u0065":
			default:
				_faff.Remove("\u004e")
			}
		}
	}
	return nil
}

func _egde(_gcba *_gf.PdfObjectDictionary) ViolatedRule {
	const (
		_becf = "\u0036.\u0033\u002e\u0033\u002d\u0032"
		_cdgb = "\u0046\u006f\u0072\u0020\u0061\u006c\u006c\u0020\u0054y\u0070\u0065\u0020\u0032\u0020\u0043\u0049\u0044\u0046\u006f\u006e\u0074\u0073\u0020\u0074\u0068\u0061\u0074\u0020\u0061\u0072\u0065\u0020\u0075\u0073\u0065\u0064\u0020f\u006f\u0072 \u0072\u0065\u006e\u0064\u0065\u0072\u0069\u006e\u0067,\u0020\u0074\u0068\u0065\u0020\u0043\u0049\u0044\u0046\u006fn\u0074\u0020\u0064\u0069c\u0074\u0069o\u006e\u0061\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c \u0063\u006f\u006e\u0074\u0061i\u006e\u0020\u0061\u0020\u0043\u0049\u0044\u0054\u006f\u0047\u0049D\u004d\u0061\u0070\u0020\u0065\u006e\u0074\u0072\u0079\u0020\u0074\u0068\u0061\u0074\u0020\u0073\u0068\u0061\u006c\u006c \u0062\u0065\u0020a\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u006d\u0061\u0070\u0070\u0069\u006e\u0067\u0020\u0066\u0072\u006f\u006d\u0020\u0043\u0049\u0044\u0073\u0020\u0074\u006f\u0020\u0067\u006c\u0079\u0070\u0068\u0020\u0069\u006e\u0064\u0069c\u0065\u0073\u0020\u006f\u0072\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0020\u0049d\u0065\u006e\u0074\u0069\u0074\u0079\u002c\u0020\u0061s d\u0065\u0073\u0063\u0072\u0069\u0062\u0065\u0064\u0020\u0069n\u0020P\u0044\u0046\u0020\u0052\u0065\u0066\u0065\u0072e\u006e\u0063\u0065\u0020\u0054a\u0062\u006c\u0065\u0020\u0035\u002e\u00313"
	)
	var _cfag string
	if _dggf, _ffgg := _gf.GetName(_gcba.Get("\u0053u\u0062\u0074\u0079\u0070\u0065")); _ffgg {
		_cfag = _dggf.String()
	}
	if _cfag != "\u0043\u0049\u0044F\u006f\u006e\u0074\u0054\u0079\u0070\u0065\u0032" {
		return _cgf
	}
	if _gcba.Get("C\u0049\u0044\u0054\u006f\u0047\u0049\u0044\u004d\u0061\u0070") == nil {
		return _af(_becf, _cdgb)
	}
	return _cgf
}

type imageInfo struct {
	ColorSpace       _gf.PdfObjectName
	BitsPerComponent int
	ColorComponents  int
	Width            int
	Height           int
	Stream           *_gf.PdfObjectStream
	_gc              bool
}

// ApplyStandard tries to change the content of the writer to match the PDF/A-3 standard.
// Implements model.StandardApplier.
func (_fcc *profile3) ApplyStandard(document *_eg.Document) (_eecf error) {
	_adeb(document, 7)
	if _eecf = _agcc(document, _fcc._adcf.Now); _eecf != nil {
		return _eecf
	}
	if _eecf = _gbdb(document); _eecf != nil {
		return _eecf
	}
	_gbdg, _dead := _fadg(_fcc._adcf.CMYKDefaultColorSpace, _fcc._dggeb)
	_eecf = _cecea(document, []pageColorspaceOptimizeFunc{_gbdg}, []documentColorspaceOptimizeFunc{_dead})
	if _eecf != nil {
		return _eecf
	}
	_eege(document)
	if _eecf = _acfb(document); _eecf != nil {
		return _eecf
	}
	if _eecf = _bbed(document, _fcc._dggeb._aac); _eecf != nil {
		return _eecf
	}
	if _eecf = _bbag(document); _eecf != nil {
		return _eecf
	}
	if _eecf = _bbbd(document); _eecf != nil {
		return _eecf
	}
	if _eecf = _abaa(document); _eecf != nil {
		return _eecf
	}
	if _eecf = _cgbc(document); _eecf != nil {
		return _eecf
	}
	if _fcc._dggeb._bc == "\u0041" {
		_bgab(document)
	}
	if _eecf = _ddbf(document, _fcc._dggeb._aac); _eecf != nil {
		return _eecf
	}
	if _eecf = _feb(document); _eecf != nil {
		return _eecf
	}
	if _ecd := _fde(document, _fcc._dggeb, _fcc._adcf.Xmp); _ecd != nil {
		return _ecd
	}
	if _fcc._dggeb == _ccc() {
		if _eecf = _egff(document); _eecf != nil {
			return _eecf
		}
	}
	if _eecf = _acef(document); _eecf != nil {
		return _eecf
	}
	if _eecf = _agegc(document); _eecf != nil {
		return _eecf
	}
	if _eecf = _gad(document); _eecf != nil {
		return _eecf
	}
	return nil
}

func _ccc() standardType { return standardType{_aac: 3, _bc: "\u0041"} }

func _gad(_ecgd *_eg.Document) error {
	_dfeb, _gdfd := _ecgd.FindCatalog()
	if !_gdfd {
		return _ee.New("\u0063\u0061\u0074\u0061\u006c\u006f\u0067\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064")
	}
	if _dfeb.Object.Get("\u0052\u0065\u0071u\u0069\u0072\u0065\u006d\u0065\u006e\u0074\u0073") != nil {
		_dfeb.Object.Remove("\u0052\u0065\u0071u\u0069\u0072\u0065\u006d\u0065\u006e\u0074\u0073")
	}
	return nil
}

func _bffc(_badc *_eg.Document) (*_gf.PdfObjectDictionary, bool) {
	_acga, _bea := _badc.FindCatalog()
	if !_bea {
		return nil, false
	}
	_gea, _bea := _gf.GetArray(_acga.Object.Get("\u004f\u0075\u0074\u0070\u0075\u0074\u0049\u006e\u0074\u0065\u006e\u0074\u0073"))
	if !_bea {
		return nil, false
	}
	if _gea.Len() == 0 {
		return nil, false
	}
	return _gf.GetDict(_gea.Get(0))
}

func _dbda(_cgde *_b.CompliancePdfReader) (_cbfb []ViolatedRule) {
	_fege, _badce := _gfad(_cgde)
	if !_badce {
		return _cbfb
	}
	_aaba := _af("\u0036.\u0032\u002e\u0032\u002d\u0031", "\u0041\u0020\u0050\u0044\u0046\u002f\u0041\u002d\u0031\u0020\u004f\u0075\u0074p\u0075\u0074\u0049\u006e\u0074e\u006e\u0074\u0020\u0069\u0073\u0020a\u006e \u004f\u0075\u0074\u0070\u0075\u0074\u0049n\u0074\u0065\u006e\u0074\u0020\u0064i\u0063\u0074\u0069\u006fn\u0061\u0072\u0079\u002c\u0020\u0061\u0073\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0062y\u0020\u0050\u0044F\u0020\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065 \u0039\u002e\u0031\u0030.4\u002c\u0020\u0074\u0068\u0061\u0074\u0020\u0069\u0073 \u0069\u006e\u0063\u006c\u0075\u0064e\u0064\u0020i\u006e\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u006c\u0065\u0027\u0073\u0020O\u0075\u0074p\u0075\u0074I\u006e\u0074\u0065\u006e\u0074\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020a\u006e\u0064\u0020h\u0061\u0073\u0020\u0047\u0054\u0053\u005f\u0050\u0044\u0046\u0041\u0031\u0020\u0061\u0073 \u0074\u0068\u0065\u0020\u0076a\u006c\u0075e\u0020\u006f\u0066\u0020i\u0074\u0073 \u0053\u0020\u006b\u0065\u0079\u0020\u0061\u006e\u0064\u0020\u0061\u0020\u0076\u0061\u006c\u0069\u0064\u0020I\u0043\u0043\u0020\u0070\u0072\u006f\u0066\u0069\u006ce\u0020s\u0074\u0072\u0065\u0061\u006d \u0061\u0073\u0020\u0074h\u0065\u0020\u0076a\u006c\u0075\u0065\u0020\u0069\u0074\u0073\u0020\u0044\u0065\u0073t\u004f\u0075t\u0070\u0075\u0074P\u0072\u006f\u0066\u0069\u006c\u0065 \u006b\u0065\u0079\u002e")
	_dfcb, _badce := _gf.GetArray(_fege.Get("\u004f\u0075\u0074\u0070\u0075\u0074\u0049\u006e\u0074\u0065\u006e\u0074\u0073"))
	if !_badce {
		_cbfb = append(_cbfb, _aaba)
		return _cbfb
	}
	_cbba := _af("\u0036.\u0032\u002e\u0032\u002d\u0032", "\u0049\u0066\u0020\u0061\u0020\u0066\u0069\u006c\u0065's\u0020O\u0075\u0074\u0070u\u0074\u0049\u006e\u0074\u0065\u006e\u0074\u0073 \u0061\u0072\u0072a\u0079\u0020\u0063\u006f\u006e\u0074\u0061\u0069n\u0073\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u006f\u006ee\u0020\u0065\u006e\u0074\u0072\u0079\u002c\u0020\u0074\u0068\u0065\u006e\u0020\u0061\u006c\u006c\u0020\u0065n\u0074\u0072\u0069\u0065\u0073\u0020\u0074\u0068\u0061\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e a \u0044\u0065\u0073\u0074\u004f\u0075\u0074\u0070\u0075\u0074\u0050\u0072\u006f\u0066\u0069\u006c\u0065\u0020\u006b\u0065y\u0020\u0073\u0068\u0061\u006cl\u0020\u0068\u0061\u0076\u0065 \u0061\u0073\u0020\u0074\u0068\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0074\u0068a\u0074\u0020\u006b\u0065\u0079 \u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0069\u006e\u0064\u0069\u0072\u0065c\u0074\u0020\u006fb\u006ae\u0063t\u002c\u0020\u0077h\u0069\u0063\u0068\u0020\u0073\u0068\u0061\u006c\u006c \u0062\u0065\u0020\u0061\u0020\u0076\u0061\u006c\u0069d\u0020\u0049\u0043\u0043\u0020\u0070\u0072\u006f\u0066\u0069\u006c\u0065\u0020\u0073\u0074r\u0065\u0061m\u002e")
	if _dfcb.Len() > 1 {
		_adab := map[*_gf.PdfObjectDictionary]struct{}{}
		for _ebdg := 0; _ebdg < _dfcb.Len(); _ebdg++ {
			_ebbf, _aebc := _gf.GetDict(_dfcb.Get(_ebdg))
			if !_aebc {
				_cbfb = append(_cbfb, _aaba)
				return _cbfb
			}
			if _ebdg == 0 {
				_adab[_ebbf] = struct{}{}
				continue
			}
			if _, _baab := _adab[_ebbf]; !_baab {
				_cbfb = append(_cbfb, _cbba)
				break
			}
		}
	} else if _dfcb.Len() == 0 {
		_cbfb = append(_cbfb, _aaba)
		return _cbfb
	}
	_aefb, _badce := _gf.GetDict(_dfcb.Get(0))
	if !_badce {
		_cbfb = append(_cbfb, _aaba)
		return _cbfb
	}
	if _fegf, _bgege := _gf.GetName(_aefb.Get("\u0053")); !_bgege || (*_fegf) != "\u0047T\u0053\u005f\u0050\u0044\u0046\u00411" {
		_cbfb = append(_cbfb, _aaba)
		return _cbfb
	}
	_ffda, _gaef := _b.NewPdfOutputIntentFromPdfObject(_aefb)
	if _gaef != nil {
		_df.Log.Debug("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u006f\u0075\u0074\u0070\u0075\u0074\u0020i\u006et\u0065\u006e\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076", _gaef)
		return _cbfb
	}
	_dedf, _gaef := _ebc.ParseHeader(_ffda.DestOutputProfile)
	if _gaef != nil {
		_df.Log.Debug("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0063\u006f\u006c\u006f\u0072\u0070\u0072\u006f\u0066\u0069\u006c\u0065\u0020\u0068\u0065\u0061d\u0065\u0072\u0020\u0066\u0061i\u006c\u0065d\u003a\u0020\u0025\u0076", _gaef)
		return _cbfb
	}
	if (_dedf.DeviceClass == _ebc.DeviceClassPRTR || _dedf.DeviceClass == _ebc.DeviceClassMNTR) && (_dedf.ColorSpace == _ebc.ColorSpaceRGB || _dedf.ColorSpace == _ebc.ColorSpaceCMYK || _dedf.ColorSpace == _ebc.ColorSpaceGRAY) {
		return _cbfb
	}
	_cbfb = append(_cbfb, _aaba)
	return _cbfb
}

func (_fa standardType) String() string {
	return _c.Sprintf("\u0050\u0044\u0046\u002f\u0041\u002d\u0025\u0064\u0025\u0073", _fa._aac, _fa._bc)
}

func _abga(_aeda *_gf.PdfObjectDictionary, _dbed map[*_gf.PdfObjectStream][]byte, _gdfga map[*_gf.PdfObjectStream]*_dfc.CMap) ViolatedRule {
	const (
		_defcab = "\u0046\u006f\u0072 \u0061\u006e\u0079\u0020\u0067\u0069\u0076\u0065\u006e\u0020\u0063\u006f\u006d\u0070\u006f\u0073\u0069\u0074\u0065\u0020\u0028\u0054\u0079\u0070\u0065\u0020\u0030\u0029\u0020\u0066\u006f\u006et \u0072\u0065\u0066\u0065\u0072\u0065\u006ec\u0065\u0064 \u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0061\u0020\u0063\u006fn\u0066\u006fr\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u002c\u0020\u0074\u0068\u0065\u0020\u0043I\u0044\u0053y\u0073\u0074\u0065\u006d\u0049nf\u006f\u0020\u0065\u006e\u0074\u0072\u0069\u0065\u0073\u0020\u006f\u0066\u0020i\u0074\u0073\u0020\u0043\u0049\u0044\u0046\u006f\u006e\u0074\u0020\u0061\u006e\u0064 \u0043\u004d\u0061\u0070 \u0064\u0069\u0063\u0074i\u006f\u006e\u0061\u0072\u0069\u0065\u0073\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0063\u006f\u006d\u0070\u0061\u0074i\u0062\u006c\u0065\u002e\u0020\u0049\u006e\u0020o\u0074\u0068\u0065\u0072\u0020\u0077\u006f\u0072\u0064\u0073\u002c\u0020\u0074\u0068\u0065\u0020R\u0065\u0067\u0069\u0073\u0074\u0072\u0079\u0020a\u006e\u0064\u0020\u004fr\u0064\u0065\u0072\u0069\u006e\u0067 \u0073\u0074\u0072i\u006e\u0067\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074i\u006f\u006e\u0061\u0072\u0069\u0065\u0073\u0020\u0066\u006f\u0072 \u0074\u0068\u0061\u0074\u0020\u0066o\u006e\u0074\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0069\u0064\u0065\u006e\u0074\u0069\u0063\u0061\u006c\u002c\u0020u\u006el\u0065ss \u0074\u0068\u0065\u0020\u0076a\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0045\u006e\u0063\u006f\u0064\u0069\u006eg\u0020\u006b\u0065\u0079\u0020\u0069\u006e\u0020\u0074h\u0065 \u0066\u006f\u006e\u0074\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0069\u0073 \u0049\u0064\u0065\u006e\u0074\u0069t\u0079\u002d\u0048\u0020o\u0072\u0020\u0049\u0064\u0065\u006e\u0074\u0069\u0074y\u002dV\u002e"
		_gfea   = "\u0036.\u0033\u002e\u0033\u002d\u0031"
	)
	var _febc string
	if _dabg, _ggcbf := _gf.GetName(_aeda.Get("\u0053u\u0062\u0074\u0079\u0070\u0065")); _ggcbf {
		_febc = _dabg.String()
	}
	if _febc != "\u0054\u0079\u0070e\u0030" {
		return _cgf
	}
	_abfec := _aeda.Get("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067")
	if _bbebc, _efaa := _gf.GetName(_abfec); _efaa {
		switch _bbebc.String() {
		case "\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0048", "\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0056":
			return _cgf
		}
		_afaf, _bebef := _dfc.LoadPredefinedCMap(_bbebc.String())
		if _bebef != nil {
			return _af(_gfea, _defcab)
		}
		_afaag := _afaf.CIDSystemInfo()
		if _afaag.Ordering != _afaag.Registry {
			return _af(_gfea, _defcab)
		}
		return _cgf
	}
	_dgdb, _caef := _gf.GetStream(_abfec)
	if !_caef {
		return _af(_gfea, _defcab)
	}
	_cefgg, _acge := _dcge(_dgdb, _dbed, _gdfga)
	if _acge != nil {
		return _af(_gfea, _defcab)
	}
	_aaeca := _cefgg.CIDSystemInfo()
	if _aaeca.Ordering != _aaeca.Registry {
		return _af(_gfea, _defcab)
	}
	return _cgf
}

func _gdbf(_faag standardType, _ggb *_eg.OutputIntents) error {
	_cebd, _gaf := _ebc.NewCmykIsoCoatedV2OutputIntent(_faag.outputIntentSubtype())
	if _gaf != nil {
		return _gaf
	}
	if _gaf = _ggb.Add(_cebd.ToPdfObject()); _gaf != nil {
		return _gaf
	}
	return nil
}

func _cedg(_bcfb *_b.CompliancePdfReader) (_abgg []ViolatedRule) {
	if _bcfb.ParserMetadata().HasOddLengthHexStrings() {
		_abgg = append(_abgg, _af("\u0036.\u0031\u002e\u0036\u002d\u0031", "\u0068\u0065\u0078a\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020e\u0076\u0065\u006e\u0020\u0073\u0069\u007a\u0065"))
	}
	if _bcfb.ParserMetadata().HasOddLengthHexStrings() {
		_abgg = append(_abgg, _af("\u0036.\u0031\u002e\u0036\u002d\u0032", "\u0068\u0065\u0078\u0061\u0064\u0065\u0063\u0069\u006da\u006c\u0020s\u0074\u0072\u0069\u006e\u0067\u0073\u0020\u0073\u0068o\u0075\u006c\u0064\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u006f\u006e\u006c\u0079\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u0072\u0061n\u0067\u0065\u0020[\u0030\u002d\u0039\u003b\u0041\u002d\u0046\u003b\u0061\u002d\u0066\u005d"))
	}
	return _abgg
}

func _ggba(_dbad *_b.CompliancePdfReader) (_eeea []ViolatedRule) { return _eeea }

func _bgaa(_dfda *_b.CompliancePdfReader) (_ceda ViolatedRule) {
	_adcgf, _gegf := _gfad(_dfda)
	if !_gegf {
		return _cgf
	}
	_fbcb, _gegf := _gf.GetDict(_adcgf.Get("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"))
	if !_gegf {
		return _cgf
	}
	_cgded, _gegf := _gf.GetArray(_fbcb.Get("\u0046\u0069\u0065\u006c\u0064\u0073"))
	if !_gegf {
		return _cgf
	}
	for _ebae := 0; _ebae < _cgded.Len(); _ebae++ {
		_bgfff, _afeag := _gf.GetDict(_cgded.Get(_ebae))
		if !_afeag {
			continue
		}
		if _bgfff.Get("\u0041\u0041") != nil {
			return _af("\u0036.\u0036\u002e\u0032\u002d\u0032", "\u0041\u0020F\u0069\u0065\u006cd\u0020\u0064\u0069\u0063\u0074i\u006f\u006e\u0061\u0072\u0079 s\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0063\u006c\u0075\u0064\u0065\u0020\u0061n\u0020A\u0041\u0020\u0065\u006e\u0074\u0072y f\u006f\u0072\u0020\u0061\u006e\u0020\u0061\u0064\u0064\u0069\u0074\u0069on\u0061l\u002d\u0061\u0063\u0074i\u006fn\u0073 \u0064\u0069c\u0074\u0069on\u0061\u0072\u0079\u002e")
		}
	}
	return _cgf
}

func _agdc(_bfabe *_gf.PdfObjectDictionary, _fgad map[*_gf.PdfObjectStream][]byte, _gddbb map[*_gf.PdfObjectStream]*_dfc.CMap) ViolatedRule {
	const (
		_acdd = "\u0046\u006f\u0072\u0020\u0061\u006e\u0079\u0020\u0067\u0069\u0076\u0065\u006e\u0020\u0063\u006f\u006d\u0070o\u0073\u0069\u0074e\u0020\u0028\u0054\u0079\u0070\u0065\u0020\u0030\u0029 \u0066\u006fn\u0074\u0020\u0077\u0069\u0074\u0068\u0069\u006e \u0061\u0020\u0063\u006fn\u0066\u006fr\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u002c\u0020\u0074\u0068\u0065\u0020\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f \u0065\u006e\u0074\u0072\u0079\u0020\u0069\u006e\u0020\u0069\u0074\u0073 \u0043\u0049\u0044\u0046\u006f\u006e\u0074\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0061\u006e\u0064\u0020\u0069\u0074\u0073\u0020\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072y\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0066\u006fl\u006c\u006f\u0077\u0069\u006e\u0067\u0020\u0072\u0065l\u0061t\u0069\u006f\u006e\u0073\u0068\u0069\u0070. \u0049\u0066\u0020\u0074\u0068\u0065\u0020\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006b\u0065\u0079 \u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0054\u0079\u0070\u0065\u0020\u0030 \u0066\u006f\u006e\u0074\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0069\u0073\u0020I\u0064\u0065n\u0074\u0069\u0074\u0079\u002d\u0048\u0020\u006f\u0072\u0020\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0056\u002c\u0020\u0061\u006e\u0079\u0020v\u0061\u006c\u0075\u0065\u0073\u0020\u006f\u0066\u0020\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079\u002c\u0020\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u002c\u0020\u0061\u006e\u0064\u0020\u0053up\u0070\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006d\u0061\u0079\u0020\u0062\u0065\u0020\u0075\u0073\u0065\u0064\u0020\u0069n\u0020\u0074h\u0065\u0020\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u0020\u0065\u006e\u0074r\u0079\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0043\u0049\u0044F\u006f\u006e\u0074\u002e\u0020\u004f\u0074\u0068\u0065\u0072\u0077\u0069\u0073\u0065\u002c\u0020\u0074\u0068\u0065\u0020\u0063\u006f\u0072\u0072\u0065\u0073\u0070\u006f\u006e\u0064\u0069\u006e\u0067\u0020\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079\u0020a\u006e\u0064\u0020\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020s\u0074\u0072\u0069\u006e\u0067\u0073\u0020\u0069\u006e\u0020\u0062\u006f\u0074h\u0020\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0069\u0065\u0073\u0020\u0073\u0068\u0061\u006cl\u0020\u0062\u0065\u0020i\u0064en\u0074\u0069\u0063\u0061\u006c\u002c \u0061n\u0064\u0020\u0074\u0068\u0065\u0020v\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0053\u0075\u0070\u0070l\u0065\u006d\u0065\u006e\u0074 \u006b\u0065\u0079\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0043I\u0044S\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066o\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0043\u0049\u0044\u0046\u006f\u006e\u0074\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0067re\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f t\u0068\u0065\u0020\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006b\u0065\u0079\u0020\u0069\u006e\u0020\u0074h\u0065\u0020\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066o\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0043M\u0061p\u002e"
		_dage = "\u0036\u002e\u0032\u002e\u0031\u0031\u002e\u0033\u002d\u0031"
	)
	var _fafga string
	if _gefe, _fgaa := _gf.GetName(_bfabe.Get("\u0053u\u0062\u0074\u0079\u0070\u0065")); _fgaa {
		_fafga = _gefe.String()
	}
	if _fafga != "\u0054\u0079\u0070e\u0030" {
		return _cgf
	}
	_dadgf := _bfabe.Get("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067")
	if _fgfaee, _gcgac := _gf.GetName(_dadgf); _gcgac {
		switch _fgfaee.String() {
		case "\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0048", "\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0056":
			return _cgf
		}
		_caacf, _adda := _dfc.LoadPredefinedCMap(_fgfaee.String())
		if _adda != nil {
			return _af(_dage, _acdd)
		}
		_egcff := _caacf.CIDSystemInfo()
		if _egcff.Ordering != _egcff.Registry {
			return _af(_dage, _acdd)
		}
		return _cgf
	}
	_gcbdc, _gcdbc := _gf.GetStream(_dadgf)
	if !_gcdbc {
		return _af(_dage, _acdd)
	}
	_gbafd, _daegd := _dcge(_gcbdc, _fgad, _gddbb)
	if _daegd != nil {
		return _af(_dage, _acdd)
	}
	_bfbfe := _gbafd.CIDSystemInfo()
	if _bfbfe.Ordering != _bfbfe.Registry {
		return _af(_dage, _acdd)
	}
	return _cgf
}

// XmpOptions are the options used by the optimization of the XMP metadata.
type XmpOptions struct {

	// Copyright information.
	Copyright string

	// OriginalDocumentID is the original document identifier.
	// By default, if this field is empty the value is extracted from the XMP Metadata or generated UUID.
	OriginalDocumentID string

	// DocumentID is the original document identifier.
	// By default, if this field is empty the value is extracted from the XMP Metadata or generated UUID.
	DocumentID string

	// InstanceID is the original document identifier.
	// By default, if this field is empty the value is set to generated UUID.
	InstanceID string

	// NewDocumentVersion is a flag that defines if a document was overwritten.
	// If the new document was created this should be true. On changing given document file, and overwriting it it should be true.
	NewDocumentVersion bool

	// MarshalIndent defines marshaling indent of the XMP metadata.
	MarshalIndent string

	// MarshalPrefix defines marshaling prefix of the XMP metadata.
	MarshalPrefix string
}

func _cgdc(_cfad *_b.CompliancePdfReader) ViolatedRule {
	if _cfad.ParserMetadata().HeaderPosition() != 0 {
		return _af("\u0036.\u0031\u002e\u0032\u002d\u0031", "h\u0065\u0061\u0064\u0065\u0072\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0069\u0073\u0020n\u006f\u0074\u0020\u0061\u0074\u0020\u0074\u0068\u0065\u0020fi\u0072\u0073\u0074 \u0062y\u0074\u0065")
	}
	return _cgf
}

func _bgbf(_ebgc *_gf.PdfObjectDictionary, _dfab map[*_gf.PdfObjectStream][]byte, _ccge map[*_gf.PdfObjectStream]*_dfc.CMap) ViolatedRule {
	const (
		_fdcd   = "\u0036\u002e\u0032\u002e\u0031\u0031\u002e\u0033\u002d\u0033"
		_bbeegf = "\u0041\u006c\u006c \u0043\u004d\u0061\u0070s\u0020\u0075\u0073ed\u0020\u0077\u0069\u0074\u0068i\u006e\u0020\u0061\u0020\u0050\u0044\u0046\u002f\u0041\u002d\u0032\u0020\u0066\u0069\u006c\u0065\u002c\u0020\u0065\u0078\u0063\u0065\u0070\u0074 th\u006f\u0073\u0065\u0020\u006ci\u0073\u0074\u0065\u0064\u0020i\u006e\u0020\u0049\u0053\u004f\u0020\u0033\u00320\u00300\u002d1\u003a\u0032\u0030\u0030\u0038\u002c\u0020\u0039\u002e\u0037\u002e\u0035\u002e\u0032\u002c\u0020\u0054\u0061\u0062\u006c\u0065 \u0031\u00318,\u0020\u0073h\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0065\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0069\u006e \u0074\u0068\u0061\u0074\u0020\u0066\u0069\u006c\u0065\u0020\u0061\u0073\u0020\u0064e\u0073\u0063\u0072\u0069\u0062\u0065\u0064\u0020\u0069\u006e\u0020\u0049\u0053\u004f\u0020\u0033\u0032\u00300\u0030-\u0031\u003a\u0032\u0030\u0030\u0038\u002c\u00209\u002e\u0037\u002e\u0035\u002e"
	)
	var _aegc string
	if _dgbdb, _edbdc := _gf.GetName(_ebgc.Get("\u0053u\u0062\u0074\u0079\u0070\u0065")); _edbdc {
		_aegc = _dgbdb.String()
	}
	if _aegc != "\u0054\u0079\u0070e\u0030" {
		return _cgf
	}
	_gega := _ebgc.Get("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067")
	if _ggaed, _fafdc := _gf.GetName(_gega); _fafdc {
		switch _ggaed.String() {
		case "\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0048", "\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0056":
			return _cgf
		default:
			return _af(_fdcd, _bbeegf)
		}
	}
	_gdad, _effa := _gf.GetStream(_gega)
	if !_effa {
		return _af(_fdcd, _bbeegf)
	}
	_, _acec := _dcge(_gdad, _dfab, _ccge)
	if _acec != nil {
		return _af(_fdcd, _bbeegf)
	}
	return _cgf
}

var _ Profile = (*Profile2U)(nil)

type documentImages struct {
	_bcd, _gfc, _ef bool
	_bge            map[_gf.PdfObject]struct{}
	_bf             []*imageInfo
}

func _gfad(_geced *_b.CompliancePdfReader) (*_gf.PdfObjectDictionary, bool) {
	_beace, _dcba := _geced.GetTrailer()
	if _dcba != nil {
		_df.Log.Debug("\u0043\u0061\u006en\u006f\u0074\u0020\u0067e\u0074\u0020\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u0020\u0074\u0072\u0061\u0069\u006c\u0065\u0072\u003a\u0020\u0025\u0076", _dcba)
		return nil, false
	}
	_fdeff, _gdcf := _beace.Get("\u0052\u006f\u006f\u0074").(*_gf.PdfObjectReference)
	if !_gdcf {
		_df.Log.Debug("\u0043a\u006e\u006e\u006f\u0074 \u0066\u0069\u006e\u0064\u0020d\u006fc\u0075m\u0065\u006e\u0074\u0020\u0072\u006f\u006ft")
		return nil, false
	}
	_dabab, _gdcf := _gf.GetDict(_gf.ResolveReference(_fdeff))
	if !_gdcf {
		_df.Log.Debug("\u0063\u0061\u006e\u006e\u006f\u0074 \u0072\u0065\u0073\u006f\u006c\u0076\u0065\u0020\u0063\u0061\u0074\u0061\u006co\u0067\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079")
		return nil, false
	}
	return _dabab, true
}

func _egbb(_dgggb *_b.CompliancePdfReader) (_dgaaa ViolatedRule) {
	_fdfag, _gacc := _gfad(_dgggb)
	if !_gacc {
		return _cgf
	}
	_ddfc, _gacc := _gf.GetDict(_fdfag.Get("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"))
	if !_gacc {
		return _cgf
	}
	_cagd, _gacc := _gf.GetArray(_ddfc.Get("\u0046\u0069\u0065\u006c\u0064\u0073"))
	if !_gacc {
		return _cgf
	}
	for _efgag := 0; _efgag < _cagd.Len(); _efgag++ {
		_aeebe, _dagef := _gf.GetDict(_cagd.Get(_efgag))
		if !_dagef {
			continue
		}
		if _aeebe.Get("\u0041") != nil {
			return _af("\u0036.\u0034\u002e\u0031\u002d\u0032", "\u0041\u0020\u0046\u0069\u0065\u006c\u0064\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0041 o\u0072\u0020\u0041\u0041\u0020\u006b\u0065\u0079\u0073\u002e")
		}
		if _aeebe.Get("\u0041\u0041") != nil {
			return _af("\u0036.\u0034\u002e\u0031\u002d\u0032", "\u0041\u0020\u0046\u0069\u0065\u006c\u0064\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0041 o\u0072\u0020\u0041\u0041\u0020\u006b\u0065\u0079\u0073\u002e")
		}
	}
	return _cgf
}

func _agca(_dcgfdg *_b.CompliancePdfReader) (_bggd []ViolatedRule) {
	var _eddd, _ffbg, _cffec, _debgd, _aaece, _ccdg, _aceaa bool
	_gcca := map[*_gf.PdfObjectStream]struct{}{}
	for _, _dfcg := range _dcgfdg.GetObjectNums() {
		if _eddd && _ffbg && _aaece && _cffec && _debgd && _ccdg && _aceaa {
			return _bggd
		}
		_bfec, _aedaf := _dcgfdg.GetIndirectObjectByNumber(_dfcg)
		if _aedaf != nil {
			continue
		}
		_ddbgb, _fcdab := _gf.GetStream(_bfec)
		if !_fcdab {
			continue
		}
		if _, _fcdab = _gcca[_ddbgb]; _fcdab {
			continue
		}
		_gcca[_ddbgb] = struct{}{}
		_cgdedc, _fcdab := _gf.GetName(_ddbgb.Get("\u0053u\u0062\u0054\u0079\u0070\u0065"))
		if !_fcdab {
			continue
		}
		if !_debgd {
			if _ddbgb.Get("\u0052\u0065\u0066") != nil {
				_bggd = append(_bggd, _af("\u0036.\u0032\u002e\u0039\u002d\u0032", "\u0041\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u0020\u0073\u0068a\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u006e\u0079\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0058O\u0062\u006a\u0065\u0063\u0074s\u002e"))
				_debgd = true
			}
		}
		if _cgdedc.String() == "\u0050\u0053" {
			if !_ccdg {
				_bggd = append(_bggd, _af("\u0036.\u0032\u002e\u0039\u002d\u0033", "A \u0063\u006fn\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0066i\u006c\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u006e\u0079\u0020\u0050\u006f\u0073t\u0053c\u0072\u0069\u0070\u0074\u0020\u0058\u004f\u0062j\u0065c\u0074\u0073."))
				_ccdg = true
				continue
			}
		}
		if _cgdedc.String() == "\u0046\u006f\u0072\u006d" {
			if _ffbg && _cffec && _debgd {
				continue
			}
			if !_ffbg && _ddbgb.Get("\u004f\u0050\u0049") != nil {
				_bggd = append(_bggd, _af("\u0036.\u0032\u002e\u0039\u002d\u0031", "\u0041\u0020\u0066\u006f\u0072\u006d \u0058\u004f\u0062j\u0065\u0063\u0074 \u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0073\u0068\u0061\u006c\u006c n\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u004f\u0050\u0049\u0020\u006b\u0065\u0079\u002e"))
				_ffbg = true
			}
			if !_cffec {
				if _ddbgb.Get("\u0050\u0053") != nil {
					_cffec = true
				}
				if _adgd := _ddbgb.Get("\u0053\u0075\u0062\u0074\u0079\u0070\u0065\u0032"); _adgd != nil && !_cffec {
					if _ceddf, _deae := _gf.GetName(_adgd); _deae && *_ceddf == "\u0050\u0053" {
						_cffec = true
					}
				}
				if _cffec {
					_bggd = append(_bggd, _af("\u0036.\u0032\u002e\u0039\u002d\u0031", "\u0041\u0020\u0066\u006f\u0072\u006d\u0020\u0058\u004f\u0062\u006a\u0065\u0063\u0074\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006eo\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0053\u0075\u0062\u0074\u0079\u0070\u0065\u0032\u0020\u006b\u0065y \u0077\u0069\u0074\u0068\u0020\u0061\u0020\u0076\u0061\u006cu\u0065 o\u0066 \u0050\u0053\u0020\u0061\u006e\u0064\u0020t\u0068\u0065\u0020\u0050\u0053\u0020\u006b\u0065\u0079\u002e"))
				}
			}
			continue
		}
		if _cgdedc.String() != "\u0049\u006d\u0061g\u0065" {
			continue
		}
		if !_eddd && _ddbgb.Get("\u0041\u006c\u0074\u0065\u0072\u006e\u0061\u0074\u0065\u0073") != nil {
			_bggd = append(_bggd, _af("\u0036.\u0032\u002e\u0038\u002d\u0031", "\u0041\u006e\u0020\u0049m\u0061\u0067\u0065\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006et\u0061\u0069\u006e\u0020\u0074h\u0065\u0020\u0041\u006c\u0074\u0065\u0072\u006e\u0061\u0074\u0065\u0073\u0020\u006b\u0065\u0079\u002e"))
			_eddd = true
		}
		if !_aceaa && _ddbgb.Get("\u004f\u0050\u0049") != nil {
			_bggd = append(_bggd, _af("\u0036.\u0032\u002e\u0038\u002d\u0032", "\u0041\u006e\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072y\u0020\u0073\u0068\u0061\u006c\u006c\u0020n\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020t\u0068\u0065\u0020\u004f\u0050\u0049\u0020\u006b\u0065\u0079\u002e"))
			_aceaa = true
		}
		if !_aaece && _ddbgb.Get("I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065") != nil {
			_ccdb, _gfbd := _gf.GetBool(_ddbgb.Get("I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065"))
			if _gfbd && bool(*_ccdb) {
				continue
			}
			_bggd = append(_bggd, _af("\u0036.\u0032\u002e\u0038\u002d\u0033", "\u0049\u0066 a\u006e\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0063o\u006e\u0074\u0061\u0069n\u0073\u0020\u0074\u0068e \u0049\u006et\u0065r\u0070\u006f\u006c\u0061\u0074\u0065 \u006b\u0065\u0079,\u0020\u0069t\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020b\u0065\u0020\u0066\u0061\u006c\u0073\u0065\u002e"))
			_aaece = true
		}
	}
	return _bggd
}

type imageModifications struct {
	_ecg *colorspaceModification
	_caa _gf.StreamEncoder
}

// Profile is the model.StandardImplementer enhanced by the information about the profile conformance level.
type Profile interface {
	_b.StandardImplementer
	Conformance() string
	Part() int
}

func _dgbab(_ecde *_b.CompliancePdfReader) (_facff []ViolatedRule) {
	for _, _cgfgg := range _ecde.GetObjectNums() {
		_bgeea, _adac := _ecde.GetIndirectObjectByNumber(_cgfgg)
		if _adac != nil {
			continue
		}
		_accb, _daag := _gf.GetDict(_bgeea)
		if !_daag {
			continue
		}
		_deaa, _daag := _gf.GetName(_accb.Get("\u0054\u0079\u0070\u0065"))
		if !_daag {
			continue
		}
		if _deaa.String() != "\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d" {
			continue
		}
		_ebcg, _daag := _gf.GetBool(_accb.Get("\u004ee\u0065d\u0041\u0070\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0073"))
		if !_daag {
			return _facff
		}
		if bool(*_ebcg) {
			_facff = append(_facff, _af("\u0036\u002e\u0039-\u0031", "\u0054\u0068\u0065\u0020\u004e\u0065e\u0064\u0041\u0070\u0070\u0065a\u0072\u0061\u006e\u0063\u0065\u0073\u0020\u0066\u006c\u0061\u0067\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0069\u006e\u0074\u0065\u0072\u0061\u0063\u0074\u0069\u0076e\u0020\u0066\u006f\u0072\u006d \u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0065\u0069\u0074\u0068\u0065\u0072\u0020\u006e\u006f\u0074\u0020b\u0065\u0020\u0070\u0072\u0065se\u006e\u0074\u0020\u006f\u0072\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0066\u0061\u006c\u0073\u0065\u002e"))
		}
	}
	return _facff
}

func _egff(_cbd *_eg.Document) error {
	_gabf, _cffc := _cbd.FindCatalog()
	if !_cffc {
		return nil
	}
	_, _cffc = _gabf.GetStructTreeRoot()
	if !_cffc {
		_dda := _b.NewStructTreeRoot()
		_fbd := _dda.ToPdfObject().(*_gf.PdfIndirectObject)
		_eecg := _fbd.PdfObject.(*_gf.PdfObjectDictionary)
		_gabf.SetStructTreeRoot(_eecg)
	}
	return nil
}

func _caff(_dbgb *_gf.PdfObjectDictionary, _gfba map[*_gf.PdfObjectStream][]byte, _fgaef map[*_gf.PdfObjectStream]*_dfc.CMap) ViolatedRule {
	const (
		_abba = "\u0036.\u0033\u002e\u0038\u002d\u0031"
		_ffeb = "\u0054\u0068\u0065\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079\u0020\u0073\u0068\u0061\u006cl\u0020\u0069\u006e\u0063l\u0075\u0064e\u0020\u0061 \u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u0020\u0065\u006e\u0074\u0072\u0079\u0020w\u0068\u006f\u0073\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u0073 \u0061\u0020\u0043M\u0061\u0070\u0020\u0073\u0074\u0072\u0065\u0061\u006d \u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0068\u0061\u0074\u0020\u006d\u0061p\u0073\u0020\u0063\u0068\u0061\u0072ac\u0074\u0065\u0072\u0020\u0063\u006fd\u0065s\u0020\u0074\u006f\u0020\u0055\u006e\u0069\u0063\u006f\u0064e \u0076a\u006c\u0075\u0065\u0073,\u0020\u0061\u0073\u0020\u0064\u0065\u0073\u0063r\u0069\u0062\u0065\u0064\u0020\u0069\u006e\u0020P\u0044\u0046\u0020\u0052\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0035.\u0039\u002c\u0020\u0075\u006e\u006ce\u0073\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006e\u0074\u0020\u006d\u0065\u0065\u0074\u0073 \u0061\u006e\u0079\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0063\u006f\u006e\u0064\u0069\u0074\u0069\u006f\u006e\u0073\u003a\u000a\u0020\u002d\u0020\u0066o\u006e\u0074\u0073\u0020\u0074\u0068\u0061\u0074\u0020\u0075\u0073\u0065\u0020\u0074\u0068\u0065\u0020\u0070\u0072\u0065\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0065\u006e\u0063\u006f\u0064\u0069n\u0067\u0073\u0020M\u0061\u0063\u0052o\u006d\u0061\u006e\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067\u002c\u0020\u004d\u0061\u0063\u0045\u0078\u0070\u0065\u0072\u0074E\u006e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006f\u0072\u0020\u0057\u0069\u006e\u0041n\u0073\u0069\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067\u002c\u0020\u006f\u0072\u0020\u0074\u0068\u0061\u0074\u0020\u0075\u0073\u0065\u0020t\u0068\u0065\u0020\u0070\u0072\u0065d\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0048\u0020\u006f\u0072\u0020\u0049\u0064\u0065n\u0074\u0069\u0074\u0079\u002d\u0056\u0020C\u004d\u0061\u0070s\u003b\u000a\u0020\u002d\u0020\u0054\u0079\u0070\u0065\u0020\u0031\u0020\u0066\u006f\u006e\u0074\u0073\u0020\u0077\u0068\u006f\u0073\u0065\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u006e\u0061\u006d\u0065\u0073\u0020a\u0072\u0065 \u0074\u0061k\u0065\u006e\u0020\u0066\u0072\u006f\u006d\u0020\u0074\u0068\u0065\u0020\u0041\u0064\u006f\u0062\u0065\u0020\u0073\u0074\u0061n\u0064\u0061\u0072\u0064\u0020L\u0061t\u0069\u006e\u0020\u0063\u0068a\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0020\u006fr\u0020\u0074\u0068\u0065 \u0073\u0065\u0074\u0020\u006f\u0066 \u006e\u0061\u006d\u0065\u0064\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065r\u0073\u0020\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0053\u0079\u006d\u0062\u006f\u006c\u0020\u0066\u006f\u006e\u0074\u002c\u0020\u0061\u0073\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020i\u006e\u0020\u0050\u0044\u0046 \u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0041\u0070\u0070\u0065\u006e\u0064\u0069\u0078 \u0044\u003b\u000a\u0020\u002d\u0020\u0054\u0079\u0070\u0065\u0020\u0030\u0020\u0066\u006f\u006e\u0074\u0073\u0020w\u0068\u006f\u0073e\u0020d\u0065\u0073\u0063\u0065n\u0064\u0061\u006e\u0074 \u0043\u0049\u0044\u0046\u006f\u006e\u0074\u0020\u0075\u0073\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0041\u0064\u006f\u0062\u0065\u002d\u0047B\u0031\u002c\u0020\u0041\u0064\u006fb\u0065\u002d\u0043\u004e\u0053\u0031\u002c\u0020\u0041\u0064\u006f\u0062\u0065\u002d\u004a\u0061\u0070\u0061\u006e\u0031\u0020\u006f\u0072\u0020\u0041\u0064\u006f\u0062\u0065\u002d\u004b\u006fr\u0065\u0061\u0031\u0020\u0063\u0068\u0061r\u0061\u0063\u0074\u0065\u0072\u0020\u0063\u006f\u006c\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u0073\u002e"
	)
	_beecf := _dbgb.Get("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067")
	if _egdd, _aega := _gf.GetName(_beecf); _aega {
		if _egdd.String() == "\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0048" || _egdd.String() == "\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0056" || _egdd.String() == "\u004d\u0061c\u0052\u006f\u006da\u006e\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067" || _egdd.String() == "\u004d\u0061\u0063\u0045\u0078\u0070\u0065\u0072\u0074\u0045\u006e\u0063o\u0064\u0069\u006e\u0067" || _egdd.String() == "\u0057i\u006eA\u006e\u0073\u0069\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067" {
			return _cgf
		}
	}
	_cddb, _ffad := _gf.GetStream(_dbgb.Get("\u0054o\u0055\u006e\u0069\u0063\u006f\u0064e"))
	if _ffad {
		_, _faade := _dcge(_cddb, _gfba, _fgaef)
		if _faade != nil {
			return _af(_abba, _ffeb)
		}
		return _cgf
	}
	_efcc, _ffad := _gf.GetName(_dbgb.Get("\u0053u\u0062\u0074\u0079\u0070\u0065"))
	if !_ffad {
		return _af(_abba, _ffeb)
	}
	switch _efcc.String() {
	case "\u0054\u0079\u0070e\u0031":
		return _cgf
	}
	return _af(_abba, _ffeb)
}

// Profile2U is the implementation of the PDF/A-2U standard profile.
// Implements model.StandardImplementer, Profile interfaces.
type Profile2U struct{ profile2 }

func _agaa(_ecdad *_b.CompliancePdfReader) ViolatedRule {
	_cbfe := map[*_gf.PdfObjectStream]struct{}{}
	for _, _faga := range _ecdad.PageList {
		if _faga.Resources == nil && _faga.Contents == nil {
			continue
		}
		if _dgaaf := _faga.GetPageDict(); _dgaaf != nil {
			_dfgd, _fcfb := _gf.GetDict(_dgaaf.Get("\u0047\u0072\u006fu\u0070"))
			if _fcfb {
				if _eedd := _dfgd.Get("\u0053"); _eedd != nil {
					_bedd, _cddba := _gf.GetName(_eedd)
					if _cddba && _bedd.String() == "\u0054\u0072\u0061n\u0073\u0070\u0061\u0072\u0065\u006e\u0063\u0079" {
						return _af("\u0036\u002e\u0034-\u0033", "\u0041\u0020\u0047\u0072\u006f\u0075\u0070\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u006e\u0020\u0053\u0020\u0078Ob\u006a\u0065c\u0074\u0020\u0077\u0069\u0074h\u0020\u0061\u0020\u0076a\u006c\u0075\u0065\u0020o\u0066\u0020\u0054\u0072\u0061\u006e\u0073\u0070\u0061\u0072\u0065\u006e\u0063\u0079 \u0073\u0068\u0061\u006c\u006c\u0020\u006eo\u0074\u0020\u0062\u0065\u0020i\u006e\u0063\u006c\u0075\u0064\u0065\u0064\u0020\u0069\u006e\u0020\u0061\u0020\u0066\u006f\u0072\u006d\u0020\u0058\u004f\u0062je\u0063\u0074\u002e\n\u0041 \u0047\u0072\u006f\u0075p\u0020\u006f\u0062j\u0065\u0063\u0074\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u006e\u0020S\u0020\u0078\u004fb\u006a\u0065\u0063\u0074\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0020v\u0061\u006c\u0075\u0065\u0020o\u0066\u0020\u0054\u0072\u0061n\u0073\u0070\u0061\u0072\u0065\u006ec\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020i\u006e\u0063\u006c\u0075\u0064e\u0064\u0020\u0069\u006e\u0020\u0061\u0020\u0070\u0061\u0067\u0065\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e")
					}
				}
			}
		}
		if _faga.Resources != nil {
			if _fge, _egdg := _gf.GetDict(_faga.Resources.XObject); _egdg {
				for _, _edgd := range _fge.Keys() {
					_dadb, _ffce := _gf.GetStream(_fge.Get(_edgd))
					if !_ffce {
						continue
					}
					if _, _acbe := _cbfe[_dadb]; _acbe {
						continue
					}
					_bcgeg, _ffce := _gf.GetDict(_dadb.Get("\u0047\u0072\u006fu\u0070"))
					if !_ffce {
						_cbfe[_dadb] = struct{}{}
						continue
					}
					_cggf := _bcgeg.Get("\u0053")
					if _cggf != nil {
						_efgea, _bgag := _gf.GetName(_cggf)
						if _bgag && _efgea.String() == "\u0054\u0072\u0061n\u0073\u0070\u0061\u0072\u0065\u006e\u0063\u0079" {
							return _af("\u0036\u002e\u0034-\u0033", "\u0041\u0020\u0047\u0072\u006f\u0075\u0070\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u006e\u0020\u0053\u0020\u0078Ob\u006a\u0065c\u0074\u0020\u0077\u0069\u0074h\u0020\u0061\u0020\u0076a\u006c\u0075\u0065\u0020o\u0066\u0020\u0054\u0072\u0061\u006e\u0073\u0070\u0061\u0072\u0065\u006e\u0063\u0079 \u0073\u0068\u0061\u006c\u006c\u0020\u006eo\u0074\u0020\u0062\u0065\u0020i\u006e\u0063\u006c\u0075\u0064\u0065\u0064\u0020\u0069\u006e\u0020\u0061\u0020\u0066\u006f\u0072\u006d\u0020\u0058\u004f\u0062je\u0063\u0074\u002e\n\u0041 \u0047\u0072\u006f\u0075p\u0020\u006f\u0062j\u0065\u0063\u0074\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u006e\u0020S\u0020\u0078\u004fb\u006a\u0065\u0063\u0074\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0020v\u0061\u006c\u0075\u0065\u0020o\u0066\u0020\u0054\u0072\u0061n\u0073\u0070\u0061\u0072\u0065\u006ec\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020i\u006e\u0063\u006c\u0075\u0064e\u0064\u0020\u0069\u006e\u0020\u0061\u0020\u0070\u0061\u0067\u0065\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e")
						}
					}
					_cbfe[_dadb] = struct{}{}
					continue
				}
			}
		}
		if _faga.Contents != nil {
			_ffceg, _fbfa := _faga.GetContentStreams()
			if _fbfa != nil {
				continue
			}
			for _, _fcbdd := range _ffceg {
				_fegfa, _dgbf := _eb.NewContentStreamParser(_fcbdd).Parse()
				if _dgbf != nil {
					continue
				}
				for _, _ggcg := range *_fegfa {
					if len(_ggcg.Params) == 0 {
						continue
					}
					_cbeb, _bggea := _gf.GetName(_ggcg.Params[0])
					if !_bggea {
						continue
					}
					_adcdb, _dgbd := _faga.Resources.GetXObjectByName(*_cbeb)
					if _dgbd != _b.XObjectTypeForm {
						continue
					}
					if _, _bafc := _cbfe[_adcdb]; _bafc {
						continue
					}
					_aagc, _bggea := _gf.GetDict(_adcdb.Get("\u0047\u0072\u006fu\u0070"))
					if !_bggea {
						_cbfe[_adcdb] = struct{}{}
						continue
					}
					_beba := _aagc.Get("\u0053")
					if _beba != nil {
						_agbg, _gdddb := _gf.GetName(_beba)
						if _gdddb && _agbg.String() == "\u0054\u0072\u0061n\u0073\u0070\u0061\u0072\u0065\u006e\u0063\u0079" {
							return _af("\u0036\u002e\u0034-\u0033", "\u0041\u0020\u0047\u0072\u006f\u0075\u0070\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u006e\u0020\u0053\u0020\u0078Ob\u006a\u0065c\u0074\u0020\u0077\u0069\u0074h\u0020\u0061\u0020\u0076a\u006c\u0075\u0065\u0020o\u0066\u0020\u0054\u0072\u0061\u006e\u0073\u0070\u0061\u0072\u0065\u006e\u0063\u0079 \u0073\u0068\u0061\u006c\u006c\u0020\u006eo\u0074\u0020\u0062\u0065\u0020i\u006e\u0063\u006c\u0075\u0064\u0065\u0064\u0020\u0069\u006e\u0020\u0061\u0020\u0066\u006f\u0072\u006d\u0020\u0058\u004f\u0062je\u0063\u0074\u002e\n\u0041 \u0047\u0072\u006f\u0075p\u0020\u006f\u0062j\u0065\u0063\u0074\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u006e\u0020S\u0020\u0078\u004fb\u006a\u0065\u0063\u0074\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0020v\u0061\u006c\u0075\u0065\u0020o\u0066\u0020\u0054\u0072\u0061n\u0073\u0070\u0061\u0072\u0065\u006ec\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020i\u006e\u0063\u006c\u0075\u0064e\u0064\u0020\u0069\u006e\u0020\u0061\u0020\u0070\u0061\u0067\u0065\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e")
						}
					}
					_cbfe[_adcdb] = struct{}{}
				}
			}
		}
	}
	return _cgf
}

func _abab(_afea *_b.PdfFont, _bffa *_gf.PdfObjectDictionary) ViolatedRule {
	const (
		_ccdd  = "\u0036.\u0033\u002e\u0037\u002d\u0031"
		_beada = "\u0041\u006cl \u006e\u006f\u006e\u002d\u0073\u0079\u006db\u006f\u006c\u0069\u0063\u0020\u0054\u0072\u0075\u0065\u0054\u0079\u0070\u0065\u0020\u0066o\u006e\u0074s\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0068\u0061\u0076\u0065\u0020e\u0069\u0074h\u0065\u0072\u0020\u004d\u0061\u0063\u0052\u006f\u006d\u0061\u006e\u0045\u006e\u0063\u006fd\u0069\u006e\u0067\u0020\u006f\u0072\u0020\u0057\u0069\u006e\u0041\u006e\u0073i\u0045n\u0063\u006f\u0064\u0069n\u0067\u0020\u0061\u0073\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0066o\u0072\u0020t\u0068\u0065 \u0045n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006b\u0065\u0079 \u0069\u006e\u0020t\u0068e\u0020\u0046o\u006e\u0074\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u006f\u0072\u0020\u0061\u0073\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072 \u0074\u0068\u0065\u0020\u0042\u0061\u0073\u0065\u0045\u006e\u0063\u006fd\u0069\u006e\u0067\u0020\u006b\u0065\u0079\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0064i\u0063\u0074i\u006fn\u0061\u0072\u0079\u0020\u0077\u0068\u0069\u0063\u0068\u0020\u0069s\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff\u0020\u0074\u0068e\u0020\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006be\u0079\u0020\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0046\u006f\u006e\u0074 \u0064\u0069\u0063\u0074i\u006f\u006e\u0061\u0072\u0079\u002e\u0020\u0049\u006e\u0020\u0061\u0064\u0064\u0069\u0074\u0069\u006f\u006e, \u006eo\u0020n\u006f\u006e\u002d\u0073\u0079\u006d\u0062\u006f\u006c\u0069\u0063\u0020\u0054\u0072\u0075\u0065\u0054\u0079p\u0065 \u0066\u006f\u006e\u0074\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0020\u0061\u0020\u0044\u0069\u0066\u0066e\u0072\u0065\u006e\u0063\u0065\u0073\u0020a\u0072\u0072\u0061\u0079\u0020\u0075n\u006c\u0065s\u0073\u0020\u0061\u006c\u006c\u0020\u006f\u0066\u0020\u0074h\u0065\u0020\u0067\u006c\u0079\u0070\u0068\u0020\u006e\u0061\u006d\u0065\u0073 \u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0044\u0069f\u0066\u0065\u0072\u0065\u006ec\u0065\u0073\u0020a\u0072\u0072\u0061\u0079\u0020\u0061\u0072\u0065\u0020\u006c\u0069\u0073\u0074\u0065\u0064 \u0069\u006e \u0074\u0068\u0065\u0020\u0041\u0064\u006f\u0062\u0065 G\u006c\u0079\u0070\u0068\u0020\u004c\u0069\u0073t\u0020\u0061\u006e\u0064\u0020\u0074h\u0065\u0020\u0065\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066o\u006e\u0074\u0020\u0070\u0072\u006f\u0067\u0072a\u006d\u0020\u0063\u006f\u006e\u0074\u0061\u0069n\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073t\u0020\u0074\u0068\u0065\u0020\u004d\u0069\u0063\u0072o\u0073o\u0066\u0074\u0020\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u0020\u0028\u0033\u002c\u0031 \u2013 P\u006c\u0061\u0074\u0066\u006f\u0072\u006d\u0020I\u0044\u003d\u0033\u002c\u0020\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067 I\u0044\u003d\u0031\u0029\u0020\u0065\u006e\u0063\u006f\u0064i\u006e\u0067 \u0069\u006e\u0020t\u0068\u0065\u0020'\u0063\u006d\u0061\u0070\u0027\u0020\u0074\u0061\u0062\u006c\u0065\u002e"
	)
	var _gbgf string
	if _bfeb, _cacfc := _gf.GetName(_bffa.Get("\u0053u\u0062\u0074\u0079\u0070\u0065")); _cacfc {
		_gbgf = _bfeb.String()
	}
	if _gbgf != "\u0054\u0072\u0075\u0065\u0054\u0079\u0070\u0065" {
		return _cgf
	}
	_adcg := _afea.FontDescriptor()
	_dabb, _cgccb := _gf.GetIntVal(_adcg.Flags)
	if !_cgccb {
		_df.Log.Debug("\u0066\u006c\u0061\u0067\u0073 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0066o\u0072\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069\u0070\u0074\u006f\u0072")
		return _af(_ccdd, _beada)
	}
	_bedb := (uint32(_dabb) >> 3) != 0
	if _bedb {
		return _cgf
	}
	_cbbae, _cgccb := _gf.GetName(_bffa.Get("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067"))
	if !_cgccb {
		return _af(_ccdd, _beada)
	}
	switch _cbbae.String() {
	case "\u004d\u0061c\u0052\u006f\u006da\u006e\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067", "\u0057i\u006eA\u006e\u0073\u0069\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067":
		return _cgf
	default:
		return _af(_ccdd, _beada)
	}
}

var _cgf = ViolatedRule{}

var _ Profile = (*Profile2B)(nil)

// String gets a string representation of the violated rule.
func (_ge ViolatedRule) String() string {
	return _c.Sprintf("\u0025\u0073\u003a\u0020\u0025\u0073", _ge.RuleNo, _ge.Detail)
}

func _gcd(_fbb []*_eg.Image, _caaf bool) error {
	_bfdf := _gf.PdfObjectName("\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B")
	if _caaf {
		_bfdf = "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"
	}
	for _, _gce := range _fbb {
		if _gce.Colorspace == _bfdf {
			continue
		}
		_agc, _cfde := _b.NewXObjectImageFromStream(_gce.Stream)
		if _cfde != nil {
			return _cfde
		}
		_bee, _cfde := _agc.ToImage()
		if _cfde != nil {
			return _cfde
		}
		_aae, _cfde := _bee.ToGoImage()
		if _cfde != nil {
			return _cfde
		}
		var _aga _b.PdfColorspace
		if _caaf {
			_aga = _b.NewPdfColorspaceDeviceCMYK()
			_aae, _cfde = _bg.CMYKConverter.Convert(_aae)
		} else {
			_aga = _b.NewPdfColorspaceDeviceRGB()
			_aae, _cfde = _bg.NRGBAConverter.Convert(_aae)
		}
		if _cfde != nil {
			return _cfde
		}
		_ffa, _gddd := _aae.(_bg.Image)
		if !_gddd {
			return _ee.New("\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074 \u0069\u006d\u0070\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002eI\u006d\u0061\u0067\u0065")
		}
		_bcf := _ffa.Base()
		_aba := &_b.Image{Width: int64(_bcf.Width), Height: int64(_bcf.Height), BitsPerComponent: int64(_bcf.BitsPerComponent), ColorComponents: _bcf.ColorComponents, Data: _bcf.Data}
		_aba.SetDecode(_bcf.Decode)
		_aba.SetAlpha(_bcf.Alpha)
		if _cfde = _agc.SetImage(_aba, _aga); _cfde != nil {
			return _cfde
		}
		_agc.ToPdfObject()
		_gce.ColorComponents = _bcf.ColorComponents
		_gce.Colorspace = _bfdf
	}
	return nil
}

func _efgga(_gceaf *_gf.PdfObjectDictionary, _aeba map[*_gf.PdfObjectStream][]byte, _cgcc map[*_gf.PdfObjectStream]*_dfc.CMap) ViolatedRule {
	const (
		_aggg = "\u0036.\u0033\u002e\u0033\u002d\u0034"
		_bcce = "\u0046\u006f\u0072\u0020\u0074\u0068\u006fs\u0065\u0020\u0043\u004d\u0061\u0070\u0073\u0020\u0074\u0068\u0061\u0074\u0020\u0061\u0072e\u0020\u0065m\u0062\u0065\u0064de\u0064\u002c\u0020\u0074\u0068\u0065\u0020\u0069\u006et\u0065\u0067\u0065\u0072 \u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0057\u004d\u006f\u0064\u0065\u0020\u0065\u006e\u0074r\u0079\u0020i\u006e t\u0068\u0065\u0020CM\u0061\u0070\u0020\u0064\u0069\u0063\u0074\u0069o\u006ea\u0072\u0079\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0069\u0064\u0065\u006e\u0074\u0069\u0063\u0061\u006c\u0020\u0074\u006f \u0074h\u0065\u0020\u0057\u004d\u006f\u0064e\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0074h\u0065\u0020\u0065\u006d\u0062\u0065\u0064\u0064ed\u0020\u0043\u004d\u0061\u0070\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u002e"
	)
	var _cfcdf string
	if _agfe, _eagea := _gf.GetName(_gceaf.Get("\u0053u\u0062\u0074\u0079\u0070\u0065")); _eagea {
		_cfcdf = _agfe.String()
	}
	if _cfcdf != "\u0054\u0079\u0070e\u0030" {
		return _cgf
	}
	_bage := _gceaf.Get("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067")
	if _, _cedd := _gf.GetName(_bage); _cedd {
		return _cgf
	}
	_dcfe, _debag := _gf.GetStream(_bage)
	if !_debag {
		return _af(_aggg, _bcce)
	}
	_ceeb, _geff := _dcge(_dcfe, _aeba, _cgcc)
	if _geff != nil {
		return _af(_aggg, _bcce)
	}
	_adabc, _bdbc := _gf.GetIntVal(_dcfe.Get("\u0057\u004d\u006fd\u0065"))
	_fbefd, _cdcc := _ceeb.WMode()
	if _bdbc && _cdcc {
		if _fbefd != _adabc {
			return _af(_aggg, _bcce)
		}
	}
	if (_bdbc && !_cdcc) || (!_bdbc && _cdcc) {
		return _af(_aggg, _bcce)
	}
	return _cgf
}

func _eabc(_cgdef *_gf.PdfObjectDictionary, _edfbb map[*_gf.PdfObjectStream][]byte, _effc map[*_gf.PdfObjectStream]*_dfc.CMap) ViolatedRule {
	const (
		_edc = "\u0036.\u0033\u002e\u0033\u002d\u0033"
		_gfb = "\u0041\u006cl \u0043\u004d\u0061\u0070\u0073\u0020\u0075\u0073e\u0064 \u0077i\u0074\u0068\u0069\u006e\u0020\u0061\u0020\u0063\u006f\u006e\u0066\u006f\u0072m\u0069n\u0067\u0020\u0066\u0069\u006c\u0065\u002c\u0020\u0065\u0078\u0063\u0065\u0070\u0074\u0020\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0048\u0020a\u006e\u0064\u0020\u0049\u0064\u0065\u006et\u0069\u0074\u0079-\u0056\u002c\u0020\u0073\u0068a\u006c\u006c \u0062\u0065\u0020\u0065\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0069\u006e\u0020\u0074h\u0061\u0074\u0020\u0066\u0069\u006c\u0065\u0020\u0061\u0073\u0020\u0064es\u0063\u0072\u0069\u0062\u0065\u0064\u0020\u0069\u006e\u0020\u0050\u0044F\u0020\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u00205\u002e\u0036\u002e\u0034\u002e"
	)
	var _gedg string
	if _ebdd, _fgdce := _gf.GetName(_cgdef.Get("\u0053u\u0062\u0074\u0079\u0070\u0065")); _fgdce {
		_gedg = _ebdd.String()
	}
	if _gedg != "\u0054\u0079\u0070e\u0030" {
		return _cgf
	}
	_aaaa := _cgdef.Get("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067")
	if _aaae, _bgfc := _gf.GetName(_aaaa); _bgfc {
		switch _aaae.String() {
		case "\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0048", "\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0056":
			return _cgf
		default:
			return _af(_edc, _gfb)
		}
	}
	_gdef, _abgaf := _gf.GetStream(_aaaa)
	if !_abgaf {
		return _af(_edc, _gfb)
	}
	_, _bbebb := _dcge(_gdef, _edfbb, _effc)
	if _bbebb != nil {
		return _af(_edc, _gfb)
	}
	return _cgf
}

func _eedfa(_ebecd *_b.CompliancePdfReader, _bgbg standardType, _abcbe bool) (_fcdb []ViolatedRule) {
	_agcd, _gedb := _gfad(_ebecd)
	if !_gedb {
		return []ViolatedRule{_af("\u0036.\u0037\u002e\u0032\u002d\u0031", "\u0063a\u0074a\u006c\u006f\u0067\u0020\u006eo\u0074\u0020f\u006f\u0075\u006e\u0064\u002e")}
	}
	_cdcce := _agcd.Get("\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061")
	if _cdcce == nil {
		return []ViolatedRule{_af("\u0036.\u0037\u002e\u0032\u002d\u0031", "\u006e\u006f\u0020\u0027\u004d\u0065\u0074\u0061d\u0061\u0074\u0061' \u006b\u0065\u0079\u0020\u0066\u006fu\u006e\u0064\u0020\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u0020\u0063\u0061\u0074\u0061\u006co\u0067\u002e"), _af("\u0036.\u0037\u002e\u0033\u002d\u0031", "\u0049\u0066\u0020\u005b\u0061\u0020\u0064\u006fc\u0075\u006d\u0065\u006e\u0074\u0020\u0069\u006e\u0066o\u0072\u006d\u0061t\u0069\u006f\u006e\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0061\u0070p\u0065\u0061r\u0073\u0020\u0069n\u0020\u0061 \u0064\u006f\u0063um\u0065\u006e\u0074\u005d\u002c\u0020\u0074\u0068\u0065n\u0020\u0061\u006c\u006c\u0020\u006f\u0066\u0020\u0069\u0074\u0073\u0020\u0065\u006e\u0074\u0072\u0069\u0065\u0073\u0020\u0074\u0068\u0061\u0074\u0020\u0068\u0061\u0076\u0065\u0020\u0061\u006e\u0061\u006c\u006f\u0067\u006fu\u0073\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073 \u0069\u006e\u0020\u0070\u0072\u0065\u0064e\u0066\u0069\u006e\u0065\u0064\u0020\u0058\u004d\u0050\u0020\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u0020\u2026 \u0073\u0068\u0061\u006c\u006c\u0020\u0061\u006c\u0073\u006f\u0020\u0062\u0065\u0020\u0065\u006d\u0062\u0065\u0064\u0064\u0065d\u0020\u0069\u006e\u0020\u0074he\u0020\u0066i\u006c\u0065 \u0069\u006e\u0020\u0058\u004d\u0050\u0020\u0066\u006f\u0072\u006d\u0020\u0077\u0069\u0074\u0068\u0020\u0065\u0071\u0075\u0069\u0076\u0061\u006c\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u002e")}
	}
	_bagca, _gedb := _gf.GetStream(_cdcce)
	if !_gedb {
		return []ViolatedRule{_af("\u0036.\u0037\u002e\u0032\u002d\u0032", "\u0063\u0061\u0074a\u006c\u006f\u0067\u0020\u0027\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061\u0027\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020a\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u002e"), _af("\u0036.\u0037\u002e\u0033\u002d\u0031", "\u0049\u0066\u0020\u005b\u0061\u0020\u0064\u006fc\u0075\u006d\u0065\u006e\u0074\u0020\u0069\u006e\u0066o\u0072\u006d\u0061t\u0069\u006f\u006e\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0061\u0070p\u0065\u0061r\u0073\u0020\u0069n\u0020\u0061 \u0064\u006f\u0063um\u0065\u006e\u0074\u005d\u002c\u0020\u0074\u0068\u0065n\u0020\u0061\u006c\u006c\u0020\u006f\u0066\u0020\u0069\u0074\u0073\u0020\u0065\u006e\u0074\u0072\u0069\u0065\u0073\u0020\u0074\u0068\u0061\u0074\u0020\u0068\u0061\u0076\u0065\u0020\u0061\u006e\u0061\u006c\u006f\u0067\u006fu\u0073\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073 \u0069\u006e\u0020\u0070\u0072\u0065\u0064e\u0066\u0069\u006e\u0065\u0064\u0020\u0058\u004d\u0050\u0020\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u0020\u2026 \u0073\u0068\u0061\u006c\u006c\u0020\u0061\u006c\u0073\u006f\u0020\u0062\u0065\u0020\u0065\u006d\u0062\u0065\u0064\u0064\u0065d\u0020\u0069\u006e\u0020\u0074he\u0020\u0066i\u006c\u0065 \u0069\u006e\u0020\u0058\u004d\u0050\u0020\u0066\u006f\u0072\u006d\u0020\u0077\u0069\u0074\u0068\u0020\u0065\u0071\u0075\u0069\u0076\u0061\u006c\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u002e")}
	}
	if _bagca.Get("\u0046\u0069\u006c\u0074\u0065\u0072") != nil {
		_fcdb = append(_fcdb, _af("\u0036.\u0037\u002e\u0032\u002d\u0032", "M\u0065\u0074a\u0064\u0061\u0074\u0061\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0064i\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0069\u0065\u0073\u0020\u0073\u0068\u0061\u006c\u006c \u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074h\u0065\u0020\u0046\u0069\u006c\u0074\u0065\u0072\u0020\u006b\u0065y\u002e"))
	}
	_acff, _ebedd := _ebf.LoadDocument(_bagca.Stream)
	if _ebedd != nil {
		return []ViolatedRule{_af("\u0036.\u0037\u002e\u0039\u002d\u0031", "The\u0020\u006d\u0065\u0074a\u0064\u0061t\u0061\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0063o\u006e\u0066\u006f\u0072\u006d\u0020\u0074o\u0020\u0058\u004d\u0050\u0020\u0053\u0070\u0065\u0063\u0069\u0066\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u0020\u0061\u006e\u0064\u0020\u0077\u0065\u006c\u006c\u0020\u0066\u006f\u0072\u006de\u0064\u0020\u0050\u0044\u0046\u0041\u0045\u0078\u0074e\u006e\u0073\u0069\u006f\u006e\u0020\u0053\u0063\u0068\u0065\u006da\u0020\u0066\u006fr\u0020\u0061\u006c\u006c\u0020\u0065\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e\u0073\u002e")}
	}
	_ebaf := _acff.GetGoXmpDocument()
	var _bgdcfb []*_gd.Namespace
	for _, _caac := range _ebaf.Namespaces() {
		switch _caac.Name {
		case _ae.NsDc.Name, _cc.NsPDF.Name, _fe.NsXmp.Name, _gdd.NsXmpRights.Name, _ag.Namespace.Name, _ea.Namespace.Name, _ff.NsXmpMM.Name, _ea.FieldNS.Name, _ea.SchemaNS.Name, _ea.PropertyNS.Name, "\u0073\u0074\u0045v\u0074", "\u0073\u0074\u0056e\u0072", "\u0073\u0074\u0052e\u0066", "\u0073\u0074\u0044i\u006d", "\u0078a\u0070\u0047\u0049\u006d\u0067", "\u0073\u0074\u004ao\u0062", "\u0078\u006d\u0070\u0069\u0064\u0071":
			continue
		}
		_bgdcfb = append(_bgdcfb, _caac)
	}
	_fbeg := true
	_ebdac, _ebedd := _acff.GetPdfaExtensionSchemas()
	if _ebedd == nil {
		for _, _dddc := range _bgdcfb {
			var _ccag bool
			for _bdgb := range _ebdac {
				if _dddc.URI == _ebdac[_bdgb].NamespaceURI {
					_ccag = true
					break
				}
			}
			if !_ccag {
				_fbeg = false
				break
			}
		}
	} else {
		_fbeg = false
	}
	if !_fbeg {
		_fcdb = append(_fcdb, _af("\u0036.\u0037\u002e\u0039\u002d\u0032", "\u0050\u0072\u006f\u0070\u0065\u0072\u0074i\u0065\u0073 \u0073\u0070\u0065\u0063\u0069\u0066\u0069ed\u0020\u0069\u006e\u0020\u0058M\u0050\u0020\u0066\u006f\u0072\u006d\u0020\u0073\u0068\u0061\u006cl\u0020\u0075\u0073\u0065\u0020\u0065\u0069\u0074\u0068\u0065\u0072\u0020\u0074\u0068\u0065\u0020\u0070\u0072\u0065\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0073\u0063\u0068\u0065\u006d\u0061\u0073 \u0064\u0065\u0066i\u006e\u0065\u0064\u0020\u0069\u006e\u0020\u0058\u004d\u0050\u0020\u0053\u0070\u0065\u0063\u0069\u0066\u0069\u0063\u0061\u0074\u0069\u006fn\u002c\u0020\u006f\u0072\u0020\u0065\u0078\u0074\u0065ns\u0069\u006f\u006e\u0020\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u0020\u0074\u0068\u0061\u0074 \u0063\u006f\u006d\u0070\u006c\u0079\u0020\u0077\u0069\u0074h\u0020\u0058\u004d\u0050\u0020\u0053\u0070e\u0063\u0069\u0066\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002e"))
	}
	_ddgg, _ebedd := _ebecd.GetPdfInfo()
	if _ebedd == nil {
		if !_acbd(_ddgg, _acff) {
			_fcdb = append(_fcdb, _af("\u0036.\u0037\u002e\u0033\u002d\u0031", "\u0049\u0066\u0020\u005b\u0061\u0020\u0064\u006fc\u0075\u006d\u0065\u006e\u0074\u0020\u0069\u006e\u0066o\u0072\u006d\u0061t\u0069\u006f\u006e\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0061\u0070p\u0065\u0061r\u0073\u0020\u0069n\u0020\u0061 \u0064\u006f\u0063um\u0065\u006e\u0074\u005d\u002c\u0020\u0074\u0068\u0065n\u0020\u0061\u006c\u006c\u0020\u006f\u0066\u0020\u0069\u0074\u0073\u0020\u0065\u006e\u0074\u0072\u0069\u0065\u0073\u0020\u0074\u0068\u0061\u0074\u0020\u0068\u0061\u0076\u0065\u0020\u0061\u006e\u0061\u006c\u006f\u0067\u006fu\u0073\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073 \u0069\u006e\u0020\u0070\u0072\u0065\u0064e\u0066\u0069\u006e\u0065\u0064\u0020\u0058\u004d\u0050\u0020\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u0020\u2026 \u0073\u0068\u0061\u006c\u006c\u0020\u0061\u006c\u0073\u006f\u0020\u0062\u0065\u0020\u0065\u006d\u0062\u0065\u0064\u0064\u0065d\u0020\u0069\u006e\u0020\u0074he\u0020\u0066i\u006c\u0065 \u0069\u006e\u0020\u0058\u004d\u0050\u0020\u0066\u006f\u0072\u006d\u0020\u0077\u0069\u0074\u0068\u0020\u0065\u0071\u0075\u0069\u0076\u0061\u006c\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u002e"))
		}
	} else if _, _afgab := _acff.GetMediaManagement(); _afgab {
		_fcdb = append(_fcdb, _af("\u0036.\u0037\u002e\u0033\u002d\u0031", "\u0049\u0066\u0020\u005b\u0061\u0020\u0064\u006fc\u0075\u006d\u0065\u006e\u0074\u0020\u0069\u006e\u0066o\u0072\u006d\u0061t\u0069\u006f\u006e\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0061\u0070p\u0065\u0061r\u0073\u0020\u0069n\u0020\u0061 \u0064\u006f\u0063um\u0065\u006e\u0074\u005d\u002c\u0020\u0074\u0068\u0065n\u0020\u0061\u006c\u006c\u0020\u006f\u0066\u0020\u0069\u0074\u0073\u0020\u0065\u006e\u0074\u0072\u0069\u0065\u0073\u0020\u0074\u0068\u0061\u0074\u0020\u0068\u0061\u0076\u0065\u0020\u0061\u006e\u0061\u006c\u006f\u0067\u006fu\u0073\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073 \u0069\u006e\u0020\u0070\u0072\u0065\u0064e\u0066\u0069\u006e\u0065\u0064\u0020\u0058\u004d\u0050\u0020\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u0020\u2026 \u0073\u0068\u0061\u006c\u006c\u0020\u0061\u006c\u0073\u006f\u0020\u0062\u0065\u0020\u0065\u006d\u0062\u0065\u0064\u0064\u0065d\u0020\u0069\u006e\u0020\u0074he\u0020\u0066i\u006c\u0065 \u0069\u006e\u0020\u0058\u004d\u0050\u0020\u0066\u006f\u0072\u006d\u0020\u0077\u0069\u0074\u0068\u0020\u0065\u0071\u0075\u0069\u0076\u0061\u006c\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u002e"))
	}
	_adea, _gedb := _acff.GetPdfAID()
	if !_gedb {
		_fcdb = append(_fcdb, _af("\u0036\u002e\u0037\u002e\u0031\u0031\u002d\u0031", "\u0054\u0068\u0065\u0020\u0050\u0044\u0046\u002f\u0041\u0020\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u0020\u0061n\u0064\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0061\u006ec\u0065\u0020\u006c\u0065\u0076\u0065l\u0020\u006f\u0066\u0020\u0061\u0020\u0066\u0069\u006c\u0065\u0020\u0073h\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0073\u0070e\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0075\u0073\u0069\u006e\u0067\u0020\u0074\u0068\u0065\u0020\u0050\u0044\u0046\u002f\u0041\u0020\u0049\u0064\u0065\u006e\u0074\u0069\u0066\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e\u0020\u0073\u0063h\u0065\u006da."))
	} else {
		if _adea.Part != _bgbg._aac {
			_fcdb = append(_fcdb, _af("\u0036\u002e\u0037\u002e\u0031\u0031\u002d\u0032", "\u0054h\u0065\u0020\u0076\u0061lue\u0020\u006f\u0066\u0020p\u0064\u0066\u0061\u0069\u0064\u003a\u0070\u0061\u0072\u0074 \u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0074\u0068\u0065\u0020\u0070\u0061\u0072\u0074\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0049\u0053\u004f\u002019\u0030\u0030\u0035 \u0074\u006f\u0020\u0077\u0068i\u0063h\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u006c\u0065 \u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0073\u002e"))
		}
		if _bgbg._bc == "\u0041" && _adea.Conformance != "\u0041" {
			_fcdb = append(_fcdb, _af("\u0036\u002e\u0037\u002e\u0031\u0031\u002d\u0033", "\u0041\u0020\u004c\u0065\u0076e\u006c\u0020\u0041\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065 \u0073\u0068\u0061\u006c\u006c\u0020s\u0070\u0065\u0063i\u0066\u0079\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0070\u0064\u0066\u0061\u0069\u0064\u003a\u0063o\u006e\u0066\u006fr\u006d\u0061\u006e\u0063\u0065\u0020\u0061\u0073\u0020\u0041\u002e\u0020\u0041\u0020\u004c\u0065\u0076e\u006c\u0020\u0042\u0020\u0063\u006f\u006e\u0066o\u0072\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0073\u0070e\u0063\u0069\u0066\u0079\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0070\u0064\u0066\u0061\u0069d\u003a\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0061\u006e\u0063\u0065\u0020\u0061\u0073\u0020\u0042\u002e"))
		} else if _bgbg._bc == "\u0042" && (_adea.Conformance != "\u0041" && _adea.Conformance != "\u0042") {
			_fcdb = append(_fcdb, _af("\u0036\u002e\u0037\u002e\u0031\u0031\u002d\u0033", "\u0041\u0020\u004c\u0065\u0076e\u006c\u0020\u0041\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065 \u0073\u0068\u0061\u006c\u006c\u0020s\u0070\u0065\u0063i\u0066\u0079\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0070\u0064\u0066\u0061\u0069\u0064\u003a\u0063o\u006e\u0066\u006fr\u006d\u0061\u006e\u0063\u0065\u0020\u0061\u0073\u0020\u0041\u002e\u0020\u0041\u0020\u004c\u0065\u0076e\u006c\u0020\u0042\u0020\u0063\u006f\u006e\u0066o\u0072\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0073\u0070e\u0063\u0069\u0066\u0079\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0070\u0064\u0066\u0061\u0069d\u003a\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0061\u006e\u0063\u0065\u0020\u0061\u0073\u0020\u0042\u002e"))
		}
	}
	return _fcdb
}

func _fefb(_efec *_b.CompliancePdfReader, _cbefe standardType) (_badg []ViolatedRule) {
	var _efgaca, _bbafb, _dgad, _gdfa, _fcba, _cccag, _cgba, _agdg, _bbeg, _gefg, _feadd bool
	_ffdac := func() bool {
		return _efgaca && _bbafb && _dgad && _gdfa && _fcba && _cccag && _cgba && _agdg && _bbeg && _gefg && _feadd
	}
	_decb := map[*_gf.PdfObjectStream]*_dfc.CMap{}
	_dgae := map[*_gf.PdfObjectStream][]byte{}
	_febd := map[_gf.PdfObject]*_b.PdfFont{}
	for _, _bcge := range _efec.GetObjectNums() {
		_efbb, _afdeg := _efec.GetIndirectObjectByNumber(_bcge)
		if _afdeg != nil {
			continue
		}
		_dgaad, _bada := _gf.GetDict(_efbb)
		if !_bada {
			continue
		}
		_fcff, _bada := _gf.GetName(_dgaad.Get("\u0054\u0079\u0070\u0065"))
		if !_bada {
			continue
		}
		if *_fcff != "\u0046\u006f\u006e\u0074" {
			continue
		}
		_cedc, _afdeg := _b.NewPdfFontFromPdfObject(_dgaad)
		if _afdeg != nil {
			_df.Log.Debug("g\u0065\u0074\u0074\u0069\u006e\u0067 \u0066\u006f\u006e\u0074\u0020\u0066r\u006f\u006d\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0076", _afdeg)
			continue
		}
		_febd[_dgaad] = _cedc
	}
	for _, _gcggf := range _efec.PageList {
		_bbbdge, _cegc := _gcggf.GetContentStreams()
		if _cegc != nil {
			_df.Log.Debug("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0070\u0061\u0067\u0065\u0020\u0063o\u006e\u0074\u0065\u006e\u0074\u0020\u0073t\u0072\u0065\u0061\u006d\u0073\u0020\u0066\u0061\u0069\u006ce\u0064")
			continue
		}
		for _, _baag := range _bbbdge {
			_fbec := _eb.NewContentStreamParser(_baag)
			_gdba, _cebf := _fbec.Parse()
			if _cebf != nil {
				_df.Log.Debug("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074s\u0074r\u0065\u0061\u006d\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076", _cebf)
				continue
			}
			var _ggabg bool
			for _, _bed := range *_gdba {
				if _bed.Operand != "\u0054\u0072" {
					continue
				}
				if len(_bed.Params) != 1 {
					_df.Log.Debug("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0074\u0068\u0065\u0020\u0027\u0054\u0072\u0027\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u002c\u0020\u0065\u0078\u0070e\u0063\u0074\u0065\u0064\u0020\u0027\u0031\u0027\u0020\u0062\u0075\u0074 \u0069\u0073\u003a\u0020\u0027\u0025d\u0027", len(_bed.Params))
					continue
				}
				_fddb, _cbed := _gf.GetIntVal(_bed.Params[0])
				if !_cbed {
					_df.Log.Debug("\u0072\u0065\u006e\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u006d\u006f\u0064\u0065\u0020i\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072")
					continue
				}
				if _fddb == 3 {
					_ggabg = true
					break
				}
			}
			for _, _eacgc := range *_gdba {
				if _eacgc.Operand != "\u0054\u0066" {
					continue
				}
				if len(_eacgc.Params) != 2 {
					_df.Log.Debug("i\u006eva\u006ci\u0064 \u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066 \u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072s\u0020\u0066\u006f\u0072\u0020\u0074\u0068\u0065\u0020\u0027\u0054f\u0027\u0020\u006fper\u0061\u006e\u0064\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0027\u0032\u0027\u0020\u0069s\u003a \u0027\u0025\u0064\u0027", len(_eacgc.Params))
					continue
				}
				_faggg, _gdag := _gf.GetName(_eacgc.Params[0])
				if !_gdag {
					_df.Log.Debug("\u0045\u0052\u0052\u004f\u0052\u003a \u0054\u0066\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0047\u0065\u0074\u004ea\u006d\u0065\u0056\u0061\u006c\u0020\u0066a\u0069\u006c\u0065\u0064", _eacgc)
					continue
				}
				_dcga, _fgca := _gcggf.Resources.GetFontByName(*_faggg)
				if !_fgca {
					_df.Log.Debug("\u0066\u006f\u006e\u0074\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064")
					continue
				}
				_fgbd, _gdag := _gf.GetDict(_dcga)
				if !_gdag {
					_df.Log.Debug("\u0066\u006f\u006e\u0074 d\u0069\u0063\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064")
					continue
				}
				_dbfc, _gdag := _febd[_fgbd]
				if !_gdag {
					var _debg error
					_dbfc, _debg = _b.NewPdfFontFromPdfObject(_fgbd)
					if _debg != nil {
						_df.Log.Debug("\u0067\u0065\u0074\u0074i\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020\u0066\u0072o\u006d \u006f\u0062\u006a\u0065\u0063\u0074\u003a \u0025\u0076", _debg)
						continue
					}
					_febd[_fgbd] = _dbfc
				}
				if !_efgaca {
					_becc := _abga(_fgbd, _dgae, _decb)
					if _becc != _cgf {
						_badg = append(_badg, _becc)
						_efgaca = true
						if _ffdac() {
							return _badg
						}
					}
				}
				if !_bbafb {
					_baga := _egde(_fgbd)
					if _baga != _cgf {
						_badg = append(_badg, _baga)
						_bbafb = true
						if _ffdac() {
							return _badg
						}
					}
				}
				if !_dgad {
					_fgbe := _eabc(_fgbd, _dgae, _decb)
					if _fgbe != _cgf {
						_badg = append(_badg, _fgbe)
						_dgad = true
						if _ffdac() {
							return _badg
						}
					}
				}
				if !_gdfa {
					_eegb := _efgga(_fgbd, _dgae, _decb)
					if _eegb != _cgf {
						_badg = append(_badg, _eegb)
						_gdfa = true
						if _ffdac() {
							return _badg
						}
					}
				}
				if !_fcba {
					_cefee := _edca(_dbfc, _fgbd, _ggabg)
					if _cefee != _cgf {
						_fcba = true
						_badg = append(_badg, _cefee)
						if _ffdac() {
							return _badg
						}
					}
				}
				if !_cccag {
					_bdeb := _feeg(_dbfc, _fgbd)
					if _bdeb != _cgf {
						_cccag = true
						_badg = append(_badg, _bdeb)
						if _ffdac() {
							return _badg
						}
					}
				}
				if !_cgba {
					_daab := _aafc(_dbfc, _fgbd)
					if _daab != _cgf {
						_cgba = true
						_badg = append(_badg, _daab)
						if _ffdac() {
							return _badg
						}
					}
				}
				if !_agdg {
					_fdeg := _abab(_dbfc, _fgbd)
					if _fdeg != _cgf {
						_agdg = true
						_badg = append(_badg, _fdeg)
						if _ffdac() {
							return _badg
						}
					}
				}
				if !_bbeg {
					_geg := _faeb(_dbfc, _fgbd)
					if _geg != _cgf {
						_bbeg = true
						_badg = append(_badg, _geg)
						if _ffdac() {
							return _badg
						}
					}
				}
				if !_gefg {
					_gaec := _dccff(_dbfc, _fgbd)
					if _gaec != _cgf {
						_gefg = true
						_badg = append(_badg, _gaec)
						if _ffdac() {
							return _badg
						}
					}
				}
				if !_feadd && _cbefe._bc == "\u0041" {
					_fdcf := _caff(_fgbd, _dgae, _decb)
					if _fdcf != _cgf {
						_feadd = true
						_badg = append(_badg, _fdcf)
						if _ffdac() {
							return _badg
						}
					}
				}
			}
		}
	}
	return _badg
}

func _gafg(_agfbe *_b.CompliancePdfReader) (*_b.PdfOutputIntent, bool) {
	_aegfd, _egbf := _debdc(_agfbe)
	if !_egbf {
		return nil, false
	}
	_caee, _ccdf := _b.NewPdfOutputIntentFromPdfObject(_aegfd)
	if _ccdf != nil {
		return nil, false
	}
	return _caee, true
}

// NewProfile3U creates a new Profile3U with the given options.
func NewProfile3U(options *Profile3Options) *Profile3U {
	if options == nil {
		options = DefaultProfile3Options()
	}
	_dbe(options)
	return &Profile3U{profile3{_adcf: *options, _dggeb: _gg()}}
}

func _dcge(_afec *_gf.PdfObjectStream, _cbc map[*_gf.PdfObjectStream][]byte, _ddgbe map[*_gf.PdfObjectStream]*_dfc.CMap) (*_dfc.CMap, error) {
	_fagd, _baafd := _ddgbe[_afec]
	if !_baafd {
		var _bbeeg error
		_gdfgf, _bfbd := _cbc[_afec]
		if !_bfbd {
			_gdfgf, _bbeeg = _gf.DecodeStream(_afec)
			if _bbeeg != nil {
				_df.Log.Debug("\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0073\u0074r\u0065\u0061\u006d\u0020\u0066\u0061\u0069\u006c\u0065\u0064:\u0020\u0025\u0076", _bbeeg)
				return nil, _bbeeg
			}
			_cbc[_afec] = _gdfgf
		}
		_fagd, _bbeeg = _dfc.LoadCmapFromData(_gdfgf, false)
		if _bbeeg != nil {
			return nil, _bbeeg
		}
		_ddgbe[_afec] = _fagd
	}
	return _fagd, nil
}

func _gecf(_gcbdb *_b.CompliancePdfReader) ViolatedRule {
	_baec, _ageb := _gcbdb.GetTrailer()
	if _ageb != nil {
		_df.Log.Debug("\u0043\u0061\u006en\u006f\u0074\u0020\u0067e\u0074\u0020\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u0020\u0074\u0072\u0061\u0069\u006c\u0065\u0072\u003a\u0020\u0025\u0076", _ageb)
		return _cgf
	}
	_aeeb, _cccaf := _baec.Get("\u0052\u006f\u006f\u0074").(*_gf.PdfObjectReference)
	if !_cccaf {
		_df.Log.Debug("\u0043a\u006e\u006e\u006f\u0074 \u0066\u0069\u006e\u0064\u0020d\u006fc\u0075m\u0065\u006e\u0074\u0020\u0072\u006f\u006ft")
		return _cgf
	}
	_eage, _cccaf := _gf.GetDict(_gf.ResolveReference(_aeeb))
	if !_cccaf {
		_df.Log.Debug("\u0063\u0061\u006e\u006e\u006f\u0074 \u0072\u0065\u0073\u006f\u006c\u0076\u0065\u0020\u0063\u0061\u0074\u0061\u006co\u0067\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079")
		return _cgf
	}
	if _eage.Get("\u004f\u0043\u0050r\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073") != nil {
		return _af("\u0036\u002e\u0031\u002e\u0031\u0033\u002d\u0031", "\u0054\u0068\u0065\u0020\u0064\u006f\u0063u\u006d\u0065\u006e\u0074\u0020\u0063\u0061\u0074\u0061\u006c\u006f\u0067\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079\u0020s\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0020\u006b\u0065\u0079\u0020\u0077\u0069\u0074\u0068\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0020\u004f\u0043\u0050\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073")
	}
	return _cgf
}

func _gg() standardType { return standardType{_aac: 3, _bc: "\u0055"} }

// Profile1Options are the options that changes the way how optimizer may try to adapt document into PDF/A standard.
type Profile1Options struct {

	// CMYKDefaultColorSpace is an option that refers PDF/A-1
	CMYKDefaultColorSpace bool

	// Now is a function that returns current time.
	Now func() _d.Time

	// Xmp is the xmp options information.
	Xmp XmpOptions
}

func _cb() standardType { return standardType{_aac: 3, _bc: "\u0042"} }

func _bbggd(_dddb *_b.CompliancePdfReader) (_ccfcc []ViolatedRule) {
	_ggfc := true
	_ccfce, _bgea := _dddb.GetCatalogMarkInfo()
	if !_bgea {
		_ggfc = false
	} else {
		_addc, _bfdfa := _gf.GetDict(_ccfce)
		if _bfdfa {
			_ceec, _efaad := _gf.GetBool(_addc.Get("\u004d\u0061\u0072\u006b\u0065\u0064"))
			if !bool(*_ceec) || !_efaad {
				_ggfc = false
			}
		} else {
			_ggfc = false
		}
	}
	if !_ggfc {
		_ccfcc = append(_ccfcc, _af("\u0036.\u0038\u002e\u0032\u002e\u0032\u002d1", "\u0054\u0068\u0065\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u0020\u0063\u0061\u0074\u0061\u006cog\u0020d\u0069\u0063\u0074\u0069\u006f\u006e\u0061r\u0079 \u0073\u0068\u0061\u006c\u006c\u0020\u0069\u006e\u0063\u006c\u0075\u0064\u0065\u0020\u0061\u0020M\u0061r\u006b\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079\u0020\u0077\u0069\u0074\u0068\u0020\u0061 \u004d\u0061\u0072\u006b\u0065\u0064\u0020\u0065\u006et\u0072\u0079\u0020\u0069\u006e\u0020\u0069\u0074,\u0020\u0077\u0068\u006f\u0073\u0065\u0020\u0076\u0061lu\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0074\u0072\u0075\u0065"))
	}
	_cfdc, _bgea := _dddb.GetCatalogStructTreeRoot()
	if !_bgea {
		_ccfcc = append(_ccfcc, _af("\u0036.\u0038\u002e\u0033\u002e\u0033\u002d1", "\u0054\u0068\u0065\u0020\u006c\u006f\u0067\u0069\u0063\u0061\u006c\u0020\u0073\u0074\u0072\u0075\u0063\u0074\u0075r\u0065\u0020\u006f\u0066\u0020\u0074\u0068e\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0069\u006e\u0067 \u0066\u0069\u006c\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0064\u0065\u0073\u0063\u0072\u0069\u0062\u0065d \u0062\u0079\u0020a\u0020s\u0074\u0072\u0075\u0063\u0074\u0075\u0072e\u0020\u0068\u0069\u0065\u0072\u0061\u0072\u0063\u0068\u0079\u0020\u0072\u006f\u006ft\u0065\u0064\u0020i\u006e\u0020\u0074\u0068\u0065\u0020\u0053\u0074\u0072\u0075\u0063\u0074\u0054\u0072\u0065\u0065\u0052\u006f\u006f\u0074\u0020\u0065\u006e\u0074r\u0079\u0020\u006f\u0066\u0020\u0074h\u0065\u0020d\u006fc\u0075\u006d\u0065\u006e\u0074\u0020\u0063\u0061t\u0061\u006c\u006fg \u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002c\u0020\u0061\u0073\u0020\u0064\u0065\u0073\u0063\u0072\u0069\u0062\u0065\u0064\u0020\u0069n\u0020\u0050\u0044\u0046\u0020\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065 \u0039\u002e\u0036\u002e"))
	}
	_ebfg, _bgea := _gf.GetDict(_cfdc)
	if _bgea {
		_addg, _gfaf := _gf.GetName(_ebfg.Get("\u0052o\u006c\u0065\u004d\u0061\u0070"))
		if _gfaf {
			_agbgf, _ddca := _gf.GetDict(_addg)
			if _ddca {
				for _, _bdacf := range _agbgf.Keys() {
					_fdegg := _agbgf.Get(_bdacf)
					if _fdegg == nil {
						_ccfcc = append(_ccfcc, _af("\u0036.\u0038\u002e\u0033\u002e\u0034\u002d1", "\u0041\u006c\u006c\u0020\u006eo\u006e\u002ds\u0074\u0061\u006e\u0064\u0061\u0072\u0064\u0020\u0073t\u0072\u0075\u0063\u0074ure\u0020\u0074\u0079\u0070\u0065s\u0020\u0073\u0068\u0061\u006c\u006c \u0062\u0065\u0020\u006d\u0061\u0070\u0070\u0065d\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020n\u0065\u0061\u0072\u0065\u0073\u0074\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0061\u006c\u006c\u0079\u0020\u0065\u0071\u0075\u0069\u0076\u0061\u006c\u0065\u006e\u0074\u0020\u0073\u0074a\u006ed\u0061r\u0064\u0020\u0074\u0079\u0070\u0065\u002c\u0020\u0061\u0073\u0020\u0064\u0065\u0066\u0069\u006ee\u0064\u0020\u0069\u006e\u0020\u0050\u0044\u0046\u0020\u0052\u0065\u0066\u0065re\u006e\u0063e\u0020\u0039\u002e\u0037\u002e\u0034\u002c\u0020i\u006e\u0020\u0074\u0068e\u0020\u0072\u006fl\u0065\u0020\u006d\u0061p \u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u006f\u0066 \u0074h\u0065\u0020\u0073\u0074\u0072\u0075c\u0074\u0075r\u0065\u0020\u0074\u0072e\u0065\u0020\u0072\u006f\u006ft\u002e"))
					}
				}
			}
		}
	}
	return _ccfcc
}

var _ Profile = (*Profile2A)(nil)

func _eaaa(_deee *Profile2Options) {
	if _deee.Now == nil {
		_deee.Now = _d.Now
	}
}

func _cefgd(_cecb *_b.PdfFont, _fbdfa *_gf.PdfObjectDictionary, _abeb bool) ViolatedRule {
	const (
		_dbdg = "\u0036\u002e\u0032\u002e\u0031\u0031\u002e\u0034\u002d\u0031"
		_cfge = "\u0054\u0068\u0065\u0020\u0066\u006f\u006e\u0074\u0020\u0070\u0072\u006f\u0067\u0072\u0061\u006ds\u0020\u0066\u006fr\u0020\u0061\u006c\u006c\u0020f\u006f\u006e\u0074\u0073\u0020\u0075\u0073\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0072e\u006e\u0064\u0065\u0072\u0069\u006eg\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0061\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0065\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020w\u0069t\u0068\u0069\u006e\u0020\u0074\u0068\u0061\u0074\u0020\u0066\u0069\u006c\u0065\u002c \u0061\u0073\u0020\u0064\u0065\u0066\u0069n\u0065\u0064 \u0069\u006e\u0020\u0049S\u004f\u0020\u0033\u0032\u00300\u0030\u002d\u0031\u003a\u0032\u0030\u0030\u0038\u002c\u0020\u0039\u002e\u0039\u002e"
	)
	if _abeb {
		return _cgf
	}
	_defad := _cecb.FontDescriptor()
	var _gfgbg string
	if _gaae, _fade := _gf.GetName(_fbdfa.Get("\u0053u\u0062\u0074\u0079\u0070\u0065")); _fade {
		_gfgbg = _gaae.String()
	}
	switch _gfgbg {
	case "\u0054\u0079\u0070e\u0031":
		if _defad.FontFile == nil {
			return _af(_dbdg, _cfge)
		}
	case "\u0054\u0072\u0075\u0065\u0054\u0079\u0070\u0065":
		if _defad.FontFile2 == nil {
			return _af(_dbdg, _cfge)
		}
	case "\u0054\u0079\u0070e\u0030", "\u0054\u0079\u0070e\u0033":
	default:
		if _defad.FontFile3 == nil {
			return _af(_dbdg, _cfge)
		}
	}
	return _cgf
}

func _cadbd(_bdccc *_b.CompliancePdfReader) (_adbfd []ViolatedRule) {
	var (
		_cedgd, _bfgg, _gbeeg, _abfg, _bbff, _fecf, _dgde bool
		_cdbeg                                            func(_gf.PdfObject)
	)
	_cdbeg = func(_aede _gf.PdfObject) {
		switch _deaf := _aede.(type) {
		case *_gf.PdfObjectInteger:
			if !_cedgd && (int64(*_deaf) > _g.MaxInt32 || int64(*_deaf) < -_g.MaxInt32) {
				_adbfd = append(_adbfd, _af("\u0036\u002e\u0031\u002e\u0031\u0032\u002d\u0031", "L\u0061\u0072\u0067e\u0073\u0074\u0020\u0049\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u0073\u0020\u0032\u002c\u0031\u0034\u0037,\u0034\u0038\u0033,\u0036\u0034\u0037\u002e\u0020\u0053\u006d\u0061\u006c\u006c\u0065\u0073\u0074 \u0069\u006e\u0074\u0065g\u0065\u0072\u0020\u0076a\u006c\u0075\u0065\u0020\u0069\u0073\u0020\u002d\u0032\u002c\u0031\u0034\u0037\u002c\u0034\u0038\u0033,\u0036\u0034\u0038\u002e"))
				_cedgd = true
			}
		case *_gf.PdfObjectFloat:
			if !_bfgg && (_g.Abs(float64(*_deaf)) > 32767.0) {
				_adbfd = append(_adbfd, _af("\u0036\u002e\u0031\u002e\u0031\u0032\u002d\u0032", "\u0041\u0062\u0073\u006f\u006c\u0075\u0074\u0065\u0020\u0072\u0065\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u00332\u0037\u0036\u0037.\u0030\u002e"))
			}
		case *_gf.PdfObjectString:
			if !_gbeeg && len([]byte(_deaf.Str())) > 65535 {
				_adbfd = append(_adbfd, _af("\u0036\u002e\u0031\u002e\u0031\u0032\u002d\u0033", "M\u0061\u0078\u0069\u006d\u0075\u006d\u0020\u006c\u0065n\u0067\u0074\u0068\u0020\u006f\u0066\u0020a \u0073\u0074\u0072\u0069n\u0067\u0020\u0028\u0069\u006e\u0020\u0062\u0079\u0074es\u0029\u0020i\u0073\u0020\u0036\u0035\u0035\u0033\u0035\u002e"))
				_gbeeg = true
			}
		case *_gf.PdfObjectName:
			if !_abfg && len([]byte(*_deaf)) > 127 {
				_adbfd = append(_adbfd, _af("\u0036\u002e\u0031\u002e\u0031\u0032\u002d\u0034", "\u004d\u0061\u0078\u0069\u006d\u0075\u006d \u006c\u0065\u006eg\u0074\u0068\u0020\u006ff\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0069\u006e\u0020\u0062\u0079\u0074\u0065\u0073\u0029\u0020\u0069\u0073\u0020\u0031\u0032\u0037\u002e"))
				_abfg = true
			}
		case *_gf.PdfObjectArray:
			if !_bbff && _deaf.Len() > 8191 {
				_adbfd = append(_adbfd, _af("\u0036\u002e\u0031\u002e\u0031\u0032\u002d\u0035", "\u004d\u0061\u0078\u0069\u006d\u0075m\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006f\u0066\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079\u0020(\u0069\u006e\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0029\u0020\u0069s\u00208\u0031\u0039\u0031\u002e"))
				_bbff = true
			}
			for _, _gdea := range _deaf.Elements() {
				_cdbeg(_gdea)
			}
			if !_dgde && (_deaf.Len() == 4 || _deaf.Len() == 5) {
				_dcg, _ccfcf := _gf.GetName(_deaf.Get(0))
				if !_ccfcf {
					return
				}
				if *_dcg != "\u0044e\u0076\u0069\u0063\u0065\u004e" {
					return
				}
				_gcaa := _deaf.Get(1)
				_gcaa = _gf.TraceToDirectObject(_gcaa)
				_agfc, _ccfcf := _gf.GetArray(_gcaa)
				if !_ccfcf {
					return
				}
				if _agfc.Len() > 8 {
					_adbfd = append(_adbfd, _af("\u0036\u002e\u0031\u002e\u0031\u0032\u002d\u0039", "\u004d\u0061\u0078i\u006d\u0075\u006d\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0044\u0065\u0076\u0069\u0063\u0065\u004e\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074\u0073\u0020\u0069\u0073\u0020\u0038\u002e"))
					_dgde = true
				}
			}
		case *_gf.PdfObjectDictionary:
			_dbeb := _deaf.Keys()
			if !_fecf && len(_dbeb) > 4095 {
				_adbfd = append(_adbfd, _af("\u0036.\u0031\u002e\u0031\u0032\u002d\u00311", "\u004d\u0061\u0078\u0069\u006d\u0075\u006d\u0020\u0063\u0061\u0070\u0061\u0063\u0069\u0074y\u0020\u006f\u0066\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079\u0020\u0028\u0069\u006e\u0020\u0065\u006e\u0074\u0072\u0069es\u0029\u0020\u0069\u0073\u0020\u0034\u0030\u0039\u0035\u002e"))
				_fecf = true
			}
			for _fcdec, _aeea := range _dbeb {
				_cdbeg(&_dbeb[_fcdec])
				_cdbeg(_deaf.Get(_aeea))
			}
		case *_gf.PdfObjectStream:
			_cdbeg(_deaf.PdfObjectDictionary)
		case *_gf.PdfObjectStreams:
			for _, _aaca := range _deaf.Elements() {
				_cdbeg(_aaca)
			}
		case *_gf.PdfObjectReference:
			_cdbeg(_deaf.Resolve())
		}
	}
	_gged := _bdccc.GetObjectNums()
	if len(_gged) > 8388607 {
		_adbfd = append(_adbfd, _af("\u0036\u002e\u0031\u002e\u0031\u0032\u002d\u0037", "\u004d\u0061\u0078\u0069\u006d\u0075\u006d\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020in\u0064i\u0072\u0065\u0063\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0073 \u0069\u006e\u0020\u0061\u0020\u0050\u0044\u0046\u0020\u0066\u0069\u006c\u0065\u0020\u0069\u0073\u00208\u002c\u0033\u0038\u0038\u002c\u0036\u0030\u0037\u002e"))
	}
	for _, _gdccb := range _gged {
		_eedb, _accc := _bdccc.GetIndirectObjectByNumber(_gdccb)
		if _accc != nil {
			continue
		}
		_eefg := _gf.TraceToDirectObject(_eedb)
		_cdbeg(_eefg)
	}
	return _adbfd
}

// ValidateStandard checks if provided input CompliancePdfReader matches rules that conforms PDF/A-1 standard.
func (_eedf *profile1) ValidateStandard(r *_b.CompliancePdfReader) error {
	_ddab := VerificationError{ConformanceLevel: _eedf._bdg._aac, ConformanceVariant: _eedf._bdg._bc}
	if _aebg := _cgdc(r); _aebg != _cgf {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _aebg)
	}
	if _dgcg := _eagc(r); _dgcg != _cgf {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _dgcg)
	}
	if _fcde := _dbaga(r); _fcde != _cgf {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _fcde)
	}
	if _dgdg := _gcf(r); _dgdg != _cgf {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _dgdg)
	}
	if _dbf := _fag(r); _dbf != _cgf {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _dbf)
	}
	if _cbef := _fggcf(r); len(_cbef) != 0 {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _cbef...)
	}
	if _bdbe := _edgbd(r); _bdbe != _cgf {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _bdbe)
	}
	if _fddc := _cedg(r); len(_fddc) != 0 {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _fddc...)
	}
	if _ffaf := _fabc(r); len(_ffaf) != 0 {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _ffaf...)
	}
	if _egca := _dccc(r); len(_egca) != 0 {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _egca...)
	}
	if _defa := _aecee(r); _defa != _cgf {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _defa)
	}
	if _abbb := _aabg(r); len(_abbb) != 0 {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _abbb...)
	}
	if _bbac := _cadbd(r); len(_bbac) != 0 {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _bbac...)
	}
	if _bcag := _gecf(r); _bcag != _cgf {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _bcag)
	}
	if _dbac := _becg(r, false); len(_dbac) != 0 {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _dbac...)
	}
	if _agdf := _deec(r); len(_agdf) != 0 {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _agdf...)
	}
	if _bbbdg := _gee(r); _bbbdg != _cgf {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _bbbdg)
	}
	if _dcfg := _ggbg(r); _dcfg != _cgf {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _dcfg)
	}
	if _ggd := _cbgb(r); _ggd != _cgf {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _ggd)
	}
	if _cbbd := _cebb(r); _cbbd != _cgf {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _cbbd)
	}
	if _aaac := _bbbe(r); _aaac != _cgf {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _aaac)
	}
	if _bgf := _cbab(r); len(_bgf) != 0 {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _bgf...)
	}
	if _ebe := _fefb(r, _eedf._bdg); len(_ebe) != 0 {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _ebe...)
	}
	if _gadd := _add(r); len(_gadd) != 0 {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _gadd...)
	}
	if _gbbab := _gcad(r); _gbbab != _cgf {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _gbbab)
	}
	if _fca := _agaa(r); _fca != _cgf {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _fca)
	}
	if _debd := _aged(r); len(_debd) != 0 {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _debd...)
	}
	if _dfgf := _feec(r); len(_dfgf) != 0 {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _dfgf...)
	}
	if _gff := _bgaa(r); _gff != _cgf {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _gff)
	}
	if _gecd := _aaedc(r); _gecd != _cgf {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _gecd)
	}
	if _agad := _eedfa(r, _eedf._bdg, false); len(_agad) != 0 {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _agad...)
	}
	if _eedf._bdg == _dfg() {
		if _dff := _bbggd(r); len(_dff) != 0 {
			_ddab.ViolatedRules = append(_ddab.ViolatedRules, _dff...)
		}
	}
	if _fadd := _dgbab(r); len(_fadd) != 0 {
		_ddab.ViolatedRules = append(_ddab.ViolatedRules, _fadd...)
	}
	if len(_ddab.ViolatedRules) > 0 {
		_e.Slice(_ddab.ViolatedRules, func(_ged, _fbda int) bool {
			return _ddab.ViolatedRules[_ged].RuleNo < _ddab.ViolatedRules[_fbda].RuleNo
		})
		return _ddab
	}
	return nil
}

func _eaab(_begbd *_b.CompliancePdfReader) (_feegc []ViolatedRule) {
	var _eadf, _febg bool
	_cbfd := func() bool { return _eadf && _febg }
	for _, _bgegee := range _begbd.GetObjectNums() {
		_gacdf, _bdcef := _begbd.GetIndirectObjectByNumber(_bgegee)
		if _bdcef != nil {
			_df.Log.Debug("G\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0077\u0069\u0074\u0068 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0064\u0020fa\u0069\u006c\u0065d\u003a \u0025\u0076", _bgegee, _bdcef)
			continue
		}
		_aecg, _ggffe := _gf.GetDict(_gacdf)
		if !_ggffe {
			continue
		}
		_fcfba, _ggffe := _gf.GetName(_aecg.Get("\u0054\u0079\u0070\u0065"))
		if !_ggffe {
			continue
		}
		if *_fcfba != "\u0041\u0063\u0074\u0069\u006f\u006e" {
			continue
		}
		_ceca, _ggffe := _gf.GetName(_aecg.Get("\u0053"))
		if !_ggffe {
			if !_eadf {
				_feegc = append(_feegc, _af("\u0036.\u0035\u002e\u0031\u002d\u0031", "\u0054\u0068\u0065\u0020\u004caun\u0063\u0068\u002c\u0020S\u006f\u0075\u006e\u0064,\u0020\u004d\u006f\u0076\u0069\u0065\u002c\u0020\u0052\u0065\u0073\u0065\u0074\u0046\u006f\u0072\u006d\u002c\u0020\u0049\u006d\u0070\u006f\u0072\u0074\u0044a\u0074\u0061,\u0020\u0048\u0069\u0064\u0065\u002c\u0020\u0053\u0065\u0074\u004f\u0043\u0047\u0053\u0074\u0061\u0074\u0065\u002c\u0020\u0052\u0065\u006e\u0064\u0069\u0074\u0069\u006f\u006e\u002c\u0020T\u0072\u0061\u006e\u0073\u002c\u0020\u0047o\u0054\u006f\u0033\u0044\u0056\u0069\u0065\u0077\u0020\u0061\u006e\u0064\u0020\u004a\u0061v\u0061Sc\u0072\u0069p\u0074\u0020\u0061\u0063\u0074\u0069\u006f\u006e\u0073\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074 \u0062\u0065\u0020\u0070\u0065\u0072m\u0069\u0074\u0074\u0065\u0064\u002e \u0041\u0064d\u0069\u0074\u0069\u006f\u006e\u0061\u006c\u006c\u0079\u002c\u0020t\u0068\u0065\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0061\u0074\u0065\u0064\u0020\u0073\u0065\u0074\u002d\u0073\u0074\u0061\u0074\u0065\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006f\u0070\u0020\u0061c\u0074\u0069\u006f\u006e\u0073\u0020\u0073\u0068\u0061l\u006c\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u0070e\u0072\u006d\u0069\u0074\u0074\u0065\u0064\u002e"))
				_eadf = true
				if _cbfd() {
					return _feegc
				}
			}
			continue
		}
		switch _b.PdfActionType(*_ceca) {
		case _b.ActionTypeLaunch, _b.ActionTypeSound, _b.ActionTypeMovie, _b.ActionTypeResetForm, _b.ActionTypeImportData, _b.ActionTypeJavaScript, _b.ActionTypeHide, _b.ActionTypeSetOCGState, _b.ActionTypeRendition, _b.ActionTypeTrans, _b.ActionTypeGoTo3DView:
			if !_eadf {
				_feegc = append(_feegc, _af("\u0036.\u0035\u002e\u0031\u002d\u0031", "\u0054\u0068\u0065\u0020\u004caun\u0063\u0068\u002c\u0020S\u006f\u0075\u006e\u0064,\u0020\u004d\u006f\u0076\u0069\u0065\u002c\u0020\u0052\u0065\u0073\u0065\u0074\u0046\u006f\u0072\u006d\u002c\u0020\u0049\u006d\u0070\u006f\u0072\u0074\u0044a\u0074\u0061,\u0020\u0048\u0069\u0064\u0065\u002c\u0020\u0053\u0065\u0074\u004f\u0043\u0047\u0053\u0074\u0061\u0074\u0065\u002c\u0020\u0052\u0065\u006e\u0064\u0069\u0074\u0069\u006f\u006e\u002c\u0020T\u0072\u0061\u006e\u0073\u002c\u0020\u0047o\u0054\u006f\u0033\u0044\u0056\u0069\u0065\u0077\u0020\u0061\u006e\u0064\u0020\u004a\u0061v\u0061Sc\u0072\u0069p\u0074\u0020\u0061\u0063\u0074\u0069\u006f\u006e\u0073\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074 \u0062\u0065\u0020\u0070\u0065\u0072m\u0069\u0074\u0074\u0065\u0064\u002e \u0041\u0064d\u0069\u0074\u0069\u006f\u006e\u0061\u006c\u006c\u0079\u002c\u0020t\u0068\u0065\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0061\u0074\u0065\u0064\u0020\u0073\u0065\u0074\u002d\u0073\u0074\u0061\u0074\u0065\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006f\u0070\u0020\u0061c\u0074\u0069\u006f\u006e\u0073\u0020\u0073\u0068\u0061l\u006c\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u0070e\u0072\u006d\u0069\u0074\u0074\u0065\u0064\u002e"))
				_eadf = true
				if _cbfd() {
					return _feegc
				}
			}
			continue
		case _b.ActionTypeNamed:
			if !_febg {
				_gfcaa, _fcfe := _gf.GetName(_aecg.Get("\u004e"))
				if !_fcfe {
					_feegc = append(_feegc, _af("\u0036.\u0035\u002e\u0031\u002d\u0032", "N\u0061\u006d\u0065\u0064\u0020\u0061\u0063t\u0069\u006f\u006e\u0073\u0020\u006f\u0074\u0068e\u0072\u0020\u0074h\u0061\u006e\u0020\u004e\u0065\u0078\u0074\u0050\u0061\u0067\u0065\u002c\u0020P\u0072\u0065v\u0050\u0061\u0067\u0065\u002c\u0020\u0046\u0069\u0072\u0073\u0074\u0050a\u0067e\u002c\u0020\u0061\u006e\u0064\u0020\u004c\u0061\u0073\u0074\u0050\u0061\u0067\u0065\u0020\u0073h\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064\u002e"))
					_febg = true
					if _cbfd() {
						return _feegc
					}
					continue
				}
				switch *_gfcaa {
				case "\u004e\u0065\u0078\u0074\u0050\u0061\u0067\u0065", "\u0050\u0072\u0065\u0076\u0050\u0061\u0067\u0065", "\u0046i\u0072\u0073\u0074\u0050\u0061\u0067e", "\u004c\u0061\u0073\u0074\u0050\u0061\u0067\u0065":
				default:
					_feegc = append(_feegc, _af("\u0036.\u0035\u002e\u0031\u002d\u0032", "N\u0061\u006d\u0065\u0064\u0020\u0061\u0063t\u0069\u006f\u006e\u0073\u0020\u006f\u0074\u0068e\u0072\u0020\u0074h\u0061\u006e\u0020\u004e\u0065\u0078\u0074\u0050\u0061\u0067\u0065\u002c\u0020P\u0072\u0065v\u0050\u0061\u0067\u0065\u002c\u0020\u0046\u0069\u0072\u0073\u0074\u0050a\u0067e\u002c\u0020\u0061\u006e\u0064\u0020\u004c\u0061\u0073\u0074\u0050\u0061\u0067\u0065\u0020\u0073h\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064\u002e"))
					_febg = true
					if _cbfd() {
						return _feegc
					}
					continue
				}
			}
		}
	}
	return _feegc
}

// DefaultProfile1Options are the default options for the Profile1.
func DefaultProfile1Options() *Profile1Options {
	return &Profile1Options{Now: _d.Now, Xmp: XmpOptions{MarshalIndent: "\u0009"}}
}

func (_gdg *documentImages) hasOnlyDeviceCMYK() bool { return _gdg._gfc && !_gdg._bcd && !_gdg._ef }

func _ffdbc(_fbdfd *_b.CompliancePdfReader, _dbae standardType, _faeg bool) (_aeefb []ViolatedRule) {
	_bcdd, _gfdad := _gfad(_fbdfd)
	if !_gfdad {
		return []ViolatedRule{_af("\u0036.\u0036\u002e\u0032\u002e\u0031\u002d1", "\u0063a\u0074a\u006c\u006f\u0067\u0020\u006eo\u0074\u0020f\u006f\u0075\u006e\u0064\u002e")}
	}
	_aabab := _bcdd.Get("\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061")
	if _aabab == nil {
		return []ViolatedRule{_af("\u0036.\u0036\u002e\u0032\u002e\u0031\u002d1", "\u0054\u0068\u0065\u0020\u0043\u0061\u0074\u0061\u006c\u006f\u0067\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072y\u0020\u006f\u0066\u0020\u0061\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u0020\u0073h\u0061\u006c\u006c\u0020\u0063\u006f\u006e\u0074ai\u006e\u0020\u0074\u0068\u0065\u0020\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061\u0020\u006b\u0065\u0079\u0020\u0077\u0068\u006f\u0073\u0065\u0020v\u0061\u006c\u0075\u0065\u0020\u0069\u0073\u0020\u0061\u0020m\u0065\u0074\u0061\u0064\u0061\u0074\u0061\u0020s\u0074\u0072\u0065\u0061\u006d")}
	}
	_fdcb, _gfdad := _gf.GetStream(_aabab)
	if !_gfdad {
		return []ViolatedRule{_af("\u0036.\u0036\u002e\u0032\u002e\u0031\u002d1", "\u0054\u0068\u0065\u0020\u0043\u0061\u0074\u0061\u006c\u006f\u0067\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072y\u0020\u006f\u0066\u0020\u0061\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u0020\u0073h\u0061\u006c\u006c\u0020\u0063\u006f\u006e\u0074ai\u006e\u0020\u0074\u0068\u0065\u0020\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061\u0020\u006b\u0065\u0079\u0020\u0077\u0068\u006f\u0073\u0065\u0020v\u0061\u006c\u0075\u0065\u0020\u0069\u0073\u0020\u0061\u0020m\u0065\u0074\u0061\u0064\u0061\u0074\u0061\u0020s\u0074\u0072\u0065\u0061\u006d")}
	}
	_dafdg, _dgfa := _ebf.LoadDocument(_fdcb.Stream)
	if _dgfa != nil {
		return []ViolatedRule{_af("\u0036.\u0036\u002e\u0032\u002e\u0031\u002d4", "\u0041\u006c\u006c\u0020\u006de\u0074\u0061\u0064a\u0074\u0061\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020i\u006e \u0074\u0068\u0065\u0020\u0050\u0044\u0046 \u0073\u0068\u0061\u006c\u006c\u0020\u0063o\u006e\u0066\u006f\u0072\u006d\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u0058\u004d\u0050\u0020\u0053\u0070\u0065ci\u0066\u0069\u0063\u0061\u0074\u0069\u006fn\u002e\u0020\u0041\u006c\u006c\u0020c\u006fn\u0074\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0061\u006c\u006c\u0020\u0058\u004d\u0050\u0020p\u0061\u0063\u006b\u0065\u0074\u0073 \u0073h\u0061\u006c\u006c \u0062\u0065\u0020\u0077\u0065\u006c\u006c\u002d\u0066o\u0072\u006de\u0064")}
	}
	_daege := _dafdg.GetGoXmpDocument()
	var _ggbd []*_gd.Namespace
	for _, _eecdg := range _daege.Namespaces() {
		switch _eecdg.Name {
		case _ae.NsDc.Name, _cc.NsPDF.Name, _fe.NsXmp.Name, _gdd.NsXmpRights.Name, _ag.Namespace.Name, _ea.Namespace.Name, _ff.NsXmpMM.Name, _ea.FieldNS.Name, _ea.SchemaNS.Name, _ea.PropertyNS.Name, "\u0073\u0074\u0045v\u0074", "\u0073\u0074\u0056e\u0072", "\u0073\u0074\u0052e\u0066", "\u0073\u0074\u0044i\u006d", "\u0078a\u0070\u0047\u0049\u006d\u0067", "\u0073\u0074\u004ao\u0062", "\u0078\u006d\u0070\u0069\u0064\u0071":
			continue
		}
		_ggbd = append(_ggbd, _eecdg)
	}
	_acfc := true
	_bdgcg, _dgfa := _dafdg.GetPdfaExtensionSchemas()
	if _dgfa == nil {
		for _, _ebgb := range _ggbd {
			var _badcb bool
			for _gbacf := range _bdgcg {
				if _ebgb.URI == _bdgcg[_gbacf].NamespaceURI {
					_badcb = true
					break
				}
			}
			if !_badcb {
				_acfc = false
				break
			}
		}
	} else {
		_acfc = false
	}
	if !_acfc {
		_aeefb = append(_aeefb, _af("\u0036.\u0036\u002e\u0032\u002e\u0033\u002d7", "\u0041\u006c\u006c\u0020\u0070\u0072\u006f\u0070e\u0072\u0074\u0069e\u0073\u0020\u0073\u0070\u0065\u0063i\u0066\u0069\u0065\u0064\u0020\u0069\u006e\u0020\u0058\u004d\u0050\u0020\u0066\u006f\u0072m\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0075s\u0065\u0020\u0065\u0069\u0074\u0068\u0065\u0072\u0020\u0074\u0068\u0065\u0020\u0070\u0072\u0065\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0073\u0063he\u006da\u0073 \u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0058\u004d\u0050\u0020\u0053\u0070\u0065\u0063\u0069\u0066\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002c\u0020\u0049\u0053\u004f\u0020\u0031\u00390\u0030\u0035-\u0031\u0020\u006f\u0072\u0020\u0074h\u0069s\u0020\u0070\u0061\u0072\u0074\u0020\u006f\u0066\u0020\u0049\u0053\u004f\u0020\u0031\u0039\u0030\u0030\u0035\u002c\u0020o\u0072\u0020\u0061\u006e\u0079\u0020e\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e\u0020\u0073c\u0068\u0065\u006das\u0020\u0074\u0068\u0061\u0074\u0020\u0063\u006fm\u0070\u006c\u0079\u0020\u0077\u0069\u0074\u0068\u0020\u0036\u002e\u0036\u002e\u0032.\u0033\u002e\u0032\u002e"))
	}
	_dgaf, _gfdad := _dafdg.GetPdfAID()
	if !_gfdad {
		_aeefb = append(_aeefb, _af("\u0036.\u0036\u002e\u0034\u002d\u0031", "\u0054\u0068\u0065\u0020\u0050\u0044\u0046\u002f\u0041\u0020\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u0020\u0061n\u0064\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0061\u006ec\u0065\u0020\u006c\u0065\u0076\u0065l\u0020\u006f\u0066\u0020\u0061\u0020\u0066\u0069\u006c\u0065\u0020\u0073h\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0073\u0070e\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0075\u0073\u0069\u006e\u0067\u0020\u0074\u0068\u0065\u0020\u0050\u0044\u0046\u002f\u0041\u0020\u0049\u0064\u0065\u006e\u0074\u0069\u0066\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e\u0020\u0073\u0063h\u0065\u006da."))
	} else {
		if _dgaf.Part != _dbae._aac {
			_aeefb = append(_aeefb, _af("\u0036.\u0036\u002e\u0034\u002d\u0032", "\u0054h\u0065\u0020\u0076\u0061lue\u0020\u006f\u0066\u0020p\u0064\u0066\u0061\u0069\u0064\u003a\u0070\u0061\u0072\u0074 \u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0074\u0068\u0065\u0020\u0070\u0061\u0072\u0074\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0049\u0053\u004f\u002019\u0030\u0030\u0035 \u0074\u006f\u0020\u0077\u0068i\u0063h\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u006c\u0065 \u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0073\u002e"))
		}
		if _dbae._bc == "\u0041" && _dgaf.Conformance != "\u0041" {
			_aeefb = append(_aeefb, _af("\u0036.\u0036\u002e\u0034\u002d\u0033", "\u0041\u0020\u004c\u0065\u0076\u0065\u006c\u0020\u0041\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065 \u0073\u0068\u0061l\u006c\u0020\u0073\u0070ec\u0069\u0066\u0079\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006cu\u0065\u0020\u006f\u0066\u0020\u0070\u0064\u0066\u0061\u0069\u0064\u003a\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0061\u006ec\u0065\u0020as\u0020\u0041\u002e\u0020\u0041 \u004c\u0065v\u0065\u006c\u0020\u0042\u0020c\u006f\u006e\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u0020\u0073\u0068\u0061\u006cl\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0079\u0020\u0074\u0068\u0065\u0020\u0076\u0061lu\u0065\u0020o\u0066 \u0070\u0064\u0066\u0061\u0069d\u003a\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0061\u006e\u0063\u0065\u0020\u0061\u0073\u0020\u0042\u002e\u0020\u0041\u0020\u004c\u0065\u0076\u0065\u006c \u0055\u0020\u0063\u006f\u006e\u0066\u006fr\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020s\u0070\u0065\u0063\u0069\u0066\u0079 \u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff\u0020\u0070\u0064f\u0061i\u0064\u003ac\u006fn\u0066\u006f\u0072\u006d\u0061\u006e\u0063\u0065 \u0061\u0073\u0020\u0055."))
		} else if _dbae._bc == "\u0055" && (_dgaf.Conformance != "\u0041" && _dgaf.Conformance != "\u0055") {
			_aeefb = append(_aeefb, _af("\u0036.\u0036\u002e\u0034\u002d\u0033", "\u0041\u0020\u004c\u0065\u0076\u0065\u006c\u0020\u0041\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065 \u0073\u0068\u0061l\u006c\u0020\u0073\u0070ec\u0069\u0066\u0079\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006cu\u0065\u0020\u006f\u0066\u0020\u0070\u0064\u0066\u0061\u0069\u0064\u003a\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0061\u006ec\u0065\u0020as\u0020\u0041\u002e\u0020\u0041 \u004c\u0065v\u0065\u006c\u0020\u0042\u0020c\u006f\u006e\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u0020\u0073\u0068\u0061\u006cl\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0079\u0020\u0074\u0068\u0065\u0020\u0076\u0061lu\u0065\u0020o\u0066 \u0070\u0064\u0066\u0061\u0069d\u003a\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0061\u006e\u0063\u0065\u0020\u0061\u0073\u0020\u0042\u002e\u0020\u0041\u0020\u004c\u0065\u0076\u0065\u006c \u0055\u0020\u0063\u006f\u006e\u0066\u006fr\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020s\u0070\u0065\u0063\u0069\u0066\u0079 \u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff\u0020\u0070\u0064f\u0061i\u0064\u003ac\u006fn\u0066\u006f\u0072\u006d\u0061\u006e\u0063\u0065 \u0061\u0073\u0020\u0055."))
		} else if _dbae._bc == "\u0042" && (_dgaf.Conformance != "\u0041" && _dgaf.Conformance != "\u0042" && _dgaf.Conformance != "\u0055") {
			_aeefb = append(_aeefb, _af("\u0036.\u0036\u002e\u0034\u002d\u0033", "\u0041\u0020\u004c\u0065\u0076\u0065\u006c\u0020\u0041\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065 \u0073\u0068\u0061l\u006c\u0020\u0073\u0070ec\u0069\u0066\u0079\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006cu\u0065\u0020\u006f\u0066\u0020\u0070\u0064\u0066\u0061\u0069\u0064\u003a\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0061\u006ec\u0065\u0020as\u0020\u0041\u002e\u0020\u0041 \u004c\u0065v\u0065\u006c\u0020\u0042\u0020c\u006f\u006e\u0066\u006f\u0072\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u0020\u0073\u0068\u0061\u006cl\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0079\u0020\u0074\u0068\u0065\u0020\u0076\u0061lu\u0065\u0020o\u0066 \u0070\u0064\u0066\u0061\u0069d\u003a\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0061\u006e\u0063\u0065\u0020\u0061\u0073\u0020\u0042\u002e\u0020\u0041\u0020\u004c\u0065\u0076\u0065\u006c \u0055\u0020\u0063\u006f\u006e\u0066\u006fr\u006d\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020s\u0070\u0065\u0063\u0069\u0066\u0079 \u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff\u0020\u0070\u0064f\u0061i\u0064\u003ac\u006fn\u0066\u006f\u0072\u006d\u0061\u006e\u0063\u0065 \u0061\u0073\u0020\u0055."))
		}
	}
	return _aeefb
}

func _cebb(_eccbc *_b.CompliancePdfReader) ViolatedRule { return _cgf }

func _agga(_daff standardType, _ffe *_eg.OutputIntents) error {
	_fda, _ggec := _ebc.NewISOCoatedV2Gray1CBasOutputIntent(_daff.outputIntentSubtype())
	if _ggec != nil {
		return _ggec
	}
	if _ggec = _ffe.Add(_fda.ToPdfObject()); _ggec != nil {
		return _ggec
	}
	return nil
}

func _cfcae(_bgfb *_b.CompliancePdfReader) (_dedc []ViolatedRule) {
	_aeebc := _bgfb.GetObjectNums()
	for _, _fcdc := range _aeebc {
		_gfecd, _befd := _bgfb.GetIndirectObjectByNumber(_fcdc)
		if _befd != nil {
			continue
		}
		_bacec, _cacb := _gf.GetDict(_gfecd)
		if !_cacb {
			continue
		}
		_daafe, _cacb := _gf.GetName(_bacec.Get("\u0054\u0079\u0070\u0065"))
		if !_cacb {
			continue
		}
		if _daafe.String() != "\u0046\u0069\u006c\u0065\u0073\u0070\u0065\u0063" {
			continue
		}
		_fgecc, _befd := _b.NewPdfFilespecFromObj(_bacec)
		if _befd != nil {
			continue
		}
		if _fgecc.EF != nil {
			if _fgecc.F == nil || _fgecc.UF == nil {
				_dedc = append(_dedc, _af("\u0036\u002e\u0038-\u0032", "\u0054h\u0065\u0020\u0066\u0069\u006c\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0063\u0061\u0074i\u006f\u006e\u0020\u0064\u0069\u0063t\u0069\u006fn\u0061\u0072\u0079\u0020\u0066\u006f\u0072\u0020\u0061\u006e\u0020\u0065\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u0069\u006c\u0065\u0020\u0073\u0068\u0061\u006cl\u0020\u0063\u006f\u006e\u0074a\u0069\u006e\u0020t\u0068\u0065\u0020\u0046\u0020a\u006e\u0064\u0020\u0055\u0046\u0020\u006b\u0065\u0079\u0073\u002e"))
				break
			}
			if _fgecc.AFRelationship == nil {
				_dedc = append(_dedc, _af("\u0036\u002e\u0038-\u0033", "\u0049\u006e\u0020\u006f\u0072d\u0065\u0072\u0020\u0074\u006f\u0020\u0065\u006e\u0061\u0062\u006c\u0065\u0020i\u0064\u0065nt\u0069\u0066\u0069c\u0061\u0074\u0069o\u006e\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0074\u0068\u0065\u0020fi\u006ce\u0020\u0073\u0070\u0065\u0063\u0069f\u0069c\u0061\u0074\u0069o\u006e\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020c\u006f\u006e\u0074e\u006e\u0074\u0020\u0074\u0068\u0061\u0074\u0020\u0069\u0073\u0020\u0072\u0065\u0066\u0065\u0072\u0072\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0069\u0074\u002c\u0020\u0061\u0020\u006e\u0065\u0077\u0020(\u0072\u0065\u0071\u0075i\u0072\u0065\u0064\u0029\u0020\u006be\u0079\u0020h\u0061\u0073\u0020\u0062e\u0065\u006e\u0020\u0064\u0065\u0066i\u006e\u0065\u0064\u0020a\u006e\u0064\u0020\u0069\u0074s \u0070\u0072e\u0073\u0065n\u0063\u0065\u0020\u0028\u0069\u006e\u0020\u0074\u0068e\u0020\u0064\u0069\u0063\u0074i\u006f\u006e\u0061\u0072\u0079\u0029\u0020\u0069\u0073\u0020\u0072\u0065q\u0075\u0069\u0072e\u0064\u002e"))
				break
			}
			_gfcee, _baecc := _b.NewEmbeddedFileFromObject(_fgecc.EF)
			if _baecc != nil {
				continue
			}
			if _ec.ToLower(_gfcee.FileType) != "\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0070\u0064\u0066" {
				_dedc = append(_dedc, _af("\u0036\u002e\u0038-\u0034", "\u0041\u006c\u006c\u0020\u0065\u006d\u0062\u0065\u0064d\u0065\u0064 \u0066\u0069\u006c\u0065\u0073\u0020\u0073\u0068\u006fu\u006c\u0064\u0020\u0062e\u0020\u0061\u0020\u0050\u0044\u0046\u0020\u0066\u0069\u006c\u0065\u0020\u0074\u0068\u0061\u0074\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0020\u0074\u006f\u0020\u0050\u0044F\u002f\u0041\u002d1\u0020\u006f\u0072\u0020\u0050\u0044\u0046\u002f\u0041\u002d\u0032\u002e"))
				break
			}
		}
	}
	return _dedc
}

func _ab() standardType { return standardType{_aac: 2, _bc: "\u0041"} }

func _accef(_cgee *_b.CompliancePdfReader) (_dccg []ViolatedRule) {
	_fcee, _gdaae := _gfad(_cgee)
	if !_gdaae {
		return _dccg
	}
	_cfeg, _gdaae := _gf.GetDict(_fcee.Get("\u004e\u0061\u006de\u0073"))
	if !_gdaae {
		return _dccg
	}
	if _cfeg.Get("\u0041\u006c\u0074\u0065rn\u0061\u0074\u0065\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006fn\u0073") != nil {
		_dccg = append(_dccg, _af("\u0036\u002e\u0031\u0030\u002d\u0031", "T\u0068\u0065\u0072e\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u006e\u006f\u0020\u0041\u006c\u0074\u0065\u0072\u006e\u0061\u0074\u0065\u0050\u0072\u0065s\u0065\u006e\u0074a\u0074\u0069\u006f\u006e\u0073\u0020\u0065\u006e\u0074\u0072\u0079\u0020\u0069n\u0020\u0074\u0068\u0065 \u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0027\u0073\u0020\u006e\u0061\u006d\u0065\u0020\u0064\u0069\u0063\u0074\u0069\u006fn\u0061\u0072\u0079\u002e"))
	}
	return _dccg
}

func _dccc(_ffbbg *_b.CompliancePdfReader) []ViolatedRule { return nil }

// Part gets the PDF/A version level.
func (_cccb *profile2) Part() int { return _cccb._eggde._aac }

func _abaa(_cfa *_eg.Document) error {
	_adb := map[string]*_gf.PdfObjectDictionary{}
	_fecc := _cf.NewFinder(&_cf.FinderOpts{Extensions: []string{"\u002e\u0074\u0074\u0066", "\u002e\u0074\u0074\u0063"}})
	_aaa := map[_gf.PdfObject]struct{}{}
	_gdc := map[_gf.PdfObject]struct{}{}
	for _, _fbe := range _cfa.Objects {
		_fc, _cad := _gf.GetDict(_fbe)
		if !_cad {
			continue
		}
		_gae := _fc.Get("\u0054\u0079\u0070\u0065")
		if _gae == nil {
			continue
		}
		if _caaa, _gb := _gf.GetName(_gae); _gb && _caaa.String() != "\u0046\u006f\u006e\u0074" {
			continue
		}
		if _, _acd := _aaa[_fbe]; _acd {
			continue
		}
		_cca, _fadc := _b.NewPdfFontFromPdfObject(_fc)
		if _fadc != nil {
			_df.Log.Debug("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u006c\u006f\u0061\u0064\u0020\u0066\u006fn\u0074\u0020\u0066\u0072\u006fm\u0020\u006fb\u006a\u0065\u0063\u0074")
			return _fadc
		}
		if _cca.Encoder() != nil && (_cca.Encoder().String() == "\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0048" || _cca.Encoder().String() == "\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0056") {
			continue
		}
		if _cca.Subtype() == "\u0043\u0049\u0044F\u006f\u006e\u0074\u0054\u0079\u0070\u0065\u0032" {
			_bec := _cca.GetCIDToGIDMapObject()
			if _bec != nil {
				continue
			}
		}
		_bbg, _fadc := _cca.GetFontDescriptor()
		if _fadc != nil {
			return _fadc
		}
		if _bbg != nil && (_bbg.FontFile != nil || _bbg.FontFile2 != nil || _bbg.FontFile3 != nil) {
			continue
		}
		_faa := _cca.BaseFont()
		if _faa == "" {
			_egf, _aff := _cca.GetFontDescriptor()
			if _aff != nil {
				return _c.Errorf("\u0063\u0061\u006e\u0027\u0074\u0020\u0067\u0065t\u0020\u0074\u0068e \u0066\u006f\u006e\u0074\u0020\u006ea\u006d\u0065\u0020\u0066\u0072\u006f\u006d\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065s\u0063\u0072\u0069\u0070\u0074\u006f\u0072\u003a \u0025\u0073", _fc.String())
			}
			_faa = _egf.FontName.String()
			if _faa == "" {
				return _c.Errorf("\u006f\u006e\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0073\u0020\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0076\u0061\u006c\u0069d\u0020\u002d\u0020\u0042\u0061\u0073\u0065\u0046\u006f\u006e\u0074\u0020\u0075\u006ed\u0065\u0066\u0069n\u0065\u0064\u003a\u0020\u0025\u0073", _fc.String())
			}
		}
		_cfgb, _fae := _adb[_faa]
		if !_fae {
			if len(_faa) > 7 && _faa[6] == '+' {
				_faa = _faa[7:]
			}
			_ebd := []string{_faa, "\u0054i\u006de\u0073\u0020\u004e\u0065\u0077\u0020\u0052\u006f\u006d\u0061\u006e", "\u0041\u0072\u0069a\u006c", "D\u0065\u006a\u0061\u0056\u0075\u0020\u0053\u0061\u006e\u0073"}
			for _, _acdb := range _ebd {
				_df.Log.Debug("\u0044\u0045\u0042\u0055\u0047\u003a \u0073\u0065\u0061\u0072\u0063\u0068\u0069\u006e\u0067\u0020\u0073\u0079\u0073t\u0065\u006d\u0020\u0066\u006f\u006e\u0074 \u0060\u0025\u0073\u0060", _acdb)
				if _cfgb, _fae = _adb[_acdb]; _fae {
					break
				}
				_dee := _fecc.Match(_acdb)
				if _dee == nil {
					_df.Log.Debug("c\u006f\u0075\u006c\u0064\u0020\u006eo\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0066\u006fn\u0074\u0020\u0066i\u006ce\u0020\u0025\u0073", _acdb)
					continue
				}
				_ebde, _dgea := _b.NewPdfFontFromTTFFile(_dee.Filename)
				if _dgea != nil {
					return _dgea
				}
				_gbe := _ebde.FontDescriptor()
				if _gbe.FontFile != nil {
					if _, _fae = _gdc[_gbe.FontFile]; !_fae {
						_cfa.Objects = append(_cfa.Objects, _gbe.FontFile)
						_gdc[_gbe.FontFile] = struct{}{}
					}
				}
				if _gbe.FontFile2 != nil {
					if _, _fae = _gdc[_gbe.FontFile2]; !_fae {
						_cfa.Objects = append(_cfa.Objects, _gbe.FontFile2)
						_gdc[_gbe.FontFile2] = struct{}{}
					}
				}
				if _gbe.FontFile3 != nil {
					if _, _fae = _gdc[_gbe.FontFile3]; !_fae {
						_cfa.Objects = append(_cfa.Objects, _gbe.FontFile3)
						_gdc[_gbe.FontFile3] = struct{}{}
					}
				}
				_dce, _aaff := _ebde.ToPdfObject().(*_gf.PdfIndirectObject)
				if !_aaff {
					_df.Log.Debug("\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006e\u006ft\u0020\u0061\u006e\u0020\u0069\u006e\u0064i\u0072\u0065\u0063\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074")
					continue
				}
				_bgdc, _aaff := _dce.PdfObject.(*_gf.PdfObjectDictionary)
				if !_aaff {
					_df.Log.Debug("\u0046\u006fn\u0074\u0020\u0074\u0079p\u0065\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006e \u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079")
					continue
				}
				_adb[_acdb] = _bgdc
				_cfgb = _bgdc
				break
			}
			if _cfgb == nil {
				_df.Log.Debug("\u004e\u006f\u0020\u006d\u0061\u0074\u0063\u0068\u0069\u006eg\u0020\u0066\u006f\u006e\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u0066\u006f\u0072\u003a\u0020\u0025\u0073", _cca.BaseFont())
				return _ee.New("\u006e\u006f m\u0061\u0074\u0063h\u0069\u006e\u0067\u0020fon\u0074 f\u006f\u0075\u006e\u0064\u0020\u0069\u006e t\u0068\u0065\u0020\u0073\u0079\u0073\u0074e\u006d")
			}
		}
		for _, _ebb := range _cfgb.Keys() {
			_fc.Set(_ebb, _cfgb.Get(_ebb))
		}
		_bbcd := _cfgb.Get("\u0057\u0069\u0064\u0074\u0068\u0073")
		if _bbcd != nil {
			if _, _fae = _gdc[_bbcd]; !_fae {
				_cfa.Objects = append(_cfa.Objects, _bbcd)
				_gdc[_bbcd] = struct{}{}
			}
		}
		_aaa[_fbe] = struct{}{}
		_cae := _fc.Get("\u0046\u006f\u006e\u0074\u0044\u0065\u0073\u0063\u0072i\u0070\u0074\u006f\u0072")
		if _cae != nil {
			_cfa.Objects = append(_cfa.Objects, _cae)
			_gdc[_cae] = struct{}{}
		}
	}
	return nil
}

// StandardName gets the name of the standard.
func (_gfe *profile3) StandardName() string {
	return _c.Sprintf("\u0050D\u0046\u002f\u0041\u002d\u0033\u0025s", _gfe._dggeb._bc)
}

func _bbbd(_gcbd *_eg.Document) error {
	_efgg := func(_cbacb *_gf.PdfObjectDictionary) error {
		if _cbacb.Get("\u0054\u0052") != nil {
			_df.Log.Debug("\u0045\u0078\u0074\u0047\u0053\u0074\u0061\u0074\u0065\u0020\u006f\u0062\u006a\u0065\u0063t\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0073\u0020\u0054\u0052\u0020\u006b\u0065\u0079")
			_cbacb.Remove("\u0054\u0052")
		}
		_efgf := _cbacb.Get("\u0054\u0052\u0032")
		if _efgf != nil {
			_fbgg := _efgf.String()
			if _fbgg != "\u0044e\u0066\u0061\u0075\u006c\u0074" {
				_df.Log.Debug("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074\u0065 o\u0062\u006a\u0065\u0063\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0073 \u0054\u00522\u0020\u006b\u0065y\u0020\u0077\u0069\u0074\u0068\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0074\u0068\u0065r\u0020\u0074ha\u006e\u0020\u0044e\u0066\u0061\u0075\u006c\u0074")
				_cbacb.Set("\u0054\u0052\u0032", _gf.MakeName("\u0044e\u0066\u0061\u0075\u006c\u0074"))
			}
		}
		if _cbacb.Get("\u0048\u0054\u0050") != nil {
			_df.Log.Debug("\u0045\u0078\u0074\u0047\u0053\u0074a\u0074\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0063\u006f\u006et\u0061\u0069\u006e\u0073\u0020\u0048\u0054P\u0020\u006b\u0065\u0079")
			_cbacb.Remove("\u0048\u0054\u0050")
		}
		_eggd := _cbacb.Get("\u0042\u004d")
		if _eggd != nil {
			_dbag, _dfgc := _gf.GetName(_eggd)
			if !_dfgc {
				_df.Log.Debug("E\u0078\u0074\u0047\u0053\u0074\u0061t\u0065\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u0027\u0042\u004d\u0027\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061m\u0065")
				_dbag = _gf.MakeName("")
			}
			_ccb := _dbag.String()
			switch _ccb {
			case "\u004e\u006f\u0072\u006d\u0061\u006c", "\u0043\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u006c\u0065", "\u004d\u0075\u006c\u0074\u0069\u0070\u006c\u0079", "\u0053\u0063\u0072\u0065\u0065\u006e", "\u004fv\u0065\u0072\u006c\u0061\u0079", "\u0044\u0061\u0072\u006b\u0065\u006e", "\u004ci\u0067\u0068\u0074\u0065\u006e", "\u0043\u006f\u006c\u006f\u0072\u0044\u006f\u0064\u0067\u0065", "\u0043o\u006c\u006f\u0072\u0042\u0075\u0072n", "\u0048a\u0072\u0064\u004c\u0069\u0067\u0068t", "\u0053o\u0066\u0074\u004c\u0069\u0067\u0068t", "\u0044\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0063\u0065", "\u0045x\u0063\u006c\u0075\u0073\u0069\u006fn", "\u0048\u0075\u0065", "\u0053\u0061\u0074\u0075\u0072\u0061\u0074\u0069\u006f\u006e", "\u0043\u006f\u006co\u0072", "\u004c\u0075\u006d\u0069\u006e\u006f\u0073\u0069\u0074\u0079":
			default:
				_cbacb.Set("\u0042\u004d", _gf.MakeName("\u004e\u006f\u0072\u006d\u0061\u006c"))
			}
		}
		return nil
	}
	_beacf, _egge := _gcbd.GetPages()
	if !_egge {
		return nil
	}
	for _, _gdgc := range _beacf {
		_ccfc, _daae := _gdgc.GetResources()
		if !_daae {
			continue
		}
		_aedf, _cccd := _gf.GetDict(_ccfc.Get("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"))
		if !_cccd {
			return nil
		}
		_cadff := _aedf.Keys()
		for _, _abca := range _cadff {
			_cgeac, _deed := _gf.GetDict(_aedf.Get(_abca))
			if !_deed {
				continue
			}
			_aadd := _efgg(_cgeac)
			if _aadd != nil {
				continue
			}
		}
	}
	for _, _eadb := range _beacf {
		_gdfgc, _eae := _eadb.GetContents()
		if !_eae {
			return nil
		}
		for _, _ebdb := range _gdfgc {
			_gcec, _efdc := _ebdb.GetData()
			if _efdc != nil {
				continue
			}
			_abaaf := _eb.NewContentStreamParser(string(_gcec))
			_cgfc, _efdc := _abaaf.Parse()
			if _efdc != nil {
				continue
			}
			for _, _adebg := range *_cgfc {
				if len(_adebg.Params) == 0 {
					continue
				}
				_, _dgge := _gf.GetName(_adebg.Params[0])
				if !_dgge {
					continue
				}
				_bfae, _gbec := _eadb.GetResourcesXObject()
				if !_gbec {
					continue
				}
				for _, _cbgd := range _bfae.Keys() {
					_cbgeg, _gdff := _gf.GetStream(_bfae.Get(_cbgd))
					if !_gdff {
						continue
					}
					_cdbf, _gdff := _gf.GetDict(_cbgeg.Get("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"))
					if !_gdff {
						continue
					}
					_bbec, _gdff := _gf.GetDict(_cdbf.Get("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"))
					if !_gdff {
						continue
					}
					for _, _dgaa := range _bbec.Keys() {
						_gbb, _bceg := _gf.GetDict(_bbec.Get(_dgaa))
						if !_bceg {
							continue
						}
						_geag := _efgg(_gbb)
						if _geag != nil {
							continue
						}
					}
				}
			}
		}
	}
	return nil
}

func _fdef(_efg *_b.PdfPageResources, _deg *_eb.ContentStreamOperations, _bddf bool) ([]byte, error) {
	var _ccec bool
	for _, _ebbc := range *_deg {
	_dbbfa:
		switch _ebbc.Operand {
		case "\u0042\u0049":
			_bgeg, _cbg := _ebbc.Params[0].(*_eb.ContentStreamInlineImage)
			if !_cbg {
				break
			}
			_eaa, _gbfc := _bgeg.GetColorSpace(_efg)
			if _gbfc != nil {
				return nil, _gbfc
			}
			switch _eaa.(type) {
			case *_b.PdfColorspaceDeviceCMYK:
				if _bddf {
					break _dbbfa
				}
			case *_b.PdfColorspaceDeviceGray:
			case *_b.PdfColorspaceDeviceRGB:
				if !_bddf {
					break _dbbfa
				}
			default:
				break _dbbfa
			}
			_ccec = true
			_fcbe, _gbfc := _bgeg.ToImage(_efg)
			if _gbfc != nil {
				return nil, _gbfc
			}
			_gec, _gbfc := _fcbe.ToGoImage()
			if _gbfc != nil {
				return nil, _gbfc
			}
			if _bddf {
				_gec, _gbfc = _bg.CMYKConverter.Convert(_gec)
			} else {
				_gec, _gbfc = _bg.NRGBAConverter.Convert(_gec)
			}
			if _gbfc != nil {
				return nil, _gbfc
			}
			_fcec, _cbg := _gec.(_bg.Image)
			if !_cbg {
				return nil, _ee.New("\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074 \u0069\u006d\u0070\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002eI\u006d\u0061\u0067\u0065")
			}
			_fdgd := _fcec.Base()
			_baeg := _b.Image{Width: int64(_fdgd.Width), Height: int64(_fdgd.Height), BitsPerComponent: int64(_fdgd.BitsPerComponent), ColorComponents: _fdgd.ColorComponents, Data: _fdgd.Data}
			_baeg.SetDecode(_fdgd.Decode)
			_baeg.SetAlpha(_fdgd.Alpha)
			_fbbg, _gbfc := _bgeg.GetEncoder()
			if _gbfc != nil {
				_fbbg = _gf.NewFlateEncoder()
			}
			_bbe, _gbfc := _eb.NewInlineImageFromImage(_baeg, _fbbg)
			if _gbfc != nil {
				return nil, _gbfc
			}
			_ebbc.Params[0] = _bbe
		case "\u0047", "\u0067":
			if len(_ebbc.Params) != 1 {
				break
			}
			_gcgb, _dgeb := _gf.GetNumberAsFloat(_ebbc.Params[0])
			if _dgeb != nil {
				break
			}
			if _bddf {
				_ebbc.Params = []_gf.PdfObject{_gf.MakeFloat(0), _gf.MakeFloat(0), _gf.MakeFloat(0), _gf.MakeFloat(1 - _gcgb)}
				_cac := "\u004b"
				if _ebbc.Operand == "\u0067" {
					_cac = "\u006b"
				}
				_ebbc.Operand = _cac
			} else {
				_ebbc.Params = []_gf.PdfObject{_gf.MakeFloat(_gcgb), _gf.MakeFloat(_gcgb), _gf.MakeFloat(_gcgb)}
				_adee := "\u0052\u0047"
				if _ebbc.Operand == "\u0067" {
					_adee = "\u0072\u0067"
				}
				_ebbc.Operand = _adee
			}
			_ccec = true
		case "\u0052\u0047", "\u0072\u0067":
			if !_bddf {
				break
			}
			if len(_ebbc.Params) != 3 {
				break
			}
			_bgdcf, _fcbf := _gf.GetNumbersAsFloat(_ebbc.Params)
			if _fcbf != nil {
				break
			}
			_ccec = true
			_bccg, _gef, _aaef := _bgdcf[0], _bgdcf[1], _bgdcf[2]
			_fggc, _ffdb, _fef, _agfb := _a.RGBToCMYK(uint8(_bccg*255), uint8(_gef*255), uint8(255*_aaef))
			_ebbc.Params = []_gf.PdfObject{_gf.MakeFloat(float64(_fggc) / 255), _gf.MakeFloat(float64(_ffdb) / 255), _gf.MakeFloat(float64(_fef) / 255), _gf.MakeFloat(float64(_agfb) / 255)}
			_efga := "\u004b"
			if _ebbc.Operand == "\u0072\u0067" {
				_efga = "\u006b"
			}
			_ebbc.Operand = _efga
		case "\u004b", "\u006b":
			if _bddf {
				break
			}
			if len(_ebbc.Params) != 4 {
				break
			}
			_edgc, _dbaf := _gf.GetNumbersAsFloat(_ebbc.Params)
			if _dbaf != nil {
				break
			}
			_cbge, _cadb, _agef, _afeb := _edgc[0], _edgc[1], _edgc[2], _edgc[3]
			_cged, _bbcg, _abfc := _a.CMYKToRGB(uint8(255*_cbge), uint8(255*_cadb), uint8(255*_agef), uint8(255*_afeb))
			_ebbc.Params = []_gf.PdfObject{_gf.MakeFloat(float64(_cged) / 255), _gf.MakeFloat(float64(_bbcg) / 255), _gf.MakeFloat(float64(_abfc) / 255)}
			_debe := "\u0052\u0047"
			if _ebbc.Operand == "\u006b" {
				_debe = "\u0072\u0067"
			}
			_ebbc.Operand = _debe
			_ccec = true
		}
	}
	if !_ccec {
		return nil, nil
	}
	_egea := _eb.NewContentCreator()
	for _, _gca := range *_deg {
		_egea.AddOperand(*_gca)
	}
	_bcad := _egea.Bytes()
	return _bcad, nil
}

func _fbdd(_cfec *_b.CompliancePdfReader) (_bacd []ViolatedRule) {
	var _cbfad, _baaa, _defcc, _gfge, _dacd, _efee bool
	_baabe := func() bool { return _cbfad && _baaa && _defcc && _gfge && _dacd && _efee }
	for _, _egcdg := range _cfec.PageList {
		if _egcdg.Resources == nil {
			continue
		}
		_cgfge, _bffdg := _gf.GetDict(_egcdg.Resources.Font)
		if !_bffdg {
			continue
		}
		for _, _bbebe := range _cgfge.Keys() {
			_baeb, _bbcgc := _gf.GetDict(_cgfge.Get(_bbebe))
			if !_bbcgc {
				if !_cbfad {
					_bacd = append(_bacd, _af("\u0036\u002e\u0032\u002e\u0031\u0031\u002e\u0032\u002d\u0031", "\u0041\u006c\u006c\u0020\u0066\u006f\u006e\u0074\u0073\u0020\u0061\u006e\u0064\u0020\u0066on\u0074 \u0070\u0072\u006fg\u0072\u0061\u006ds\u0020\u0075\u0073\u0065\u0064\u0020\u0069\u006e\u0020\u0061\u0020\u0063\u006f\u006e\u0066\u006f\u0072mi\u006e\u0067\u0020\u0066\u0069\u006ce\u002c\u0020\u0072\u0065\u0067\u0061\u0072\u0064\u006c\u0065s\u0073\u0020\u006f\u0066\u0020\u0072\u0065\u006e\u0064\u0065\u0072\u0069\u006eg m\u006f\u0064\u0065\u0020\u0075\u0073\u0061\u0067\u0065\u002c\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0020\u0074o\u0020\u0074\u0068e\u0020\u0070\u0072o\u0076\u0069\u0073\u0069\u006f\u006e\u0073\u0020\u0069\u006e \u0049\u0053\u004f\u0020\u0033\u0032\u0030\u0030\u0030\u002d\u0031:\u0032\u0030\u0030\u0038\u002c \u0039\u002e\u0036\u0020a\u006e\u0064\u0020\u0039.\u0037\u002e"))
					_cbfad = true
					if _baabe() {
						return _bacd
					}
				}
				continue
			}
			if _feac, _dggg := _gf.GetName(_baeb.Get("\u0054\u0079\u0070\u0065")); !_cbfad && (!_dggg || _feac.String() != "\u0046\u006f\u006e\u0074") {
				_bacd = append(_bacd, _af("\u0036\u002e\u0032\u002e\u0031\u0031\u002e\u0032\u002d\u0031", "\u0054\u0079\u0070e\u0020\u002d\u0020\u006e\u0061\u006d\u0065\u0020\u002d\u0020\u0028\u0052\u0065\u0071\u0075i\u0072\u0065\u0064\u0029 Th\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u006f\u0066 \u0050\u0044\u0046\u0020\u006fbj\u0065\u0063\u0074\u0020\u0074\u0068\u0061t\u0020\u0074\u0068\u0069s\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0064\u0065\u0073c\u0072\u0069\u0062\u0065\u0073\u003b\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0046\u006f\u006e\u0074\u0020\u0066\u006fr\u0020\u0061\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0069\u0063t\u0069\u006f\u006e\u0061\u0072\u0079\u002e"))
				_cbfad = true
				if _baabe() {
					return _bacd
				}
			}
			_bfebf, _bacdb := _b.NewPdfFontFromPdfObject(_baeb)
			if _bacdb != nil {
				continue
			}
			var _cbfg string
			if _fgcd, _egac := _gf.GetName(_baeb.Get("\u0053u\u0062\u0074\u0079\u0070\u0065")); _egac {
				_cbfg = _fgcd.String()
			}
			if !_baaa {
				switch _cbfg {
				case "\u0054\u0079\u0070e\u0030", "\u0054\u0079\u0070e\u0031", "\u004dM\u0054\u0079\u0070\u0065\u0031", "\u0054\u0072\u0075\u0065\u0054\u0079\u0070\u0065", "\u0043\u0049\u0044F\u006f\u006e\u0074\u0054\u0079\u0070\u0065\u0030", "\u0043\u0049\u0044F\u006f\u006e\u0074\u0054\u0079\u0070\u0065\u0032":
				default:
					_baaa = true
					_bacd = append(_bacd, _af("\u0036\u002e\u0032\u002e\u0031\u0031\u002e\u0032\u002d\u0032", "\u0053\u0075\u0062\u0074\u0079\u0070\u0065\u0020\u002d\u0020\u006e\u0061\u006d\u0065\u0020\u002d\u0020\u0028\u0052\u0065\u0071\u0075\u0069\u0072\u0065d\u0029\u0020\u0054\u0068e \u0074\u0079\u0070\u0065 \u006f\u0066\u0020\u0066\u006f\u006et\u003b\u0020\u006d\u0075\u0073\u0074\u0020b\u0065\u0020\u0022\u0054\u0079\u0070\u0065\u0031\u0022\u0020f\u006f\u0072\u0020\u0054\u0079\u0070\u0065\u0020\u0031\u0020f\u006f\u006e\u0074\u0073\u002c\u0020\u0022\u004d\u004d\u0054\u0079\u0070\u0065\u0031\u0022\u0020\u0066\u006f\u0072\u0020\u006d\u0075\u006c\u0074\u0069\u0070\u006c\u0065\u0020\u006da\u0073\u0074e\u0072\u0020\u0066\u006f\u006e\u0074s\u002c\u0020\u0022\u0054\u0072\u0075\u0065T\u0079\u0070\u0065\u0022\u0020\u0066\u006f\u0072\u0020\u0054\u0072\u0075\u0065T\u0079\u0070\u0065\u0020\u0066\u006f\u006e\u0074\u0073\u0020\u0022\u0054\u0079\u0070\u0065\u0033\u0022\u0020\u0066\u006f\u0072\u0020\u0054\u0079\u0070e\u0020\u0033\u0020\u0066\u006f\u006e\u0074\u0073\u002c\u0020\"\u0054\u0079\u0070\u0065\u0030\"\u0020\u0066\u006f\u0072\u0020\u0054\u0079\u0070\u0065\u0020\u0030\u0020\u0066\u006f\u006e\u0074\u0073\u0020\u0061\u006ed\u0020\u0022\u0043\u0049\u0044\u0046\u006fn\u0074\u0054\u0079\u0070\u0065\u0030\u0022 \u006f\u0072\u0020\u0022\u0043\u0049\u0044\u0046\u006f\u006e\u0074T\u0079\u0070e\u0032\u0022\u0020\u0066\u006f\u0072\u0020\u0043\u0049\u0044\u0020\u0066\u006f\u006e\u0074\u0073\u002e"))
					if _baabe() {
						return _bacd
					}
				}
			}
			if !_defcc {
				if _cbfg != "\u0054\u0079\u0070e\u0033" {
					_dbdf, _aege := _gf.GetName(_baeb.Get("\u0042\u0061\u0073\u0065\u0046\u006f\u006e\u0074"))
					if !_aege || _dbdf.String() == "" {
						_bacd = append(_bacd, _af("\u0036\u002e\u0032\u002e\u0031\u0031\u002e\u0032\u002d\u0033", "B\u0061\u0073\u0065\u0046\u006f\u006e\u0074\u0020\u002d\u0020\u006e\u0061\u006d\u0065\u0020\u002d\u0020\u0028\u0052\u0065\u0071\u0075\u0069\u0072\u0065\u0064)\u0020T\u0068\u0065\u0020\u0050o\u0073\u0074S\u0063\u0072\u0069\u0070\u0074\u0020\u006e\u0061\u006d\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006e\u0074\u002e"))
						_defcc = true
						if _baabe() {
							return _bacd
						}
					}
				}
			}
			if _cbfg != "\u0054\u0079\u0070e\u0031" {
				continue
			}
			_ebga := _aa.IsStdFont(_aa.StdFontName(_bfebf.BaseFont()))
			if _ebga {
				continue
			}
			_caec, _eced := _gf.GetIntVal(_baeb.Get("\u0046i\u0072\u0073\u0074\u0043\u0068\u0061r"))
			if !_eced && !_gfge {
				_bacd = append(_bacd, _af("\u0036\u002e\u0032\u002e\u0031\u0031\u002e\u0032\u002d\u0034", "\u0046\u0069r\u0073t\u0043\u0068\u0061\u0072\u0020\u002d\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u002d\u0020\u0028\u0052\u0065\u0071\u0075i\u0072\u0065\u0064\u0020\u0065\u0078\u0063\u0065\u0070t\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0073\u0074\u0061\u006e\u0064\u0061\u0072d\u0020\u0031\u0034\u0020\u0066\u006f\u006e\u0074\u0073\u0029\u0020\u0054\u0068\u0065\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0063\u006f\u0064e\u0020\u0064\u0065\u0066i\u006ee\u0064\u0020\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006e\u0074\u0027\u0073\u0020\u0057i\u0064\u0074\u0068\u0073 \u0061r\u0072\u0061y\u002e"))
				_gfge = true
				if _baabe() {
					return _bacd
				}
			}
			_aafdd, _bagdg := _gf.GetIntVal(_baeb.Get("\u004c\u0061\u0073\u0074\u0043\u0068\u0061\u0072"))
			if !_bagdg && !_dacd {
				_bacd = append(_bacd, _af("\u0036\u002e\u0032\u002e\u0031\u0031\u002e\u0032\u002d\u0035", "\u004c\u0061\u0073t\u0043\u0068\u0061\u0072\u0020\u002d\u0020\u0069n\u0074\u0065\u0067e\u0072 \u002d\u0020\u0028\u0052\u0065\u0071u\u0069\u0072\u0065d\u0020\u0065\u0078\u0063\u0065\u0070\u0074\u0020\u0066\u006f\u0072\u0020t\u0068\u0065 s\u0074\u0061\u006e\u0064\u0061\u0072\u0064\u0020\u0031\u0034\u0020\u0066\u006f\u006ets\u0029\u0020\u0054\u0068\u0065\u0020\u006c\u0061\u0073t\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006e\u0074\u0027\u0073\u0020\u0057\u0069\u0064\u0074h\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u002e"))
				_dacd = true
				if _baabe() {
					return _bacd
				}
			}
			if !_efee {
				_fdbb, _feae := _gf.GetArray(_baeb.Get("\u0057\u0069\u0064\u0074\u0068\u0073"))
				if !_feae || !_eced || !_bagdg || _fdbb.Len() != _aafdd-_caec+1 {
					_bacd = append(_bacd, _af("\u0036\u002e\u0032\u002e\u0031\u0031\u002e\u0032\u002d\u0036", "\u0057\u0069\u0064\u0074\u0068\u0073\u0020\u002d a\u0072\u0072\u0061y \u002d\u0020\u0028\u0052\u0065\u0071\u0075\u0069\u0072\u0065\u0064\u0020\u0065\u0078\u0063\u0065\u0070t\u0020\u0066\u006f\u0072\u0020\u0074\u0068\u0065\u0020\u0073\u0074a\u006e\u0064a\u0072\u0064\u00201\u0034\u0020\u0066\u006f\u006e\u0074\u0073\u003b\u0020\u0069\u006ed\u0069\u0072\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0070\u0072\u0065\u0066e\u0072\u0072e\u0064\u0029\u0020\u0041\u006e \u0061\u0072\u0072\u0061\u0079\u0020\u006f\u0066\u0020\u0028\u004c\u0061\u0073\u0074\u0043\u0068\u0061\u0072\u0020\u2212 F\u0069\u0072\u0073\u0074\u0043\u0068\u0061\u0072\u0020\u002b\u00201\u0029\u0020\u0077\u0069\u0064\u0074\u0068\u0073."))
					_efee = true
					if _baabe() {
						return _bacd
					}
				}
			}
		}
	}
	return _bacd
}

// Conformance gets the PDF/A conformance.
func (_fcbda *profile1) Conformance() string { return _fcbda._bdg._bc }

func _fafg(_becb *_b.CompliancePdfReader) ViolatedRule { return _cgf }

func _ccd(_eag *_b.XObjectImage, _be imageModifications) error {
	_bgde, _bd := _eag.ToImage()
	if _bd != nil {
		return _bd
	}
	if _be._caa != nil {
		_eag.Filter = _be._caa
	}
	_gcbg := _gf.MakeDict()
	_gcbg.Set("\u0051u\u0061\u006c\u0069\u0074\u0079", _gf.MakeInteger(100))
	_gcbg.Set("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr", _gf.MakeInteger(1))
	_eag.Decode = nil
	if _bd = _eag.SetImage(_bgde, nil); _bd != nil {
		return _bd
	}
	_eag.ToPdfObject()
	return nil
}

func _fabc(_gdec *_b.CompliancePdfReader) (_fabca []ViolatedRule) {
	var _gedd, _feed, _fgfc bool
	if _gdec.ParserMetadata().HasNonConformantStream() {
		_fabca = []ViolatedRule{_af("\u0036.\u0031\u002e\u0037\u002d\u0031", "T\u0068\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u006b\u0065\u0079\u0077\u006fr\u0064\u0020\u0073\u0068\u0061\u006c\u006c \u0062\u0065\u0020f\u006f\u006cl\u006fw\u0065\u0064\u0020e\u0069\u0074h\u0065\u0072\u0020\u0062\u0079\u0020\u0061 \u0043\u0041\u0052\u0052I\u0041\u0047\u0045\u0020\u0052E\u0054\u0055\u0052\u004e\u0020\u00280\u0044\u0068\u0029\u0020\u0061\u006e\u0064\u0020\u004c\u0049\u004e\u0045\u0020F\u0045\u0045\u0044\u0020\u0028\u0030\u0041\u0068\u0029\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065\u0020o\u0072\u0020\u0062\u0079\u0020\u0061 \u0073\u0069ng\u006c\u0065\u0020\u004cIN\u0045 \u0046\u0045\u0045\u0044 \u0063\u0068\u0061r\u0061\u0063\u0074\u0065\u0072\u002e\u0020T\u0068\u0065\u0020e\u006e\u0064\u0073\u0074r\u0065\u0061\u006d\u0020\u006b\u0065\u0079\u0077\u006fr\u0064\u0020\u0073\u0068\u0061\u006c\u006c \u0062e\u0020p\u0072\u0065\u0063\u0065\u0064\u0065\u0064\u0020\u0062\u0079\u0020\u0061n\u0020\u0045\u004f\u004c \u006d\u0061\u0072\u006b\u0065\u0072\u002e")}
	}
	for _, _ebcb := range _gdec.GetObjectNums() {
		_ggecb, _ := _gdec.GetIndirectObjectByNumber(_ebcb)
		if _ggecb == nil {
			continue
		}
		_cbbb, _acb := _gf.GetStream(_ggecb)
		if !_acb {
			continue
		}
		if !_gedd {
			_gdga := _cbbb.Get("\u004c\u0065\u006e\u0067\u0074\u0068")
			if _gdga == nil {
				_fabca = append(_fabca, _af("\u0036.\u0031\u002e\u0037\u002d\u0032", "\u006e\u006f\u0020'\u004c\u0065\u006e\u0067\u0074\u0068\u0027\u0020\u006b\u0065\u0079\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0073\u0074\u0072\u0065a\u006d\u0020\u006f\u0062\u006a\u0065\u0063\u0074"))
				_gedd = true
			} else {
				_efc, _dceag := _gf.GetIntVal(_gdga)
				if !_dceag {
					_fabca = append(_fabca, _af("\u0036.\u0031\u002e\u0037\u002d\u0032", "s\u0074\u0072\u0065\u0061\u006d\u0020\u0027\u004c\u0065\u006e\u0067\u0074\u0068\u0027\u0020\u006b\u0065\u0079 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020an\u0020\u0069\u006et\u0065g\u0065\u0072"))
					_gedd = true
				} else {
					if len(_cbbb.Stream) != _efc {
						_fabca = append(_fabca, _af("\u0036.\u0031\u002e\u0037\u002d\u0032", "\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u006c\u0065\u006e\u0067th\u0020v\u0061\u006c\u0075\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020m\u0061\u0074\u0063\u0068\u0020\u0074\u0068\u0065\u0020\u0073\u0069\u007a\u0065\u0020\u006f\u0066\u0020t\u0068\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d"))
						_gedd = true
					}
				}
			}
		}
		if !_feed {
			if _cbbb.Get("\u0046") != nil {
				_feed = true
				_fabca = append(_fabca, _af("\u0036.\u0031\u002e\u0037\u002d\u0033", "\u0073\u0074r\u0065\u0061\u006d\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006eo\u0074\u0020\u0063\u006f\u006e\u0074a\u0069\u006e\u0020\u0027\u0046\u0027\u002c\u0027\u0046\u0046\u0069\u006c\u0074\u0065r\u0027\u002c'\u0046\u0044\u0065\u0063o\u0064\u0065\u0050\u0061\u0072a\u006d\u0073\u0027\u0020\u006b\u0065\u0079"))
			}
			if _cbbb.Get("\u0046F\u0069\u006c\u0074\u0065\u0072") != nil && !_feed {
				_feed = true
				_fabca = append(_fabca, _af("\u0036.\u0031\u002e\u0037\u002d\u0033", "\u0073\u0074r\u0065\u0061\u006d\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006eo\u0074\u0020\u0063\u006f\u006e\u0074a\u0069\u006e\u0020\u0027\u0046\u0027\u002c\u0027\u0046\u0046\u0069\u006c\u0074\u0065r\u0027\u002c'\u0046\u0044\u0065\u0063o\u0064\u0065\u0050\u0061\u0072a\u006d\u0073\u0027\u0020\u006b\u0065\u0079"))
				continue
			}
			if _cbbb.Get("\u0046\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u0061\u006d\u0073") != nil && !_feed {
				_feed = true
				_fabca = append(_fabca, _af("\u0036.\u0031\u002e\u0037\u002d\u0033", "\u0073\u0074r\u0065\u0061\u006d\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006eo\u0074\u0020\u0063\u006f\u006e\u0074a\u0069\u006e\u0020\u0027\u0046\u0027\u002c\u0027\u0046\u0046\u0069\u006c\u0074\u0065r\u0027\u002c'\u0046\u0044\u0065\u0063o\u0064\u0065\u0050\u0061\u0072a\u006d\u0073\u0027\u0020\u006b\u0065\u0079"))
				continue
			}
		}
		if !_fgfc {
			_fcab, _gddb := _gf.GetName(_gf.TraceToDirectObject(_cbbb.Get("\u0046\u0069\u006c\u0074\u0065\u0072")))
			if !_gddb {
				continue
			}
			if *_fcab == _gf.StreamEncodingFilterNameLZW {
				_fgfc = true
				_fabca = append(_fabca, _af("\u0036\u002e\u0031\u002e\u0031\u0030\u002d\u0031", "\u0054h\u0065\u0020L\u005a\u0057\u0044\u0065c\u006f\u0064\u0065 \u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0073\u0068al\u006c\u0020\u006eo\u0074\u0020b\u0065\u0020\u0070\u0065\u0072\u006di\u0074\u0074e\u0064\u002e"))
			}
		}
	}
	return _fabca
}

func _dbfg(_gecb *_b.CompliancePdfReader) (_fagdc ViolatedRule) {
	_cefc, _eeffa := _gfad(_gecb)
	if !_eeffa {
		return _cgf
	}
	if _cefc.Get("\u0052\u0065\u0071u\u0069\u0072\u0065\u006d\u0065\u006e\u0074\u0073") != nil {
		return _af("\u0036\u002e\u0031\u0031\u002d\u0031", "Th\u0065\u0020d\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u0020\u0063a\u0074\u0061\u006c\u006f\u0067\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020R\u0065q\u0075\u0069\u0072\u0065\u006d\u0065\u006e\u0074s\u0020k\u0065\u0079.")
	}
	return _cgf
}

func _gebf(_bcbc *_b.CompliancePdfReader) ViolatedRule {
	if _bcbc.ParserMetadata().HeaderPosition() != 0 {
		return _af("\u0036.\u0031\u002e\u0032\u002d\u0031", "h\u0065\u0061\u0064\u0065\u0072\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0069\u0073\u0020n\u006f\u0074\u0020\u0061\u0074\u0020\u0074\u0068\u0065\u0020fi\u0072\u0073\u0074 \u0062y\u0074\u0065")
	}
	if _bcbc.PdfVersion().Major != 1 {
		return _af("\u0036.\u0031\u002e\u0032\u002d\u0031", "\u0054\u0068\u0065\u0020\u0066\u0069l\u0065\u0020\u0068\u0065\u0061\u0064e\u0072 \u0073\u0068\u0061\u006c\u006c\u0020c\u006f\u006e\u0073\u0069s\u0074 \u006f\u0066\u0020\u201c%\u0050\u0044\u0046\u002d\u0031\u002e\u006e\u201d\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0065\u0064\u0020\u0062\u0079\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065 \u0045\u004f\u004c\u0020ma\u0072\u006b\u0065\u0072\u002c \u0077\u0068\u0065\u0072\u0065\u0020\u0027\u006e\u0027\u0020\u0069s\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0064\u0069\u0067\u0069t\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0030\u0020(\u0033\u0030h\u0029\u0020\u0061\u006e\u0064\u0020\u0037\u0020\u0028\u0033\u0037\u0068\u0029")
	}
	if _bcbc.PdfVersion().Minor < 0 || _bcbc.PdfVersion().Minor > 7 {
		return _af("\u0036.\u0031\u002e\u0032\u002d\u0031", "\u0054\u0068\u0065\u0020\u0066\u0069l\u0065\u0020\u0068\u0065\u0061\u0064e\u0072 \u0073\u0068\u0061\u006c\u006c\u0020c\u006f\u006e\u0073\u0069s\u0074 \u006f\u0066\u0020\u201c%\u0050\u0044\u0046\u002d\u0031\u002e\u006e\u201d\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0065\u0064\u0020\u0062\u0079\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065 \u0045\u004f\u004c\u0020ma\u0072\u006b\u0065\u0072\u002c \u0077\u0068\u0065\u0072\u0065\u0020\u0027\u006e\u0027\u0020\u0069s\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0064\u0069\u0067\u0069t\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0030\u0020(\u0033\u0030h\u0029\u0020\u0061\u006e\u0064\u0020\u0037\u0020\u0028\u0033\u0037\u0068\u0029")
	}
	return _cgf
}

// ValidateStandard checks if provided input CompliancePdfReader matches rules that conforms PDF/A-2 standard.
func (_dbbcd *profile2) ValidateStandard(r *_b.CompliancePdfReader) error {
	_gdda := VerificationError{ConformanceLevel: _dbbcd._eggde._aac, ConformanceVariant: _dbbcd._eggde._bc}
	if _bgb := _gebf(r); _bgb != _cgf {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _bgb)
	}
	if _begd := _eagc(r); _begd != _cgf {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _begd)
	}
	if _agce := _dbaga(r); _agce != _cgf {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _agce)
	}
	if _ggca := _gcf(r); _ggca != _cgf {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _ggca)
	}
	if _bdff := _bebbg(r); _bdff != _cgf {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _bdff)
	}
	if _bfcc := _cedg(r); len(_bfcc) != 0 {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _bfcc...)
	}
	if _efgfa := _fgbdc(r); len(_efgfa) != 0 {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _efgfa...)
	}
	if _gfcf := _eace(r); len(_gfcf) != 0 {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _gfcf...)
	}
	if _ffee := _fafg(r); _ffee != _cgf {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _ffee)
	}
	if _agccd := _fgcg(r); len(_agccd) != 0 {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _agccd...)
	}
	if _gggdg := _abddc(r); len(_gggdg) != 0 {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _gggdg...)
	}
	if _defe := _ffec(r); _defe != _cgf {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _defe)
	}
	if _bcbaf := _gaba(r); len(_bcbaf) != 0 {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _bcbaf...)
	}
	if _bccd := _geacd(r); len(_bccd) != 0 {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _bccd...)
	}
	if _fab := _abcba(r); _fab != _cgf {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _fab)
	}
	if _eacd := _agca(r); len(_eacd) != 0 {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _eacd...)
	}
	if _afcc := _ggba(r); len(_afcc) != 0 {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _afcc...)
	}
	if _bgcd := _deeeg(r); _bgcd != _cgf {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _bgcd)
	}
	if _eccf := _fbdd(r); len(_eccf) != 0 {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _eccf...)
	}
	if _acfd := _cdgd(r, _dbbcd._eggde); len(_acfd) != 0 {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _acfd...)
	}
	if _dgdgd := _dfad(r); len(_dgdgd) != 0 {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _dgdgd...)
	}
	if _edbb := _fbbc(r); len(_edbb) != 0 {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _edbb...)
	}
	if _cfcd := _gbdae(r); len(_cfcd) != 0 {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _cfcd...)
	}
	if _fed := _egbb(r); _fed != _cgf {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _fed)
	}
	if _bacb := _eaab(r); len(_bacb) != 0 {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _bacb...)
	}
	if _ddcb := _dgbc(r); _ddcb != _cgf {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _ddcb)
	}
	if _bfg := _ffdbc(r, _dbbcd._eggde, false); len(_bfg) != 0 {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _bfg...)
	}
	if _dbbcd._eggde == _ab() {
		if _bagc := _fbgc(r); len(_bagc) != 0 {
			_gdda.ViolatedRules = append(_gdda.ViolatedRules, _bagc...)
		}
	}
	if _cgeag := _cfcae(r); len(_cgeag) != 0 {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _cgeag...)
	}
	if _eegc := _afcd(r); len(_eegc) != 0 {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _eegc...)
	}
	if _gceac := _accef(r); len(_gceac) != 0 {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _gceac...)
	}
	if _caabb := _dbfg(r); _caabb != _cgf {
		_gdda.ViolatedRules = append(_gdda.ViolatedRules, _caabb)
	}
	if len(_gdda.ViolatedRules) > 0 {
		_e.Slice(_gdda.ViolatedRules, func(_dccf, _bcaed int) bool {
			return _gdda.ViolatedRules[_dccf].RuleNo < _gdda.ViolatedRules[_bcaed].RuleNo
		})
		return _gdda
	}
	return nil
}

func _becg(_eecfb *_b.CompliancePdfReader, _cgcb bool) (_cdbg []ViolatedRule) {
	var _ceea, _dafff, _bdbd, _bgba, _ebed, _ffgc, _gaed bool
	_abae := func() bool { return _ceea && _dafff && _bdbd && _bgba && _ebed && _ffgc && _gaed }
	_gffb, _fdgg := _gafg(_eecfb)
	var _gaee _ebc.ProfileHeader
	if _fdgg {
		_gaee, _ = _ebc.ParseHeader(_gffb.DestOutputProfile)
	}
	var _dfbe bool
	_fecg := map[_gf.PdfObject]struct{}{}
	var _ffca func(_defac _b.PdfColorspace) bool
	_ffca = func(_fagc _b.PdfColorspace) bool {
		switch _acefc := _fagc.(type) {
		case *_b.PdfColorspaceDeviceGray:
			if !_ffgc {
				if !_fdgg {
					_dfbe = true
					_cdbg = append(_cdbg, _af("\u0036.\u0032\u002e\u0033\u002d\u0034", "\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079\u0020\u006da\u0079\u0020\u0062\u0065\u0020\u0075s\u0065\u0064\u0020\u006f\u006el\u0079\u0020\u0069\u0066\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u006ce\u0020\u0068\u0061\u0073\u0020\u0061\u0020\u0050\u0044\u0046\u002f\u0041\u002d\u0031\u0020O\u0075\u0074\u0070\u0075\u0074\u0049\u006e\u0074e\u006e\u0074\u002e"))
					_ffgc = true
					if _abae() {
						return true
					}
				}
			}
		case *_b.PdfColorspaceDeviceRGB:
			if !_bgba {
				if !_fdgg || _gaee.ColorSpace != _ebc.ColorSpaceRGB {
					_dfbe = true
					_cdbg = append(_cdbg, _af("\u0036.\u0032\u002e\u0033\u002d\u0032", "\u0044\u0065\u0076\u0069\u0063\u0065\u0052\u0047\u0042\u0020\u006d\u0061\u0079\u0020\u0062\u0065\u0020\u0075\u0073\u0065\u0064\u0020\u006f\u006e\u006c\u0079\u0020\u0069\u0066\u0020\u0074\u0068\u0065 \u0066\u0069\u006c\u0065\u0020\u0068\u0061\u0073\u0020\u0061\u0020\u0050\u0044\u0046\u002f\u0041\u002d\u0031\u0020\u004f\u0075\u0074\u0070\u0075\u0074In\u0074\u0065\u006e\u0074\u0020\u0074\u0068\u0061\u0074\u0020u\u0073es\u0020a\u006e\u0020\u0052\u0047\u0042\u0020\u0063o\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u002e"))
					_bgba = true
					if _abae() {
						return true
					}
				}
			}
		case *_b.PdfColorspaceDeviceCMYK:
			if !_ebed {
				if !_fdgg || _gaee.ColorSpace != _ebc.ColorSpaceCMYK {
					_dfbe = true
					_cdbg = append(_cdbg, _af("\u0036.\u0032\u002e\u0033\u002d\u0033", "\u0044\u0065\u0076\u0069\u0063e\u0043\u004d\u0059\u004b \u006d\u0061\u0079\u0020\u0062\u0065\u0020\u0075\u0073\u0065\u0064\u0020\u006f\u006e\u006c\u0079\u0020\u0069\u0066\u0020\u0074h\u0065\u0020\u0066\u0069\u006ce \u0068\u0061\u0073\u0020\u0061 \u0050\u0044\u0046\u002f\u0041\u002d\u0031\u0020\u004f\u0075\u0074p\u0075\u0074\u0049\u006e\u0074\u0065\u006e\u0074\u0020\u0074\u0068a\u0074\u0020\u0075\u0073\u0065\u0073\u0020\u0061\u006e \u0043\u004d\u0059\u004b\u0020\u0063\u006f\u006c\u006f\u0072\u0020s\u0070\u0061\u0063e\u002e"))
					_ebed = true
					if _abae() {
						return true
					}
				}
			}
		case *_b.PdfColorspaceICCBased:
			if !_bdbd || !_gaed {
				_fgdc, _afbfb := _ebc.ParseHeader(_acefc.Data)
				if _afbfb != nil {
					_df.Log.Debug("\u0070\u0061\u0072si\u006e\u0067\u0020\u0049\u0043\u0043\u0042\u0061\u0073e\u0064 \u0068e\u0061d\u0065\u0072\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076", _afbfb)
					_cdbg = append(_cdbg, func() ViolatedRule {
						return _af("\u0036.\u0032\u002e\u0033\u002d\u0031", "\u0041\u006cl \u0049\u0043\u0043\u0042\u0061\u0073\u0065\u0064\u0020\u0063\u006f\u006co\u0072\u0020\u0073\u0070a\u0063e\u0073\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0065\u006d\u0062\u0065\u0064\u0064\u0065d\u0020\u0061\u0073\u0020\u0049\u0043\u0043 \u0070\u0072\u006f\u0066\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065a\u006d\u0073 \u0061\u0073\u0020d\u0065\u0073\u0063\u0072\u0069\u0062\u0065\u0064\u0020\u0069\u006e\u0020\u0050\u0044\u0046\u0020R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0034\u002e\u0035")
					}())
					_bdbd = true
					if _abae() {
						return true
					}
				}
				if !_bdbd {
					var _cfcb, _eagd bool
					switch _fgdc.DeviceClass {
					case _ebc.DeviceClassPRTR, _ebc.DeviceClassMNTR, _ebc.DeviceClassSCNR, _ebc.DeviceClassSPAC:
					default:
						_cfcb = true
					}
					switch _fgdc.ColorSpace {
					case _ebc.ColorSpaceRGB, _ebc.ColorSpaceCMYK, _ebc.ColorSpaceGRAY, _ebc.ColorSpaceLAB:
					default:
						_eagd = true
					}
					if _cfcb || _eagd {
						_cdbg = append(_cdbg, _af("\u0036.\u0032\u002e\u0033\u002d\u0031", "\u0041\u006cl \u0049\u0043\u0043\u0042\u0061\u0073\u0065\u0064\u0020\u0063\u006f\u006co\u0072\u0020\u0073\u0070a\u0063e\u0073\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0062\u0065\u0020\u0065\u006d\u0062\u0065\u0064\u0064\u0065d\u0020\u0061\u0073\u0020\u0049\u0043\u0043 \u0070\u0072\u006f\u0066\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065a\u006d\u0073 \u0061\u0073\u0020d\u0065\u0073\u0063\u0072\u0069\u0062\u0065\u0064\u0020\u0069\u006e\u0020\u0050\u0044\u0046\u0020R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0034\u002e\u0035"))
						_bdbd = true
						if _abae() {
							return true
						}
					}
				}
				if !_gaed {
					_egcc, _ := _gf.GetStream(_acefc.GetContainingPdfObject())
					if _egcc.Get("\u004e") == nil || (_acefc.N == 1 && _fgdc.ColorSpace != _ebc.ColorSpaceGRAY) || (_acefc.N == 3 && !(_fgdc.ColorSpace == _ebc.ColorSpaceRGB || _fgdc.ColorSpace == _ebc.ColorSpaceLAB)) || (_acefc.N == 4 && _fgdc.ColorSpace != _ebc.ColorSpaceCMYK) {
						_cdbg = append(_cdbg, _af("\u0036.\u0032\u002e\u0033\u002d\u0035", "\u0049\u0066\u0020a\u006e\u0020u\u006e\u0063\u0061\u006c\u0069\u0062\u0072a\u0074\u0065\u0064\u0020\u0063\u006fl\u006f\u0072 \u0073\u0070\u0061c\u0065\u0020\u0069\u0073\u0020\u0075\u0073\u0065\u0064\u0020\u0069\u006e\u0020\u0061\u0020\u0066\u0069\u006c\u0065 \u0074\u0068\u0065\u006e \u0074\u0068\u0061\u0074 \u0066\u0069\u006c\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020\u0063o\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0020\u0050\u0044\u0046\u002f\u0041-\u0031\u0020\u004f\u0075\u0074\u0070\u0075\u0074\u0049\u006e\u0074\u0065\u006e\u0074\u002c\u0020\u0061\u0073\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020\u0069\u006e\u0020\u0036\u002e\u0032\u002e\u0032\u002e"))
						_gaed = true
						if _abae() {
							return true
						}
					}
				}
			}
			if _acefc.Alternate != nil {
				return _ffca(_acefc.Alternate)
			}
		}
		return false
	}
	for _, _dgdef := range _eecfb.GetObjectNums() {
		_ebff, _abcg := _eecfb.GetIndirectObjectByNumber(_dgdef)
		if _abcg != nil {
			continue
		}
		_gdgg, _ebda := _gf.GetStream(_ebff)
		if !_ebda {
			continue
		}
		_edbbd, _ebda := _gf.GetName(_gdgg.Get("\u0054\u0079\u0070\u0065"))
		if !_ebda || _edbbd.String() != "\u0058O\u0062\u006a\u0065\u0063\u0074" {
			continue
		}
		_cbbg, _ebda := _gf.GetName(_gdgg.Get("\u0053u\u0062\u0074\u0079\u0070\u0065"))
		if !_ebda {
			continue
		}
		_fecg[_gdgg] = struct{}{}
		switch _cbbg.String() {
		case "\u0049\u006d\u0061g\u0065":
			_fgfa, _dddd := _b.NewXObjectImageFromStream(_gdgg)
			if _dddd != nil {
				continue
			}
			_fecg[_gdgg] = struct{}{}
			if _ffca(_fgfa.ColorSpace) {
				return _cdbg
			}
		case "\u0046\u006f\u0072\u006d":
			_bcfe, _dagcd := _gf.GetDict(_gdgg.Get("\u0047\u0072\u006fu\u0070"))
			if !_dagcd {
				continue
			}
			_afaa := _bcfe.Get("\u0043\u0053")
			if _afaa == nil {
				continue
			}
			_cgfd, _adef := _b.NewPdfColorspaceFromPdfObject(_afaa)
			if _adef != nil {
				continue
			}
			if _ffca(_cgfd) {
				return _cdbg
			}
		}
	}
	for _, _gcbe := range _eecfb.PageList {
		_fcbde, _aefd := _gcbe.GetContentStreams()
		if _aefd != nil {
			continue
		}
		for _, _cfb := range _fcbde {
			_aead, _fagg := _eb.NewContentStreamParser(_cfb).Parse()
			if _fagg != nil {
				continue
			}
			for _, _fgfb := range *_aead {
				if len(_fgfb.Params) > 1 {
					continue
				}
				switch _fgfb.Operand {
				case "\u0042\u0049":
					_befg, _dca := _fgfb.Params[0].(*_eb.ContentStreamInlineImage)
					if !_dca {
						continue
					}
					_cda, _ffdf := _befg.GetColorSpace(_gcbe.Resources)
					if _ffdf != nil {
						continue
					}
					if _ffca(_cda) {
						return _cdbg
					}
				case "\u0044\u006f":
					_ebgg, _fbgeb := _gf.GetName(_fgfb.Params[0])
					if !_fbgeb {
						continue
					}
					_edd, _dace := _gcbe.Resources.GetXObjectByName(*_ebgg)
					if _, _ddcc := _fecg[_edd]; _ddcc {
						continue
					}
					switch _dace {
					case _b.XObjectTypeImage:
						_fead, _fgc := _b.NewXObjectImageFromStream(_edd)
						if _fgc != nil {
							continue
						}
						_fecg[_edd] = struct{}{}
						if _ffca(_fead.ColorSpace) {
							return _cdbg
						}
					case _b.XObjectTypeForm:
						_bbga, _ffafd := _gf.GetDict(_edd.Get("\u0047\u0072\u006fu\u0070"))
						if !_ffafd {
							continue
						}
						_agfcf, _ffafd := _gf.GetName(_bbga.Get("\u0043\u0053"))
						if !_ffafd {
							continue
						}
						_egad, _cafa := _b.NewPdfColorspaceFromPdfObject(_agfcf)
						if _cafa != nil {
							continue
						}
						_fecg[_edd] = struct{}{}
						if _ffca(_egad) {
							return _cdbg
						}
					}
				}
			}
		}
	}
	if !_dfbe {
		return _cdbg
	}
	if (_gaee.DeviceClass == _ebc.DeviceClassPRTR || _gaee.DeviceClass == _ebc.DeviceClassMNTR) && (_gaee.ColorSpace == _ebc.ColorSpaceRGB || _gaee.ColorSpace == _ebc.ColorSpaceCMYK || _gaee.ColorSpace == _ebc.ColorSpaceGRAY) {
		return _cdbg
	}
	if !_cgcb {
		return _cdbg
	}
	_ggbbe, _aca := _gfad(_eecfb)
	if !_aca {
		return _cdbg
	}
	_gcff, _aca := _gf.GetArray(_ggbbe.Get("\u004f\u0075\u0074\u0070\u0075\u0074\u0049\u006e\u0074\u0065\u006e\u0074\u0073"))
	if !_aca {
		_cdbg = append(_cdbg, _af("\u0036.\u0032\u002e\u0032\u002d\u0031", "\u0041\u0020\u0050\u0044\u0046\u002f\u0041\u002d\u0031\u0020\u004f\u0075\u0074p\u0075\u0074\u0049\u006e\u0074e\u006e\u0074\u0020\u0069\u0073\u0020a\u006e \u004f\u0075\u0074\u0070\u0075\u0074\u0049n\u0074\u0065\u006e\u0074\u0020\u0064i\u0063\u0074\u0069\u006fn\u0061\u0072\u0079\u002c\u0020\u0061\u0073\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0062y\u0020\u0050\u0044F\u0020\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065 \u0039\u002e\u0031\u0030.4\u002c\u0020\u0074\u0068\u0061\u0074\u0020\u0069\u0073 \u0069\u006e\u0063\u006c\u0075\u0064e\u0064\u0020i\u006e\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u006c\u0065\u0027\u0073\u0020O\u0075\u0074p\u0075\u0074I\u006e\u0074\u0065\u006e\u0074\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020a\u006e\u0064\u0020h\u0061\u0073\u0020\u0047\u0054\u0053\u005f\u0050\u0044\u0046\u0041\u0031\u0020\u0061\u0073 \u0074\u0068\u0065\u0020\u0076a\u006c\u0075e\u0020\u006f\u0066\u0020i\u0074\u0073 \u0053\u0020\u006b\u0065\u0079\u0020\u0061\u006e\u0064\u0020\u0061\u0020\u0076\u0061\u006c\u0069\u0064\u0020I\u0043\u0043\u0020\u0070\u0072\u006f\u0066\u0069\u006ce\u0020s\u0074\u0072\u0065\u0061\u006d \u0061\u0073\u0020\u0074h\u0065\u0020\u0076a\u006c\u0075\u0065\u0020\u0069\u0074\u0073\u0020\u0044\u0065\u0073t\u004f\u0075t\u0070\u0075\u0074P\u0072\u006f\u0066\u0069\u006c\u0065 \u006b\u0065\u0079\u002e"), _af("\u0036.\u0032\u002e\u0032\u002d\u0032", "\u0049\u0066\u0020\u0061\u0020\u0066\u0069\u006c\u0065's\u0020O\u0075\u0074\u0070u\u0074\u0049\u006e\u0074\u0065\u006e\u0074\u0073 \u0061\u0072\u0072a\u0079\u0020\u0063\u006f\u006e\u0074\u0061\u0069n\u0073\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u006f\u006ee\u0020\u0065\u006e\u0074\u0072\u0079\u002c\u0020\u0074\u0068\u0065\u006e\u0020\u0061\u006c\u006c\u0020\u0065n\u0074\u0072\u0069\u0065\u0073\u0020\u0074\u0068\u0061\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e a \u0044\u0065\u0073\u0074\u004f\u0075\u0074\u0070\u0075\u0074\u0050\u0072\u006f\u0066\u0069\u006c\u0065\u0020\u006b\u0065y\u0020\u0073\u0068\u0061\u006cl\u0020\u0068\u0061\u0076\u0065 \u0061\u0073\u0020\u0074\u0068\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0074\u0068a\u0074\u0020\u006b\u0065\u0079 \u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0069\u006e\u0064\u0069\u0072\u0065c\u0074\u0020\u006fb\u006ae\u0063t\u002c\u0020\u0077h\u0069\u0063\u0068\u0020\u0073\u0068\u0061\u006c\u006c \u0062\u0065\u0020\u0061\u0020\u0076\u0061\u006c\u0069d\u0020\u0049\u0043\u0043\u0020\u0070\u0072\u006f\u0066\u0069\u006c\u0065\u0020\u0073\u0074r\u0065\u0061m\u002e"))
		return _cdbg
	}
	if _gcff.Len() > 1 {
		_abfgd := map[*_gf.PdfObjectDictionary]struct{}{}
		for _bgg := 0; _bgg < _gcff.Len(); _bgg++ {
			_eedeg, _fefa := _gf.GetDict(_gcff.Get(_bgg))
			if !_fefa {
				continue
			}
			if _bgg == 0 {
				_abfgd[_eedeg] = struct{}{}
				continue
			}
			if _, _ggcb := _abfgd[_eedeg]; !_ggcb {
				_cdbg = append(_cdbg, _af("\u0036.\u0032\u002e\u0032\u002d\u0032", "\u0049\u0066\u0020\u0061\u0020\u0066\u0069\u006c\u0065's\u0020O\u0075\u0074\u0070u\u0074\u0049\u006e\u0074\u0065\u006e\u0074\u0073 \u0061\u0072\u0072a\u0079\u0020\u0063\u006f\u006e\u0074\u0061\u0069n\u0073\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u006f\u006ee\u0020\u0065\u006e\u0074\u0072\u0079\u002c\u0020\u0074\u0068\u0065\u006e\u0020\u0061\u006c\u006c\u0020\u0065n\u0074\u0072\u0069\u0065\u0073\u0020\u0074\u0068\u0061\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e a \u0044\u0065\u0073\u0074\u004f\u0075\u0074\u0070\u0075\u0074\u0050\u0072\u006f\u0066\u0069\u006c\u0065\u0020\u006b\u0065y\u0020\u0073\u0068\u0061\u006cl\u0020\u0068\u0061\u0076\u0065 \u0061\u0073\u0020\u0074\u0068\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020\u0074\u0068a\u0074\u0020\u006b\u0065\u0079 \u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0069\u006e\u0064\u0069\u0072\u0065c\u0074\u0020\u006fb\u006ae\u0063t\u002c\u0020\u0077h\u0069\u0063\u0068\u0020\u0073\u0068\u0061\u006c\u006c \u0062\u0065\u0020\u0061\u0020\u0076\u0061\u006c\u0069d\u0020\u0049\u0043\u0043\u0020\u0070\u0072\u006f\u0066\u0069\u006c\u0065\u0020\u0073\u0074r\u0065\u0061m\u002e"))
				break
			}
		}
	}
	return _cdbg
}

func _eac(_dgfb *_eg.Document, _bfa standardType, _gcee *_eg.OutputIntents) error {
	var (
		_gbee *_b.PdfOutputIntent
		_bgc  error
	)
	if _dgfb.Version.Minor <= 7 {
		_gbee, _bgc = _ebc.NewSRGBv2OutputIntent(_bfa.outputIntentSubtype())
	} else {
		_gbee, _bgc = _ebc.NewSRGBv4OutputIntent(_bfa.outputIntentSubtype())
	}
	if _bgc != nil {
		return _bgc
	}
	if _bgc = _gcee.Add(_gbee.ToPdfObject()); _bgc != nil {
		return _bgc
	}
	return nil
}

func _ffec(_becda *_b.CompliancePdfReader) ViolatedRule {
	for _, _gdfgag := range _becda.PageList {
		_fcac, _eagdb := _gdfgag.GetContentStreams()
		if _eagdb != nil {
			continue
		}
		for _, _bfgf := range _fcac {
			_ggcad := _eb.NewContentStreamParser(_bfgf)
			_, _eagdb = _ggcad.Parse()
			if _eagdb != nil {
				return _af("\u0036.\u0032\u002e\u0032\u002d\u0031", "\u0041\u0020\u0063onten\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0073\u0068\u0061\u006c\u006c n\u006f\u0074\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u006e\u0079 \u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072\u0073\u0020\u006e\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0069\u006e\u0020\u0050\u0044\u0046\u0020\u0052\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0065\u0076\u0065\u006e\u0020\u0069\u0066\u0020s\u0075\u0063\u0068\u0020\u006f\u0070\u0065r\u0061\u0074\u006f\u0072\u0073\u0020\u0061\u0072\u0065\u0020\u0062\u0072\u0061\u0063\u006b\u0065\u0074\u0065\u0064\u0020\u0062\u0079\u0020\u0074\u0068\u0065\u0020\u0042\u0058\u002f\u0045\u0058\u0020\u0063\u006f\u006d\u0070\u0061\u0074\u0069\u0062i\u006c\u0069\u0074\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072\u0073\u002e")
			}
		}
	}
	return _cgf
}

// Conformance gets the PDF/A conformance.
func (_faac *profile3) Conformance() string { return _faac._dggeb._bc }

func _bbed(_agee *_eg.Document, _gaege int) error {
	_bcae := map[*_gf.PdfObjectStream]struct{}{}
	for _, _bfed := range _agee.Objects {
		_dgba, _cfdf := _gf.GetStream(_bfed)
		if !_cfdf {
			continue
		}
		if _, _cfdf = _bcae[_dgba]; _cfdf {
			continue
		}
		_bcae[_dgba] = struct{}{}
		_aee, _cfdf := _gf.GetName(_dgba.Get("\u0053u\u0062\u0054\u0079\u0070\u0065"))
		if !_cfdf {
			continue
		}
		if _dgba.Get("\u0052\u0065\u0066") != nil {
			_dgba.Remove("\u0052\u0065\u0066")
		}
		if _aee.String() == "\u0050\u0053" {
			_dgba.Remove("\u0050\u0053")
			continue
		}
		if _aee.String() == "\u0046\u006f\u0072\u006d" {
			if _dgba.Get("\u004f\u0050\u0049") != nil {
				_dgba.Remove("\u004f\u0050\u0049")
			}
			if _dgba.Get("\u0050\u0053") != nil {
				_dgba.Remove("\u0050\u0053")
			}
			if _aadf := _dgba.Get("\u0053\u0075\u0062\u0074\u0079\u0070\u0065\u0032"); _aadf != nil {
				if _fece, _eccg := _gf.GetName(_aadf); _eccg && *_fece == "\u0050\u0053" {
					_dgba.Remove("\u0053\u0075\u0062\u0074\u0079\u0070\u0065\u0032")
				}
			}
			continue
		}
		if _aee.String() == "\u0049\u006d\u0061g\u0065" {
			_eede, _daga := _gf.GetBool(_dgba.Get("I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065"))
			if _daga && bool(*_eede) {
				_dgba.Set("I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065", _gf.MakeBool(false))
			}
			if _gaege == 2 {
				if _dgba.Get("\u004f\u0050\u0049") != nil {
					_dgba.Remove("\u004f\u0050\u0049")
				}
			}
			if _dgba.Get("\u0041\u006c\u0074\u0065\u0072\u006e\u0061\u0074\u0065\u0073") != nil {
				_dgba.Remove("\u0041\u006c\u0074\u0065\u0072\u006e\u0061\u0074\u0065\u0073")
			}
			continue
		}
	}
	return nil
}

func _abddc(_aaea *_b.CompliancePdfReader) (_gfdbe []ViolatedRule) {
	var (
		_bdgc, _cgfeg, _gcde, _gac, _dfge bool
		_acgb                             func(_gf.PdfObject)
	)
	_acgb = func(_fccdb _gf.PdfObject) {
		switch _afgae := _fccdb.(type) {
		case *_gf.PdfObjectInteger:
			if !_bdgc && (int64(*_afgae) > _g.MaxInt32 || int64(*_afgae) < -_g.MaxInt32) {
				_gfdbe = append(_gfdbe, _af("\u0036\u002e\u0031\u002e\u0031\u0033\u002d\u0031", "L\u0061\u0072\u0067e\u0073\u0074\u0020\u0049\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u0073\u0020\u0032\u002c\u0031\u0034\u0037,\u0034\u0038\u0033,\u0036\u0034\u0037\u002e\u0020\u0053\u006d\u0061\u006c\u006c\u0065\u0073\u0074 \u0069\u006e\u0074\u0065g\u0065\u0072\u0020\u0076a\u006c\u0075\u0065\u0020\u0069\u0073\u0020\u002d\u0032\u002c\u0031\u0034\u0037\u002c\u0034\u0038\u0033,\u0036\u0034\u0038\u002e"))
				_bdgc = true
			}
		case *_gf.PdfObjectFloat:
			if !_cgfeg && (_g.Abs(float64(*_afgae)) > _g.MaxFloat32) {
				_gfdbe = append(_gfdbe, _af("\u0036\u002e\u0031\u002e\u0031\u0033\u002d\u0032", "\u0041 \u0063\u006f\u006e\u0066orm\u0069\u006e\u0067\u0020f\u0069\u006c\u0065\u0020\u0073\u0068\u0061\u006c\u006c\u0020n\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u006e\u0079\u0020\u0072\u0065\u0061\u006c\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0075\u0074\u0073\u0069de\u0020\u0074\u0068e\u0020\u0072\u0061\u006e\u0067e\u0020o\u0066\u0020\u002b\u002f\u002d\u0033\u002e\u0034\u00303\u0020\u0078\u0020\u0031\u0030\u005e\u0033\u0038\u002e"))
			}
		case *_gf.PdfObjectString:
			if !_gcde && len([]byte(_afgae.Str())) > 32767 {
				_gfdbe = append(_gfdbe, _af("\u0036\u002e\u0031\u002e\u0031\u0033\u002d\u0033", "M\u0061\u0078\u0069\u006d\u0075\u006d\u0020\u006c\u0065n\u0067\u0074\u0068\u0020\u006f\u0066\u0020a \u0073\u0074\u0072\u0069n\u0067\u0020\u0028\u0069\u006e\u0020\u0062\u0079\u0074es\u0029\u0020i\u0073\u0020\u0033\u0032\u0037\u0036\u0037\u002e"))
				_gcde = true
			}
		case *_gf.PdfObjectName:
			if !_gac && len([]byte(*_afgae)) > 127 {
				_gfdbe = append(_gfdbe, _af("\u0036\u002e\u0031\u002e\u0031\u0033\u002d\u0034", "\u004d\u0061\u0078\u0069\u006d\u0075\u006d \u006c\u0065\u006eg\u0074\u0068\u0020\u006ff\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0069\u006e\u0020\u0062\u0079\u0074\u0065\u0073\u0029\u0020\u0069\u0073\u0020\u0031\u0032\u0037\u002e"))
				_gac = true
			}
		case *_gf.PdfObjectArray:
			for _, _gbcec := range _afgae.Elements() {
				_acgb(_gbcec)
			}
			if !_dfge && (_afgae.Len() == 4 || _afgae.Len() == 5) {
				_ggbba, _fabe := _gf.GetName(_afgae.Get(0))
				if !_fabe {
					return
				}
				if *_ggbba != "\u0044e\u0076\u0069\u0063\u0065\u004e" {
					return
				}
				_bbca := _afgae.Get(1)
				_bbca = _gf.TraceToDirectObject(_bbca)
				_gacb, _fabe := _gf.GetArray(_bbca)
				if !_fabe {
					return
				}
				if _gacb.Len() > 32 {
					_gfdbe = append(_gfdbe, _af("\u0036\u002e\u0031\u002e\u0031\u0033\u002d\u0039", "\u004d\u0061\u0078\u0069\u006d\u0075\u006d \u006e\u0075\u006db\u0065\u0072\u0020\u006ff\u0020\u0044\u0065\u0076\u0069\u0063\u0065\u004e\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0020\u0069\u0073\u0020\u0033\u0032\u002e"))
					_dfge = true
				}
			}
		case *_gf.PdfObjectDictionary:
			_eeff := _afgae.Keys()
			for _fdggf, _begdf := range _eeff {
				_acgb(&_eeff[_fdggf])
				_acgb(_afgae.Get(_begdf))
			}
		case *_gf.PdfObjectStream:
			_acgb(_afgae.PdfObjectDictionary)
		case *_gf.PdfObjectStreams:
			for _, _dadg := range _afgae.Elements() {
				_acgb(_dadg)
			}
		case *_gf.PdfObjectReference:
			_acgb(_afgae.Resolve())
		}
	}
	_faaba := _aaea.GetObjectNums()
	if len(_faaba) > 8388607 {
		_gfdbe = append(_gfdbe, _af("\u0036\u002e\u0031\u002e\u0031\u0033\u002d\u0037", "\u004d\u0061\u0078\u0069\u006d\u0075\u006d\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020in\u0064i\u0072\u0065\u0063\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0073 \u0069\u006e\u0020\u0061\u0020\u0050\u0044\u0046\u0020\u0066\u0069\u006c\u0065\u0020\u0069\u0073\u00208\u002c\u0033\u0038\u0038\u002c\u0036\u0030\u0037\u002e"))
	}
	for _, _beae := range _faaba {
		_baac, _bcbf := _aaea.GetIndirectObjectByNumber(_beae)
		if _bcbf != nil {
			continue
		}
		_fbfe := _gf.TraceToDirectObject(_baac)
		_acgb(_fbfe)
	}
	return _gfdbe
}

func _debdc(_fgde *_b.CompliancePdfReader) (*_gf.PdfObjectDictionary, bool) {
	_dfce, _cddc := _gfad(_fgde)
	if !_cddc {
		return nil, false
	}
	_ccae, _cddc := _gf.GetArray(_dfce.Get("\u004f\u0075\u0074\u0070\u0075\u0074\u0049\u006e\u0074\u0065\u006e\u0074\u0073"))
	if !_cddc {
		return nil, false
	}
	if _ccae.Len() == 0 {
		return nil, false
	}
	return _gf.GetDict(_ccae.Get(0))
}
