//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package fdf provides support for loading form field data from Form Field Data (FDF) files.
package fdf

import (
	_ce "bufio"
	_af "bytes"
	_cf "encoding/hex"
	_d "errors"
	_c "fmt"
	_ff "github.com/szwede/unipdf/common"
	_da "github.com/szwede/unipdf/core"
	_db "io"
	_fa "os"
	_ab "regexp"
	_afg "sort"
	_b "strconv"
	_f "strings"
)

func (_bcf *fdfParser) seekFdfVersionTopDown() (int, int, error) {
	_bcf._bb.Seek(0, _db.SeekStart)
	_bcf._fg = _ce.NewReader(_bcf._bb)
	_fgb := 20
	_aae := make([]byte, _fgb)
	for {
		_aefe, _caba := _bcf._fg.ReadByte()
		if _caba != nil {
			if _caba == _db.EOF {
				break
			} else {
				return 0, 0, _caba
			}
		}
		if _da.IsDecimalDigit(_aefe) && _aae[_fgb-1] == '.' && _da.IsDecimalDigit(_aae[_fgb-2]) && _aae[_fgb-3] == '-' && _aae[_fgb-4] == 'F' && _aae[_fgb-5] == 'D' && _aae[_fgb-6] == 'P' {
			_dace := int(_aae[_fgb-2] - '0')
			_fbd := int(_aefe - '0')
			return _dace, _fbd, nil
		}
		_aae = append(_aae[1:_fgb], _aefe)
	}
	return 0, 0, _d.New("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064")
}

var _cfa = _ab.MustCompile("\u005e\u005b\u005c+-\u002e\u005d\u002a\u0028\u005b\u0030\u002d\u0039\u002e]\u002b)\u0065[\u005c+\u002d\u002e\u005d\u002a\u0028\u005b\u0030\u002d\u0039\u002e\u005d\u002b\u0029")

func (_dae *fdfParser) readAtLeast(_egf []byte, _ae int) (int, error) {
	_de := _ae
	_gd := 0
	_ee := 0
	for _de > 0 {
		_abgb, _bcg := _dae._fg.Read(_egf[_gd:])
		if _bcg != nil {
			_ff.Log.Debug("\u0045\u0052\u0052O\u0052\u0020\u0046\u0061i\u006c\u0065\u0064\u0020\u0072\u0065\u0061d\u0069\u006e\u0067\u0020\u0028\u0025\u0064\u003b\u0025\u0064\u0029\u0020\u0025\u0073", _abgb, _ee, _bcg.Error())
			return _gd, _d.New("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0072\u0065a\u0064\u0069\u006e\u0067")
		}
		_ee++
		_gd += _abgb
		_de -= _abgb
	}
	return _gd, nil
}

func _feg(_fbb string) (_da.PdfObjectReference, error) {
	_ef := _da.PdfObjectReference{}
	_agc := _cac.FindStringSubmatch(_fbb)
	if len(_agc) < 3 {
		_ff.Log.Debug("\u0045\u0072\u0072or\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065")
		return _ef, _d.New("\u0075n\u0061\u0062\u006c\u0065 \u0074\u006f\u0020\u0070\u0061r\u0073e\u0020r\u0065\u0066\u0065\u0072\u0065\u006e\u0063e")
	}
	_efa, _dac := _b.Atoi(_agc[1])
	if _dac != nil {
		_ff.Log.Debug("\u0045\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069n\u0067\u0020\u006fb\u006a\u0065c\u0074\u0020\u006e\u0075\u006d\u0062e\u0072 '\u0025\u0073\u0027\u0020\u002d\u0020\u0055\u0073\u0069\u006e\u0067\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u006e\u0075\u006d\u0020\u003d\u0020\u0030", _agc[1])
		return _ef, nil
	}
	_ef.ObjectNumber = int64(_efa)
	_cab, _dac := _b.Atoi(_agc[2])
	if _dac != nil {
		_ff.Log.Debug("\u0045\u0072r\u006f\u0072\u0020\u0070\u0061r\u0073\u0069\u006e\u0067\u0020g\u0065\u006e\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0027\u0025\u0073\u0027\u0020\u002d\u0020\u0055\u0073\u0069\u006e\u0067\u0020\u0067\u0065\u006e\u0020\u003d\u0020\u0030", _agc[2])
		return _ef, nil
	}
	_ef.GenerationNumber = int64(_cab)
	return _ef, nil
}

func (_afa *fdfParser) setFileOffset(_cbg int64) {
	_afa._bb.Seek(_cbg, _db.SeekStart)
	_afa._fg = _ce.NewReader(_afa._bb)
}

func (_gb *fdfParser) skipComments() error {
	if _, _dda := _gb.skipSpaces(); _dda != nil {
		return _dda
	}
	_gce := true
	for {
		_dg, _dgd := _gb._fg.Peek(1)
		if _dgd != nil {
			_ff.Log.Debug("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073", _dgd.Error())
			return _dgd
		}
		if _gce && _dg[0] != '%' {
			return nil
		}
		_gce = false
		if (_dg[0] != '\r') && (_dg[0] != '\n') {
			_gb._fg.ReadByte()
		} else {
			break
		}
	}
	return _gb.skipComments()
}

func (_fef *fdfParser) parseNumber() (_da.PdfObject, error) { return _da.ParseNumber(_fef._fg) }

var _cac = _ab.MustCompile("^\u005c\u0073\u002a\u0028\\d\u002b)\u005c\u0073\u002b\u0028\u005cd\u002b\u0029\u005c\u0073\u002b\u0052")

// FieldValues implements interface model.FieldValueProvider.
// Returns a map of field names to values (PdfObjects).
func (fdf *Data) FieldValues() (map[string]_da.PdfObject, error) {
	_dcf, _afd := fdf.FieldDictionaries()
	if _afd != nil {
		return nil, _afd
	}
	var _eb []string
	for _bc := range _dcf {
		_eb = append(_eb, _bc)
	}
	_afg.Strings(_eb)
	_dbd := map[string]_da.PdfObject{}
	for _, _ba := range _eb {
		_ag := _dcf[_ba]
		_eg := _da.TraceToDirectObject(_ag.Get("\u0056"))
		_dbd[_ba] = _eg
	}
	return _dbd, nil
}

var _ca = _ab.MustCompile("\u005e\u005b\u005c\u002b\u002d\u002e\u005d\u002a\u0028\u005b\u0030\u002d9\u002e\u005d\u002b\u0029")

// FieldDictionaries returns a map of field names to field dictionaries.
func (fdf *Data) FieldDictionaries() (map[string]*_da.PdfObjectDictionary, error) {
	_ga := map[string]*_da.PdfObjectDictionary{}
	for _abg := 0; _abg < fdf._cc.Len(); _abg++ {
		_ge, _e := _da.GetDict(fdf._cc.Get(_abg))
		if _e {
			_ed, _ := _da.GetString(_ge.Get("\u0054"))
			if _ed != nil {
				_ga[_ed.Str()] = _ge
			}
		}
	}
	return _ga, nil
}

func (_cff *fdfParser) getFileOffset() int64 {
	_egff, _ := _cff._bb.Seek(0, _db.SeekCurrent)
	_egff -= int64(_cff._fg.Buffered())
	return _egff
}

func _gef(_aec string) (*fdfParser, error) {
	_bbeb := fdfParser{}
	_dbdg := []byte(_aec)
	_bec := _af.NewReader(_dbdg)
	_bbeb._bb = _bec
	_bbeb._aeb = map[int64]_da.PdfObject{}
	_beg := _ce.NewReader(_bec)
	_bbeb._fg = _beg
	_bbeb._cba = int64(len(_aec))
	return &_bbeb, _bbeb.parse()
}

func (_ffb *fdfParser) readTextLine() (string, error) {
	var _ea _af.Buffer
	for {
		_bg, _fag := _ffb._fg.Peek(1)
		if _fag != nil {
			_ff.Log.Debug("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073", _fag.Error())
			return _ea.String(), _fag
		}
		if (_bg[0] != '\r') && (_bg[0] != '\n') {
			_aeg, _ := _ffb._fg.ReadByte()
			_ea.WriteByte(_aeg)
		} else {
			break
		}
	}
	return _ea.String(), nil
}

func (_ebe *fdfParser) parseArray() (*_da.PdfObjectArray, error) {
	_dbe := _da.MakeArray()
	_ebe._fg.ReadByte()
	for {
		_ebe.skipSpaces()
		_gad, _cebg := _ebe._fg.Peek(1)
		if _cebg != nil {
			return _dbe, _cebg
		}
		if _gad[0] == ']' {
			_ebe._fg.ReadByte()
			break
		}
		_bee, _cebg := _ebe.parseObject()
		if _cebg != nil {
			return _dbe, _cebg
		}
		_dbe.Append(_bee)
	}
	return _dbe, nil
}

type fdfParser struct {
	_bfd int
	_cfg int
	_aeb map[int64]_da.PdfObject
	_bb  _db.ReadSeeker
	_fg  *_ce.Reader
	_cba int64
	_gcd *_da.PdfObjectDictionary
}

func (_bd *fdfParser) parseHexString() (*_da.PdfObjectString, error) {
	_bd._fg.ReadByte()
	var _gddc _af.Buffer
	for {
		_abc, _bbe := _bd._fg.Peek(1)
		if _bbe != nil {
			return _da.MakeHexString(""), _bbe
		}
		if _abc[0] == '>' {
			_bd._fg.ReadByte()
			break
		}
		_daa, _ := _bd._fg.ReadByte()
		if !_da.IsWhiteSpace(_daa) {
			_gddc.WriteByte(_daa)
		}
	}
	if _gddc.Len()%2 == 1 {
		_gddc.WriteRune('0')
	}
	_fgd, _bgf := _cf.DecodeString(_gddc.String())
	if _bgf != nil {
		_ff.Log.Debug("\u0045\u0052\u0052\u004f\u0052\u0020\u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0068\u0065\u0078\u0020\u0073\u0074r\u0069\u006e\u0067\u003a\u0020\u0027\u0025\u0073\u0027 \u002d\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u0061n\u0020\u0065\u006d\u0070\u0074\u0079 \u0073\u0074\u0072i\u006e\u0067", _gddc.String())
		return _da.MakeHexString(""), nil
	}
	return _da.MakeHexString(string(_fgd)), nil
}

func (_abe *fdfParser) parseString() (*_da.PdfObjectString, error) {
	_abe._fg.ReadByte()
	var _eaf _af.Buffer
	_bff := 1
	for {
		_bbb, _bgg := _abe._fg.Peek(1)
		if _bgg != nil {
			return _da.MakeString(_eaf.String()), _bgg
		}
		if _bbb[0] == '\\' {
			_abe._fg.ReadByte()
			_dba, _abgba := _abe._fg.ReadByte()
			if _abgba != nil {
				return _da.MakeString(_eaf.String()), _abgba
			}
			if _da.IsOctalDigit(_dba) {
				_gfb, _dfg := _abe._fg.Peek(2)
				if _dfg != nil {
					return _da.MakeString(_eaf.String()), _dfg
				}
				var _ddf []byte
				_ddf = append(_ddf, _dba)
				for _, _cbe := range _gfb {
					if _da.IsOctalDigit(_cbe) {
						_ddf = append(_ddf, _cbe)
					} else {
						break
					}
				}
				_abe._fg.Discard(len(_ddf) - 1)
				_ff.Log.Trace("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022", _ddf)
				_dge, _dfg := _b.ParseUint(string(_ddf), 8, 32)
				if _dfg != nil {
					return _da.MakeString(_eaf.String()), _dfg
				}
				_eaf.WriteByte(byte(_dge))
				continue
			}
			switch _dba {
			case 'n':
				_eaf.WriteRune('\n')
			case 'r':
				_eaf.WriteRune('\r')
			case 't':
				_eaf.WriteRune('\t')
			case 'b':
				_eaf.WriteRune('\b')
			case 'f':
				_eaf.WriteRune('\f')
			case '(':
				_eaf.WriteRune('(')
			case ')':
				_eaf.WriteRune(')')
			case '\\':
				_eaf.WriteRune('\\')
			}
			continue
		} else if _bbb[0] == '(' {
			_bff++
		} else if _bbb[0] == ')' {
			_bff--
			if _bff == 0 {
				_abe._fg.ReadByte()
				break
			}
		}
		_edb, _ := _abe._fg.ReadByte()
		_eaf.WriteByte(_edb)
	}
	return _da.MakeString(_eaf.String()), nil
}

func _cfe(_cede _db.ReadSeeker) (*fdfParser, error) {
	_ffgc := &fdfParser{}
	_ffgc._bb = _cede
	_ffgc._aeb = map[int64]_da.PdfObject{}
	_fae, _cebb, _gae := _ffgc.parseFdfVersion()
	if _gae != nil {
		_ff.Log.Error("U\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0076e\u0072\u0073\u0069o\u006e:\u0020\u0025\u0076", _gae)
		return nil, _gae
	}
	_ffgc._bfd = _fae
	_ffgc._cfg = _cebb
	_gae = _ffgc.parse()
	return _ffgc, _gae
}

var _gf = _ab.MustCompile("\u0025F\u0044F\u002d\u0028\u005c\u0064\u0029\u005c\u002e\u0028\u005c\u0064\u0029")

// LoadFromPath loads FDF form data from file path `fdfPath`.
func LoadFromPath(fdfPath string) (*Data, error) {
	_fb, _dd := _fa.Open(fdfPath)
	if _dd != nil {
		return nil, _dd
	}
	defer _fb.Close()
	return Load(_fb)
}

func (_ebb *fdfParser) parseObject() (_da.PdfObject, error) {
	_ff.Log.Trace("\u0052e\u0061d\u0020\u0064\u0069\u0072\u0065c\u0074\u0020o\u0062\u006a\u0065\u0063\u0074")
	_ebb.skipSpaces()
	for {
		_ac, _agd := _ebb._fg.Peek(2)
		if _agd != nil {
			return nil, _agd
		}
		_ff.Log.Trace("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073", string(_ac))
		if _ac[0] == '/' {
			_cacb, _deg := _ebb.parseName()
			_ff.Log.Trace("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027", _cacb)
			return &_cacb, _deg
		} else if _ac[0] == '(' {
			_ff.Log.Trace("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!")
			return _ebb.parseString()
		} else if _ac[0] == '[' {
			_ff.Log.Trace("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021")
			return _ebb.parseArray()
		} else if (_ac[0] == '<') && (_ac[1] == '<') {
			_ff.Log.Trace("\u002d>\u0044\u0069\u0063\u0074\u0021")
			return _ebb.parseDict()
		} else if _ac[0] == '<' {
			_ff.Log.Trace("\u002d\u003e\u0048\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0021")
			return _ebb.parseHexString()
		} else if _ac[0] == '%' {
			_ebb.readComment()
			_ebb.skipSpaces()
		} else {
			_ff.Log.Trace("\u002d\u003eN\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0072\u0065\u0066\u003f")
			_ac, _ = _ebb._fg.Peek(15)
			_eag := string(_ac)
			_ff.Log.Trace("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073", _eag)
			if (len(_eag) > 3) && (_eag[:4] == "\u006e\u0075\u006c\u006c") {
				_cbf, _fgg := _ebb.parseNull()
				return &_cbf, _fgg
			} else if (len(_eag) > 4) && (_eag[:5] == "\u0066\u0061\u006cs\u0065") {
				_ebgb, _cca := _ebb.parseBool()
				return &_ebgb, _cca
			} else if (len(_eag) > 3) && (_eag[:4] == "\u0074\u0072\u0075\u0065") {
				_bfcd, _gddcf := _ebb.parseBool()
				return &_bfcd, _gddcf
			}
			_daaf := _cac.FindStringSubmatch(_eag)
			if len(_daaf) > 1 {
				_ac, _ = _ebb._fg.ReadBytes('R')
				_ff.Log.Trace("\u002d\u003e\u0020\u0021\u0052\u0065\u0066\u003a\u0020\u0027\u0025\u0073\u0027", string(_ac[:]))
				_ccb, _afac := _feg(string(_ac))
				return &_ccb, _afac
			}
			_dbg := _ca.FindStringSubmatch(_eag)
			if len(_dbg) > 1 {
				_ff.Log.Trace("\u002d\u003e\u0020\u004e\u0075\u006d\u0062\u0065\u0072\u0021")
				return _ebb.parseNumber()
			}
			_dbg = _cfa.FindStringSubmatch(_eag)
			if len(_dbg) > 1 {
				_ff.Log.Trace("\u002d\u003e\u0020\u0045xp\u006f\u006e\u0065\u006e\u0074\u0069\u0061\u006c\u0020\u004e\u0075\u006d\u0062\u0065r\u0021")
				_ff.Log.Trace("\u0025\u0020\u0073", _dbg)
				return _ebb.parseNumber()
			}
			_ff.Log.Debug("\u0045R\u0052\u004f\u0052\u0020U\u006e\u006b\u006e\u006f\u0077n\u0020(\u0070e\u0065\u006b\u0020\u0022\u0025\u0073\u0022)", _eag)
			return nil, _d.New("\u006f\u0062\u006a\u0065\u0063t\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020\u0075\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0074\u0074\u0065\u0072\u006e")
		}
	}
}

// Load loads FDF form data from `r`.
func Load(r _db.ReadSeeker) (*Data, error) {
	_cb, _g := _cfe(r)
	if _g != nil {
		return nil, _g
	}
	_gc, _g := _cb.Root()
	if _g != nil {
		return nil, _g
	}
	_dc, _fe := _da.GetArray(_gc.Get("\u0046\u0069\u0065\u006c\u0064\u0073"))
	if !_fe {
		return nil, _d.New("\u0066\u0069\u0065\u006c\u0064\u0073\u0020\u006d\u0069s\u0073\u0069\u006e\u0067")
	}
	return &Data{_cc: _dc, _bf: _gc}, nil
}

var _ffg = _ab.MustCompile("\u0028\u005c\u0064\u002b)\\\u0073\u002b\u0028\u005c\u0064\u002b\u0029\u005c\u0073\u002b\u006f\u0062\u006a")

func (_dacf *fdfParser) parse() error {
	_dacf._bb.Seek(0, _db.SeekStart)
	_dacf._fg = _ce.NewReader(_dacf._bb)
	for {
		_dacf.skipComments()
		_ccdb, _fedf := _dacf._fg.Peek(20)
		if _fedf != nil {
			_ff.Log.Debug("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c\u0020\u0074\u006f\u0020r\u0065a\u0064\u0020\u0069\u006e\u0064\u0069\u0072\u0065\u0063\u0074\u0020\u006f\u0062\u006a")
			return _fedf
		}
		if _f.HasPrefix(string(_ccdb), "\u0074r\u0061\u0069\u006c\u0065\u0072") {
			_dacf._fg.Discard(7)
			_dacf.skipSpaces()
			_dacf.skipComments()
			_gcbe, _ := _dacf.parseDict()
			_dacf._gcd = _gcbe
			break
		}
		_agg := _ffg.FindStringSubmatchIndex(string(_ccdb))
		if len(_agg) < 6 {
			_ff.Log.Debug("\u0045\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0061\u0062l\u0065\u0020\u0074\u006f \u0066\u0069\u006e\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0073\u0069\u0067\u006e\u0061\u0074\u0075\u0072\u0065\u0020\u0028\u0025\u0073\u0029", string(_ccdb))
			return _d.New("\u0075\u006e\u0061b\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0063\u0074\u0020\u0069\u006e\u0064\u0069\u0072\u0065\u0063\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020s\u0069\u0067\u006e\u0061\u0074\u0075\u0072\u0065")
		}
		_fc, _fedf := _dacf.parseIndirectObject()
		if _fedf != nil {
			return _fedf
		}
		switch _gac := _fc.(type) {
		case *_da.PdfIndirectObject:
			_dacf._aeb[_gac.ObjectNumber] = _gac
		case *_da.PdfObjectStream:
			_dacf._aeb[_gac.ObjectNumber] = _gac
		default:
			return _d.New("\u0074\u0079\u0070\u0065\u0020\u0065\u0072\u0072\u006f\u0072")
		}
	}
	return nil
}

func (_faa *fdfParser) parseFdfVersion() (int, int, error) {
	_faa._bb.Seek(0, _db.SeekStart)
	_fbf := 20
	_baa := make([]byte, _fbf)
	_faa._bb.Read(_baa)
	_cad := _gf.FindStringSubmatch(string(_baa))
	if len(_cad) < 3 {
		_fegg, _ada, _gag := _faa.seekFdfVersionTopDown()
		if _gag != nil {
			_ff.Log.Debug("F\u0061\u0069\u006c\u0065\u0064\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u002d\u0020\u0075n\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066\u0069nd\u0020\u0076\u0065r\u0073i\u006f\u006e")
			return 0, 0, _gag
		}
		return _fegg, _ada, nil
	}
	_eec, _egbc := _b.Atoi(_cad[1])
	if _egbc != nil {
		return 0, 0, _egbc
	}
	_gaa, _egbc := _b.Atoi(_cad[2])
	if _egbc != nil {
		return 0, 0, _egbc
	}
	_ff.Log.Debug("\u0046\u0064\u0066\u0020\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u0020%\u0064\u002e\u0025\u0064", _eec, _gaa)
	return _eec, _gaa, nil
}

// Root returns the Root of the FDF document.
func (_cce *fdfParser) Root() (*_da.PdfObjectDictionary, error) {
	if _cce._gcd != nil {
		if _fdb, _egd := _cce.trace(_cce._gcd.Get("\u0052\u006f\u006f\u0074")).(*_da.PdfObjectDictionary); _egd {
			if _ccaf, _cd := _cce.trace(_fdb.Get("\u0046\u0044\u0046")).(*_da.PdfObjectDictionary); _cd {
				return _ccaf, nil
			}
		}
	}
	var _ebdg []int64
	for _cgb := range _cce._aeb {
		_ebdg = append(_ebdg, _cgb)
	}
	_afg.Slice(_ebdg, func(_dacc, _cag int) bool { return _ebdg[_dacc] < _ebdg[_cag] })
	for _, _efd := range _ebdg {
		_ggg := _cce._aeb[_efd]
		if _edfg, _gca := _cce.trace(_ggg).(*_da.PdfObjectDictionary); _gca {
			if _daga, _daeg := _cce.trace(_edfg.Get("\u0046\u0044\u0046")).(*_da.PdfObjectDictionary); _daeg {
				return _daga, nil
			}
		}
	}
	return nil, _d.New("\u0046\u0044\u0046\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064")
}

func (_gcb *fdfParser) readComment() (string, error) {
	var _ccf _af.Buffer
	_, _gbe := _gcb.skipSpaces()
	if _gbe != nil {
		return _ccf.String(), _gbe
	}
	_dcg := true
	for {
		_fed, _bfc := _gcb._fg.Peek(1)
		if _bfc != nil {
			_ff.Log.Debug("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073", _bfc.Error())
			return _ccf.String(), _bfc
		}
		if _dcg && _fed[0] != '%' {
			return _ccf.String(), _d.New("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025")
		}
		_dcg = false
		if (_fed[0] != '\r') && (_fed[0] != '\n') {
			_gg, _ := _gcb._fg.ReadByte()
			_ccf.WriteByte(_gg)
		} else {
			break
		}
	}
	return _ccf.String(), nil
}

func (_cg *fdfParser) skipSpaces() (int, error) {
	_ddg := 0
	for {
		_agf, _aed := _cg._fg.ReadByte()
		if _aed != nil {
			return 0, _aed
		}
		if _da.IsWhiteSpace(_agf) {
			_ddg++
		} else {
			_cg._fg.UnreadByte()
			break
		}
	}
	return _ddg, nil
}

func (_gaac *fdfParser) seekToEOFMarker(_ccfa int64) error {
	_ged := int64(0)
	_bfcc := int64(1000)
	for _ged < _ccfa {
		if _ccfa <= (_bfcc + _ged) {
			_bfcc = _ccfa - _ged
		}
		_, _dag := _gaac._bb.Seek(-_ged-_bfcc, _db.SeekEnd)
		if _dag != nil {
			return _dag
		}
		_eeb := make([]byte, _bfcc)
		_gaac._bb.Read(_eeb)
		_ff.Log.Trace("\u004c\u006f\u006f\u006bi\u006e\u0067\u0020\u0066\u006f\u0072\u0020\u0045\u004f\u0046 \u006da\u0072\u006b\u0065\u0072\u003a\u0020\u0022%\u0073\u0022", string(_eeb))
		_fegf := _ebg.FindAllStringIndex(string(_eeb), -1)
		if _fegf != nil {
			_gde := _fegf[len(_fegf)-1]
			_ff.Log.Trace("\u0049\u006e\u0064\u003a\u0020\u0025\u0020\u0064", _fegf)
			_gaac._bb.Seek(-_ged-_bfcc+int64(_gde[0]), _db.SeekEnd)
			return nil
		}
		_ff.Log.Debug("\u0057\u0061\u0072\u006e\u0069\u006eg\u003a\u0020\u0045\u004f\u0046\u0020\u006d\u0061\u0072\u006b\u0065\u0072\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064\u0021\u0020\u002d\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020s\u0065e\u006b\u0069\u006e\u0067")
		_ged += _bfcc
	}
	_ff.Log.Debug("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0045\u004f\u0046\u0020\u006d\u0061\u0072\u006be\u0072 \u0077\u0061\u0073\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u002e")
	return _d.New("\u0045\u004f\u0046\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064")
}

func (_gdg *fdfParser) parseIndirectObject() (_da.PdfObject, error) {
	_adab := _da.PdfIndirectObject{}
	_ff.Log.Trace("\u002dR\u0065a\u0064\u0020\u0069\u006e\u0064i\u0072\u0065c\u0074\u0020\u006f\u0062\u006a")
	_ffgd, _bfce := _gdg._fg.Peek(20)
	if _bfce != nil {
		_ff.Log.Debug("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c\u0020\u0074\u006f\u0020r\u0065a\u0064\u0020\u0069\u006e\u0064\u0069\u0072\u0065\u0063\u0074\u0020\u006f\u0062\u006a")
		return &_adab, _bfce
	}
	_ff.Log.Trace("\u0028\u0069\u006edi\u0072\u0065\u0063\u0074\u0020\u006f\u0062\u006a\u0020\u0070\u0065\u0065\u006b\u0020\u0022\u0025\u0073\u0022", string(_ffgd))
	_dce := _ffg.FindStringSubmatchIndex(string(_ffgd))
	if len(_dce) < 6 {
		_ff.Log.Debug("\u0045\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0061\u0062l\u0065\u0020\u0074\u006f \u0066\u0069\u006e\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0073\u0069\u0067\u006e\u0061\u0074\u0075\u0072\u0065\u0020\u0028\u0025\u0073\u0029", string(_ffgd))
		return &_adab, _d.New("\u0075\u006e\u0061b\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0063\u0074\u0020\u0069\u006e\u0064\u0069\u0072\u0065\u0063\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020s\u0069\u0067\u006e\u0061\u0074\u0075\u0072\u0065")
	}
	_gdg._fg.Discard(_dce[0])
	_ff.Log.Trace("O\u0066\u0066\u0073\u0065\u0074\u0073\u0020\u0025\u0020\u0064", _dce)
	_gba := _dce[1] - _dce[0]
	_afee := make([]byte, _gba)
	_, _bfce = _gdg.readAtLeast(_afee, _gba)
	if _bfce != nil {
		_ff.Log.Debug("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u006e\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0072\u0065\u0061\u0064\u0020-\u0020\u0025\u0073", _bfce)
		return nil, _bfce
	}
	_ff.Log.Trace("\u0074\u0065\u0078t\u006c\u0069\u006e\u0065\u003a\u0020\u0025\u0073", _afee)
	_aaa := _ffg.FindStringSubmatch(string(_afee))
	if len(_aaa) < 3 {
		_ff.Log.Debug("\u0045\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0061\u0062l\u0065\u0020\u0074\u006f \u0066\u0069\u006e\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0073\u0069\u0067\u006e\u0061\u0074\u0075\u0072\u0065\u0020\u0028\u0025\u0073\u0029", string(_afee))
		return &_adab, _d.New("\u0075\u006e\u0061b\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0063\u0074\u0020\u0069\u006e\u0064\u0069\u0072\u0065\u0063\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020s\u0069\u0067\u006e\u0061\u0074\u0075\u0072\u0065")
	}
	_ebd, _ := _b.Atoi(_aaa[1])
	_ffa, _ := _b.Atoi(_aaa[2])
	_adab.ObjectNumber = int64(_ebd)
	_adab.GenerationNumber = int64(_ffa)
	for {
		_aebd, _bae := _gdg._fg.Peek(2)
		if _bae != nil {
			return &_adab, _bae
		}
		_ff.Log.Trace("I\u006ed\u002e\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021", string(_aebd), string(_aebd))
		if _da.IsWhiteSpace(_aebd[0]) {
			_gdg.skipSpaces()
		} else if _aebd[0] == '%' {
			_gdg.skipComments()
		} else if (_aebd[0] == '<') && (_aebd[1] == '<') {
			_ff.Log.Trace("\u0043\u0061\u006c\u006c\u0020\u0050\u0061\u0072\u0073e\u0044\u0069\u0063\u0074")
			_adab.PdfObject, _bae = _gdg.parseDict()
			_ff.Log.Trace("\u0045\u004f\u0046\u0020Ca\u006c\u006c\u0020\u0050\u0061\u0072\u0073\u0065\u0044\u0069\u0063\u0074\u003a\u0020%\u0076", _bae)
			if _bae != nil {
				return &_adab, _bae
			}
			_ff.Log.Trace("\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0064\u0069\u0063t\u0069\u006f\u006e\u0061\u0072\u0079\u002e.\u002e\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e")
		} else if (_aebd[0] == '/') || (_aebd[0] == '(') || (_aebd[0] == '[') || (_aebd[0] == '<') {
			_adab.PdfObject, _bae = _gdg.parseObject()
			if _bae != nil {
				return &_adab, _bae
			}
			_ff.Log.Trace("P\u0061\u0072\u0073\u0065\u0064\u0020o\u0062\u006a\u0065\u0063\u0074\u0020\u002e\u002e\u002e \u0066\u0069\u006ei\u0073h\u0065\u0064\u002e")
		} else {
			if _aebd[0] == 'e' {
				_fefc, _agde := _gdg.readTextLine()
				if _agde != nil {
					return nil, _agde
				}
				if len(_fefc) >= 6 && _fefc[0:6] == "\u0065\u006e\u0064\u006f\u0062\u006a" {
					break
				}
			} else if _aebd[0] == 's' {
				_aebd, _ = _gdg._fg.Peek(10)
				if string(_aebd[:6]) == "\u0073\u0074\u0072\u0065\u0061\u006d" {
					_bca := 6
					if len(_aebd) > 6 {
						if _da.IsWhiteSpace(_aebd[_bca]) && _aebd[_bca] != '\r' && _aebd[_bca] != '\n' {
							_ff.Log.Debug("\u004e\u006fn\u002d\u0063\u006f\u006e\u0066\u006f\u0072\u006d\u0061\u006e\u0074\u0020\u0046\u0044\u0046\u0020\u006e\u006f\u0074 \u0065\u006e\u0064\u0069\u006e\u0067 \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u006c\u0069\u006e\u0065\u0020\u0070\u0072o\u0070\u0065r\u006c\u0079\u0020\u0077i\u0074\u0068\u0020\u0045\u004fL\u0020\u006d\u0061\u0072\u006b\u0065\u0072")
							_bca++
						}
						switch _aebd[_bca] {
						case '\r':
							_bca++
							if _aebd[_bca] == '\n' {
								_bca++
							}
						case '\n':
							_bca++
						}
					}
					_gdg._fg.Discard(_bca)
					_ade, _aef := _adab.PdfObject.(*_da.PdfObjectDictionary)
					if !_aef {
						return nil, _d.New("\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u006di\u0073s\u0069\u006e\u0067\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079")
					}
					_ff.Log.Trace("\u0053\u0074\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0020\u0025\u0073", _ade)
					_caf, _gcee := _ade.Get("\u004c\u0065\u006e\u0067\u0074\u0068").(*_da.PdfObjectInteger)
					if !_gcee {
						return nil, _d.New("\u0073\u0074re\u0061\u006d\u0020l\u0065\u006e\u0067\u0074h n\u0065ed\u0073\u0020\u0074\u006f\u0020\u0062\u0065 a\u006e\u0020\u0069\u006e\u0074\u0065\u0067e\u0072")
					}
					_abcc := *_caf
					if _abcc < 0 {
						return nil, _d.New("\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u006e\u0065\u0065\u0064\u0073\u0020\u0074\u006f \u0062e\u0020\u006c\u006f\u006e\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0030")
					}
					if int64(_abcc) > _gdg._cba {
						_ff.Log.Debug("\u0045\u0052R\u004f\u0052\u003a\u0020\u0053t\u0072\u0065\u0061\u006d\u0020l\u0065\u006e\u0067\u0074\u0068\u0020\u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0066\u0069\u006c\u0065\u0020\u0073\u0069\u007a\u0065")
						return nil, _d.New("\u0069n\u0076\u0061l\u0069\u0064\u0020\u0073t\u0072\u0065\u0061m\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u002c\u0020la\u0072\u0067\u0065r\u0020\u0074h\u0061\u006e\u0020\u0066\u0069\u006ce\u0020\u0073i\u007a\u0065")
					}
					_gfc := make([]byte, _abcc)
					_, _bae = _gdg.readAtLeast(_gfc, int(_abcc))
					if _bae != nil {
						_ff.Log.Debug("E\u0052\u0052\u004f\u0052 s\u0074r\u0065\u0061\u006d\u0020\u0028%\u0064\u0029\u003a\u0020\u0025\u0058", len(_gfc), _gfc)
						_ff.Log.Debug("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v", _bae)
						return nil, _bae
					}
					_gaab := _da.PdfObjectStream{}
					_gaab.Stream = _gfc
					_gaab.PdfObjectDictionary = _adab.PdfObject.(*_da.PdfObjectDictionary)
					_gaab.ObjectNumber = _adab.ObjectNumber
					_gaab.GenerationNumber = _adab.GenerationNumber
					_gdg.skipSpaces()
					_gdg._fg.Discard(9)
					_gdg.skipSpaces()
					return &_gaab, nil
				}
			}
			_adab.PdfObject, _bae = _gdg.parseObject()
			return &_adab, _bae
		}
	}
	_ff.Log.Trace("\u0052\u0065\u0074\u0075rn\u0069\u006e\u0067\u0020\u0069\u006e\u0064\u0069\u0072\u0065\u0063\u0074\u0021")
	return &_adab, nil
}

func (_gbf *fdfParser) parseBool() (_da.PdfObjectBool, error) {
	_ebgf, _agfb := _gbf._fg.Peek(4)
	if _agfb != nil {
		return _da.PdfObjectBool(false), _agfb
	}
	if (len(_ebgf) >= 4) && (string(_ebgf[:4]) == "\u0074\u0072\u0075\u0065") {
		_gbf._fg.Discard(4)
		return _da.PdfObjectBool(true), nil
	}
	_ebgf, _agfb = _gbf._fg.Peek(5)
	if _agfb != nil {
		return _da.PdfObjectBool(false), _agfb
	}
	if (len(_ebgf) >= 5) && (string(_ebgf[:5]) == "\u0066\u0061\u006cs\u0065") {
		_gbf._fg.Discard(5)
		return _da.PdfObjectBool(false), nil
	}
	return _da.PdfObjectBool(false), _d.New("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg")
}

func (_afgd *fdfParser) parseNull() (_da.PdfObjectNull, error) {
	_, _egb := _afgd._fg.Discard(4)
	return _da.PdfObjectNull{}, _egb
}

// Data represents forms data format (FDF) file data.
type Data struct {
	_bf *_da.PdfObjectDictionary
	_cc *_da.PdfObjectArray
}

var _ebg = _ab.MustCompile("\u0025\u0025\u0045O\u0046")

func (_aff *fdfParser) parseDict() (*_da.PdfObjectDictionary, error) {
	_ff.Log.Trace("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0046\u0044\u0046\u0020D\u0069\u0063\u0074\u0021")
	_gcc := _da.MakeDict()
	_agfc, _ := _aff._fg.ReadByte()
	if _agfc != '<' {
		return nil, _d.New("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074")
	}
	_agfc, _ = _aff._fg.ReadByte()
	if _agfc != '<' {
		return nil, _d.New("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074")
	}
	for {
		_aff.skipSpaces()
		_aff.skipComments()
		_ccd, _gcg := _aff._fg.Peek(2)
		if _gcg != nil {
			return nil, _gcg
		}
		_ff.Log.Trace("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021", string(_ccd), string(_ccd))
		if (_ccd[0] == '>') && (_ccd[1] == '>') {
			_ff.Log.Trace("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079")
			_aff._fg.ReadByte()
			_aff._fg.ReadByte()
			break
		}
		_ff.Log.Trace("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021")
		_dec, _gcg := _aff.parseName()
		_ff.Log.Trace("\u004be\u0079\u003a\u0020\u0025\u0073", _dec)
		if _gcg != nil {
			_ff.Log.Debug("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073", _gcg)
			return nil, _gcg
		}
		if len(_dec) > 4 && _dec[len(_dec)-4:] == "\u006e\u0075\u006c\u006c" {
			_cfc := _dec[0 : len(_dec)-4]
			_ff.Log.Debug("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029", _dec)
			_ff.Log.Debug("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c", _cfc)
			_aff.skipSpaces()
			_ded, _ := _aff._fg.Peek(1)
			if _ded[0] == '/' {
				_gcc.Set(_cfc, _da.MakeNull())
				continue
			}
		}
		_aff.skipSpaces()
		_bbbf, _gcg := _aff.parseObject()
		if _gcg != nil {
			return nil, _gcg
		}
		_gcc.Set(_dec, _bbbf)
		_ff.Log.Trace("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073", _dec, _bbbf.String())
	}
	_ff.Log.Trace("\u0072\u0065\u0074\u0075rn\u0069\u006e\u0067\u0020\u0046\u0044\u0046\u0020\u0044\u0069\u0063\u0074\u0021")
	return _gcc, nil
}

func (_bad *fdfParser) trace(_afc _da.PdfObject) _da.PdfObject {
	switch _bcaa := _afc.(type) {
	case *_da.PdfObjectReference:
		_gea, _abbb := _bad._aeb[_bcaa.ObjectNumber].(*_da.PdfIndirectObject)
		if _abbb {
			return _gea.PdfObject
		}
		_ff.Log.Debug("\u0054\u0079\u0070\u0065\u0020\u0065\u0072\u0072\u006f\u0072")
		return nil
	case *_da.PdfIndirectObject:
		return _bcaa.PdfObject
	}
	return _afc
}

func (_be *fdfParser) parseName() (_da.PdfObjectName, error) {
	var _cga _af.Buffer
	_afe := false
	for {
		_aa, _df := _be._fg.Peek(1)
		if _df == _db.EOF {
			break
		}
		if _df != nil {
			return _da.PdfObjectName(_cga.String()), _df
		}
		if !_afe {
			switch _aa[0] {
			case '/':
				_afe = true
				_be._fg.ReadByte()
			case '%':
				_be.readComment()
				_be.skipSpaces()
			default:
				_ff.Log.Debug("\u0045\u0052\u0052\u004f\u0052\u0020N\u0061\u006d\u0065\u0020\u0073\u0074\u0061\u0072\u0074\u0069\u006e\u0067\u0020w\u0069\u0074\u0068\u0020\u0025\u0073\u0020(\u0025\u0020\u0078\u0029", _aa, _aa)
				return _da.PdfObjectName(_cga.String()), _c.Errorf("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029", _aa[0])
			}
		} else {
			if _da.IsWhiteSpace(_aa[0]) {
				break
			} else if (_aa[0] == '/') || (_aa[0] == '[') || (_aa[0] == '(') || (_aa[0] == ']') || (_aa[0] == '<') || (_aa[0] == '>') {
				break
			} else if _aa[0] == '#' {
				_bgc, _ced := _be._fg.Peek(3)
				if _ced != nil {
					return _da.PdfObjectName(_cga.String()), _ced
				}
				_be._fg.Discard(3)
				_edf, _ced := _cf.DecodeString(string(_bgc[1:3]))
				if _ced != nil {
					return _da.PdfObjectName(_cga.String()), _ced
				}
				_cga.Write(_edf)
			} else {
				_gdd, _ := _be._fg.ReadByte()
				_cga.WriteByte(_gdd)
			}
		}
	}
	return _da.PdfObjectName(_cga.String()), nil
}
